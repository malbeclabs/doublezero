// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: bgp.proto

package EosSdkRpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BgpMgrServiceClient is the client API for BgpMgrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BgpMgrServiceClient interface {
	// *
	// Subscription to monitor changes to BGP peers. This request stays active
	// until the client cancels or the server shuts down.
	//
	// EosSdk reference: eos::bgp_peer_handler (class)
	Watch(ctx context.Context, in *BgpPeerWatchRequest, opts ...grpc.CallOption) (BgpMgrService_WatchClient, error)
	// *
	// Queries whether a BGP peer exists or not.
	//
	// EosSdk reference: eos::bgp_mgr::exists.
	Exists(ctx context.Context, in *BgpPeerExistsRequest, opts ...grpc.CallOption) (*BgpPeerExistsResponse, error)
	// *
	// Queries the state of a peer session.
	//
	// EosSdk reference: eos::bgp_mgr::peer_state.
	PeerState(ctx context.Context, in *BgpPeerStateRequest, opts ...grpc.CallOption) (*BgpPeerStateResponse, error)
}

type bgpMgrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBgpMgrServiceClient(cc grpc.ClientConnInterface) BgpMgrServiceClient {
	return &bgpMgrServiceClient{cc}
}

func (c *bgpMgrServiceClient) Watch(ctx context.Context, in *BgpPeerWatchRequest, opts ...grpc.CallOption) (BgpMgrService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &BgpMgrService_ServiceDesc.Streams[0], "/eos.remote.BgpMgrService/watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &bgpMgrServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BgpMgrService_WatchClient interface {
	Recv() (*BgpPeerWatchResponse, error)
	grpc.ClientStream
}

type bgpMgrServiceWatchClient struct {
	grpc.ClientStream
}

func (x *bgpMgrServiceWatchClient) Recv() (*BgpPeerWatchResponse, error) {
	m := new(BgpPeerWatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bgpMgrServiceClient) Exists(ctx context.Context, in *BgpPeerExistsRequest, opts ...grpc.CallOption) (*BgpPeerExistsResponse, error) {
	out := new(BgpPeerExistsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.BgpMgrService/exists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpMgrServiceClient) PeerState(ctx context.Context, in *BgpPeerStateRequest, opts ...grpc.CallOption) (*BgpPeerStateResponse, error) {
	out := new(BgpPeerStateResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.BgpMgrService/peer_state", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BgpMgrServiceServer is the server API for BgpMgrService service.
// All implementations should embed UnimplementedBgpMgrServiceServer
// for forward compatibility
type BgpMgrServiceServer interface {
	// *
	// Subscription to monitor changes to BGP peers. This request stays active
	// until the client cancels or the server shuts down.
	//
	// EosSdk reference: eos::bgp_peer_handler (class)
	Watch(*BgpPeerWatchRequest, BgpMgrService_WatchServer) error
	// *
	// Queries whether a BGP peer exists or not.
	//
	// EosSdk reference: eos::bgp_mgr::exists.
	Exists(context.Context, *BgpPeerExistsRequest) (*BgpPeerExistsResponse, error)
	// *
	// Queries the state of a peer session.
	//
	// EosSdk reference: eos::bgp_mgr::peer_state.
	PeerState(context.Context, *BgpPeerStateRequest) (*BgpPeerStateResponse, error)
}

// UnimplementedBgpMgrServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBgpMgrServiceServer struct {
}

func (UnimplementedBgpMgrServiceServer) Watch(*BgpPeerWatchRequest, BgpMgrService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedBgpMgrServiceServer) Exists(context.Context, *BgpPeerExistsRequest) (*BgpPeerExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedBgpMgrServiceServer) PeerState(context.Context, *BgpPeerStateRequest) (*BgpPeerStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeerState not implemented")
}

// UnsafeBgpMgrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BgpMgrServiceServer will
// result in compilation errors.
type UnsafeBgpMgrServiceServer interface {
	mustEmbedUnimplementedBgpMgrServiceServer()
}

func RegisterBgpMgrServiceServer(s grpc.ServiceRegistrar, srv BgpMgrServiceServer) {
	s.RegisterService(&BgpMgrService_ServiceDesc, srv)
}

func _BgpMgrService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BgpPeerWatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BgpMgrServiceServer).Watch(m, &bgpMgrServiceWatchServer{stream})
}

type BgpMgrService_WatchServer interface {
	Send(*BgpPeerWatchResponse) error
	grpc.ServerStream
}

type bgpMgrServiceWatchServer struct {
	grpc.ServerStream
}

func (x *bgpMgrServiceWatchServer) Send(m *BgpPeerWatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BgpMgrService_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BgpPeerExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpMgrServiceServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.BgpMgrService/exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpMgrServiceServer).Exists(ctx, req.(*BgpPeerExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpMgrService_PeerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BgpPeerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpMgrServiceServer).PeerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.BgpMgrService/peer_state",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpMgrServiceServer).PeerState(ctx, req.(*BgpPeerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BgpMgrService_ServiceDesc is the grpc.ServiceDesc for BgpMgrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BgpMgrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eos.remote.BgpMgrService",
	HandlerType: (*BgpMgrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "exists",
			Handler:    _BgpMgrService_Exists_Handler,
		},
		{
			MethodName: "peer_state",
			Handler:    _BgpMgrService_PeerState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "watch",
			Handler:       _BgpMgrService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bgp.proto",
}
