// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: eth_lag_intf.proto

package EosSdkRpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EthLagIntfMgrServiceClient is the client API for EthLagIntfMgrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EthLagIntfMgrServiceClient interface {
	// *
	// Subscription to monitor LAG interface events. This request
	// stays active until the client cancels or the server shuts down.
	// When all = false and no version is specified, this request has no effect.
	//
	// EosSdk reference: eos::eth_lag_intf_handler (class)
	Watch(ctx context.Context, in *EthLagIntfWatchRequest, opts ...grpc.CallOption) (EthLagIntfMgrService_WatchClient, error)
	// *
	// Returns a list of interfaces configured as members of any LAG interface in
	// system.
	//
	// EosSdk reference:: eos::eth_lag_intf_mgr::eth_lag_intf_iter
	EthLagIntfs(ctx context.Context, in *EthLagIntfsRequest, opts ...grpc.CallOption) (EthLagIntfMgrService_EthLagIntfsClient, error)
	// *
	// Queries whether an ethernet LAG interface exists.
	//
	// EosSdk reference:: eos::eth_lag_intf_mgr::eth_lag_intf_exists
	Exists(ctx context.Context, in *EthLagIntfExistsRequest, opts ...grpc.CallOption) (*EthLagIntfExistsResponse, error)
	// *
	// Returns a list of physical interfaces configured as members of any LAG
	// interface in the system.
	//
	// EosSdk reference:: eos::eth_lag_intf_mgr::eth_lag_intf_member_iter
	EthLagIntfMembers(ctx context.Context, in *EthLagIntfMembersRequest, opts ...grpc.CallOption) (EthLagIntfMgrService_EthLagIntfMembersClient, error)
	// *
	// Creates a LAG interface.
	//
	// EosSdk reference:: eos::eth_lag_intf_mgr::eth_lag_intf_is
	EthLagIntfIs(ctx context.Context, in *EthLagIntfIsRequest, opts ...grpc.CallOption) (*EthLagIntfIsResponse, error)
	// *
	// Creates many LAG interfaces in a single request.
	//
	// EosSdk reference:: eos::eth_lag_intf_mgr::eth_lag_intf_is
	BulkEthLagIntfIs(ctx context.Context, in *BulkEthLagIntfIsRequest, opts ...grpc.CallOption) (*BulkEthLagIntfIsResponse, error)
	// *
	// Returns the details for a LAG interface given its ID.
	//
	// EosSdk reference:: eos::eth_lag_intf_mgr::eth_lag_intf
	EthLagIntf(ctx context.Context, in *EthLagIntfRequest, opts ...grpc.CallOption) (*EthLagIntfResponse, error)
	// *
	// Deletes a LAG interface.
	//
	// EosSdk reference:: eos::eth_lag_intf_mgr::eth_lag_intf_del
	EthLagIntfDel(ctx context.Context, in *EthLagIntfDelRequest, opts ...grpc.CallOption) (*EthLagIntfDelResponse, error)
	// *
	// Deletes many LAG interfaces in a single request.
	//
	// EosSdk reference:: eos::eth_lag_intf_mgr::eth_lag_intf_del
	BulkEthLagIntfDel(ctx context.Context, in *BulkEthLagIntfDelRequest, opts ...grpc.CallOption) (*BulkEthLagIntfDelResponse, error)
	// *
	// Returns the speed of a LAG interface, in Mbits/s.
	//
	// EosSdk reference:: eos::eth_lag_intf_mgr::speed
	Speed(ctx context.Context, in *EthLagIntfSpeedRequest, opts ...grpc.CallOption) (*EthLagIntfSpeedResponse, error)
	// *
	// Returns the minimum number of links that must be up for a LAG interface to be
	// considered up too.
	//
	// EosSdk reference:: eos::eth_lag_intf_mgr::min_links
	MinLinks(ctx context.Context, in *EthLagIntfMinLinksRequest, opts ...grpc.CallOption) (*EthLagIntfMinLinksResponse, error)
	// *
	// Sets min links values for a LAG interface.
	//
	// EosSdk reference:: eos::eth_lag_intf_mgr::eth_lag_intf_min_links_is
	MinLinksIs(ctx context.Context, in *EthLagIntfMinLinksIsRequest, opts ...grpc.CallOption) (*EthLagIntfMinLinksIsResponse, error)
	// *
	// Sets min links values for many LAG interfaces.
	//
	// EosSdk reference:: eos::eth_lag_intf_mgr::eth_lag_intf_min_links_is
	BulkMinLinksIs(ctx context.Context, in *BulkEthLagIntfMinLinksIsRequest, opts ...grpc.CallOption) (*BulkEthLagIntfMinLinksIsResponse, error)
	// *
	// Sets the fallback type for a LAG interface.
	//
	// EosSdk reference: eth_lag_intf_mgr::fallback_type_is
	FallbackTypeIs(ctx context.Context, in *EthLagIntfFallbackTypeIsRequest, opts ...grpc.CallOption) (*EthLagIntfFallbackTypeIsResponse, error)
	// *
	// Sets the fallback type for many LAG interfaces.
	//
	// EosSdk reference: eth_lag_intf_mgr::fallback_type_is
	BulkFallbackTypeIs(ctx context.Context, in *BulkEthLagIntfFallbackTypeIsRequest, opts ...grpc.CallOption) (*BulkEthLagIntfFallbackTypeIsResponse, error)
	// *
	// Returns the fallback mode for a LAG interface.
	//
	// EosSdk reference: eth_lag_intf_mgr::fallback_type
	FallbackType(ctx context.Context, in *EthLagIntfFallbackTypeRequest, opts ...grpc.CallOption) (*EthLagIntfFallbackTypeResponse, error)
	// *
	// Sets the fallback timeout for a LAG interface, in seconds.
	//
	// EosSdk reference: eth_lag_intf_mgr::fallback_timeout_is
	FallbackTimeoutIs(ctx context.Context, in *EthLagIntfFallbackTimeoutIsRequest, opts ...grpc.CallOption) (*EthLagIntfFallbackTimeoutIsResponse, error)
	// *
	// Sets fallback timeouts for multiple LAG interfaces, in seconds.
	//
	// EosSdk reference: eth_lag_intf_mgr::fallback_timeout_is
	BulkFallbackTimeoutIs(ctx context.Context, in *BulkEthLagIntfFallbackTimeoutIsRequest, opts ...grpc.CallOption) (*BulkEthLagIntfFallbackTimeoutIsResponse, error)
	// *
	// Returns the LACP active mode timeout value, in seconds.
	//
	// EosSdk reference: eth_lag_intf_mgr::fallback_timeout
	FallbackTimeout(ctx context.Context, in *EthLagIntfFallbackTimeoutRequest, opts ...grpc.CallOption) (*EthLagIntfFallbackTimeoutResponse, error)
	// *
	// Returns the default fallback timeout value, in seconds.
	//
	// EosSdk reference: eth_lag_intf_mgr::fallback_timeout_default
	FallbackTimeoutDefault(ctx context.Context, in *EthLagIntfFallbackTimeoutDefaultRequest, opts ...grpc.CallOption) (*EthLagIntfFallbackTimeoutDefaultResponse, error)
	// *
	// Adds a physical interface to a LAG interface.
	//
	// EosSdk reference: eth_lag_intf_mgr::membership_set
	MembershipSet(ctx context.Context, in *EthLagIntfMembershipSetRequest, opts ...grpc.CallOption) (*EthLagIntfMembershipSetResponse, error)
	// *
	// Adds multiple physical interfaces to multiple LAG interfaces.
	//
	// EosSdk reference: eth_lag_intf_mgr::membership_set
	BulkMembershipSet(ctx context.Context, in *BulkEthLagIntfMembershipSetRequest, opts ...grpc.CallOption) (*BulkEthLagIntfMembershipSetResponse, error)
	// *
	// Removes an interface from a LAG interface.
	//
	// EosSdk reference: eth_lag_intf_mgr::membership_del
	MembershipDel(ctx context.Context, in *EthLagIntfMembershipDelRequest, opts ...grpc.CallOption) (*EthLagIntfMembershipDelResponse, error)
	// *
	// Removes multiple interfaces from muliple LAG interfaces.
	//
	// EosSdk reference: eth_lag_intf_mgr::membership_del
	BulkMembershipDel(ctx context.Context, in *BulkEthLagIntfMembershipDelRequest, opts ...grpc.CallOption) (*BulkEthLagIntfMembershipDelResponse, error)
	// *
	// Returns the LAG interface ID to which the physical interface is configured
	// to belong.
	//
	// EosSdk reference: eth_lag_intf_mgr::membership
	Membership(ctx context.Context, in *EthLagIntfMembershipRequest, opts ...grpc.CallOption) (*EthLagIntfMembershipResponse, error)
	// *
	// Returns the member interface's status details.
	//
	// EosSdk reference: eth_lag_intf_mgr::membership_status
	MembershipStatus(ctx context.Context, in *EthLagIntfMembershipStatusRequest, opts ...grpc.CallOption) (*EthLagIntfMembershipStatusResponse, error)
	// *
	// Sets the port LACP priority.
	//
	// EosSdk reference: eth_lag_intf_mgr::member_priority_is
	MemberPriorityIs(ctx context.Context, in *EthLagIntfMemberPriorityIsRequest, opts ...grpc.CallOption) (*EthLagIntfMemberPriorityIsResponse, error)
	// *
	// Sets LACP priorities of multiple ports.
	//
	// EosSdk reference: eth_lag_intf_mgr::member_priority_is
	BulkMemberPriorityIs(ctx context.Context, in *BulkEthLagIntfMemberPriorityIsRequest, opts ...grpc.CallOption) (*BulkEthLagIntfMemberPriorityIsResponse, error)
	// *
	// Gets the interface's configured LACP priority.
	//
	// EosSdk reference: eth_lag_intf_mgr::member_priority
	MemberPriority(ctx context.Context, in *EthLagIntfMemberPriorityRequest, opts ...grpc.CallOption) (*EthLagIntfMemberPriorityResponse, error)
	// *
	// Sets the mode of this member in a LAG interface.
	//
	// EosSdk reference: eth_lag_intf_mgr::member_mode_is
	MemberModeIs(ctx context.Context, in *EthLagIntfMemberModeIsRequest, opts ...grpc.CallOption) (*EthLagIntfMemberModeIsResponse, error)
	// *
	// Sets the modes of multiple members in LAG interfaces.
	//
	// EosSdk reference: eth_lag_intf_mgr::member_mode_is
	BulkMemberModeIs(ctx context.Context, in *BulkEthLagIntfMemberModeIsRequest, opts ...grpc.CallOption) (*BulkEthLagIntfMemberModeIsResponse, error)
	// *
	// Returns the mode of this member in a LAG interface.
	//
	// EosSdk reference: eth_lag_intf_mgr::member_mode
	MemberMode(ctx context.Context, in *EthLagIntfMemberModeRequest, opts ...grpc.CallOption) (*EthLagIntfMemberModeResponse, error)
	// *
	// Sets the LACP timeout for a member in a LAG, in seconds.
	//
	// EosSdk reference: eth_lag_intf_mgr::member_timeout_is
	MemberTimeoutIs(ctx context.Context, in *EthLagIntfMemberTimeoutIsRequest, opts ...grpc.CallOption) (*EthLagIntfMemberTimeoutIsResponse, error)
	// *
	// Sets the LACP timeout for multiple members in LAG interfaces, in seconds.
	//
	// EosSdk reference: eth_lag_intf_mgr::member_timeout_is
	BulkMemberTimeoutIs(ctx context.Context, in *BulkEthLagIntfMemberTimeoutIsRequest, opts ...grpc.CallOption) (*BulkEthLagIntfMemberTimeoutIsResponse, error)
	// *
	// Gets the configured LACP timeout for a member in a LAG, in seconds.
	//
	// EosSdk reference: eth_lag_intf_mgr::member_timeout
	MemberTimeout(ctx context.Context, in *EthLagIntfMemberTimeoutRequest, opts ...grpc.CallOption) (*EthLagIntfMemberTimeoutResponse, error)
	// *
	// Returns whether this interface is active in a LAG.
	//
	// EosSdk reference: eth_lag_intf_mgr::member_active
	MemberActive(ctx context.Context, in *EthLagIntfMemberActiveRequest, opts ...grpc.CallOption) (*EthLagIntfMemberActiveResponse, error)
	// *
	// Returns the time in seconds since reboot when this interface was last added
	// or removed as a member from a LAG.
	//
	// EosSdk reference: eth_lag_intf_mgr::member_time
	MemberTime(ctx context.Context, in *EthLagIntfMemberTimeRequest, opts ...grpc.CallOption) (*EthLagIntfMemberTimeResponse, error)
	// *
	// Returns the reason this interface isn't active in a LAG.
	//
	// EosSdk reference: eth_lag_intf_mgr::member_reason
	MemberReason(ctx context.Context, in *EthLagIntfMemberReasonRequest, opts ...grpc.CallOption) (*EthLagIntfMemberReasonResponse, error)
}

type ethLagIntfMgrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEthLagIntfMgrServiceClient(cc grpc.ClientConnInterface) EthLagIntfMgrServiceClient {
	return &ethLagIntfMgrServiceClient{cc}
}

func (c *ethLagIntfMgrServiceClient) Watch(ctx context.Context, in *EthLagIntfWatchRequest, opts ...grpc.CallOption) (EthLagIntfMgrService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &EthLagIntfMgrService_ServiceDesc.Streams[0], "/eos.remote.EthLagIntfMgrService/watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &ethLagIntfMgrServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EthLagIntfMgrService_WatchClient interface {
	Recv() (*EthLagIntfWatchResponse, error)
	grpc.ClientStream
}

type ethLagIntfMgrServiceWatchClient struct {
	grpc.ClientStream
}

func (x *ethLagIntfMgrServiceWatchClient) Recv() (*EthLagIntfWatchResponse, error) {
	m := new(EthLagIntfWatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ethLagIntfMgrServiceClient) EthLagIntfs(ctx context.Context, in *EthLagIntfsRequest, opts ...grpc.CallOption) (EthLagIntfMgrService_EthLagIntfsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EthLagIntfMgrService_ServiceDesc.Streams[1], "/eos.remote.EthLagIntfMgrService/eth_lag_intfs", opts...)
	if err != nil {
		return nil, err
	}
	x := &ethLagIntfMgrServiceEthLagIntfsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EthLagIntfMgrService_EthLagIntfsClient interface {
	Recv() (*EthLagIntfsResponse, error)
	grpc.ClientStream
}

type ethLagIntfMgrServiceEthLagIntfsClient struct {
	grpc.ClientStream
}

func (x *ethLagIntfMgrServiceEthLagIntfsClient) Recv() (*EthLagIntfsResponse, error) {
	m := new(EthLagIntfsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ethLagIntfMgrServiceClient) Exists(ctx context.Context, in *EthLagIntfExistsRequest, opts ...grpc.CallOption) (*EthLagIntfExistsResponse, error) {
	out := new(EthLagIntfExistsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/exists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) EthLagIntfMembers(ctx context.Context, in *EthLagIntfMembersRequest, opts ...grpc.CallOption) (EthLagIntfMgrService_EthLagIntfMembersClient, error) {
	stream, err := c.cc.NewStream(ctx, &EthLagIntfMgrService_ServiceDesc.Streams[2], "/eos.remote.EthLagIntfMgrService/eth_lag_intf_members", opts...)
	if err != nil {
		return nil, err
	}
	x := &ethLagIntfMgrServiceEthLagIntfMembersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EthLagIntfMgrService_EthLagIntfMembersClient interface {
	Recv() (*EthLagIntfMembersResponse, error)
	grpc.ClientStream
}

type ethLagIntfMgrServiceEthLagIntfMembersClient struct {
	grpc.ClientStream
}

func (x *ethLagIntfMgrServiceEthLagIntfMembersClient) Recv() (*EthLagIntfMembersResponse, error) {
	m := new(EthLagIntfMembersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ethLagIntfMgrServiceClient) EthLagIntfIs(ctx context.Context, in *EthLagIntfIsRequest, opts ...grpc.CallOption) (*EthLagIntfIsResponse, error) {
	out := new(EthLagIntfIsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/eth_lag_intf_is", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) BulkEthLagIntfIs(ctx context.Context, in *BulkEthLagIntfIsRequest, opts ...grpc.CallOption) (*BulkEthLagIntfIsResponse, error) {
	out := new(BulkEthLagIntfIsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/bulk_eth_lag_intf_is", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) EthLagIntf(ctx context.Context, in *EthLagIntfRequest, opts ...grpc.CallOption) (*EthLagIntfResponse, error) {
	out := new(EthLagIntfResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/eth_lag_intf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) EthLagIntfDel(ctx context.Context, in *EthLagIntfDelRequest, opts ...grpc.CallOption) (*EthLagIntfDelResponse, error) {
	out := new(EthLagIntfDelResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/eth_lag_intf_del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) BulkEthLagIntfDel(ctx context.Context, in *BulkEthLagIntfDelRequest, opts ...grpc.CallOption) (*BulkEthLagIntfDelResponse, error) {
	out := new(BulkEthLagIntfDelResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/bulk_eth_lag_intf_del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) Speed(ctx context.Context, in *EthLagIntfSpeedRequest, opts ...grpc.CallOption) (*EthLagIntfSpeedResponse, error) {
	out := new(EthLagIntfSpeedResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/speed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) MinLinks(ctx context.Context, in *EthLagIntfMinLinksRequest, opts ...grpc.CallOption) (*EthLagIntfMinLinksResponse, error) {
	out := new(EthLagIntfMinLinksResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/min_links", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) MinLinksIs(ctx context.Context, in *EthLagIntfMinLinksIsRequest, opts ...grpc.CallOption) (*EthLagIntfMinLinksIsResponse, error) {
	out := new(EthLagIntfMinLinksIsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/min_links_is", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) BulkMinLinksIs(ctx context.Context, in *BulkEthLagIntfMinLinksIsRequest, opts ...grpc.CallOption) (*BulkEthLagIntfMinLinksIsResponse, error) {
	out := new(BulkEthLagIntfMinLinksIsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/bulk_min_links_is", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) FallbackTypeIs(ctx context.Context, in *EthLagIntfFallbackTypeIsRequest, opts ...grpc.CallOption) (*EthLagIntfFallbackTypeIsResponse, error) {
	out := new(EthLagIntfFallbackTypeIsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/fallback_type_is", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) BulkFallbackTypeIs(ctx context.Context, in *BulkEthLagIntfFallbackTypeIsRequest, opts ...grpc.CallOption) (*BulkEthLagIntfFallbackTypeIsResponse, error) {
	out := new(BulkEthLagIntfFallbackTypeIsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/bulk_fallback_type_is", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) FallbackType(ctx context.Context, in *EthLagIntfFallbackTypeRequest, opts ...grpc.CallOption) (*EthLagIntfFallbackTypeResponse, error) {
	out := new(EthLagIntfFallbackTypeResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/fallback_type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) FallbackTimeoutIs(ctx context.Context, in *EthLagIntfFallbackTimeoutIsRequest, opts ...grpc.CallOption) (*EthLagIntfFallbackTimeoutIsResponse, error) {
	out := new(EthLagIntfFallbackTimeoutIsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/fallback_timeout_is", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) BulkFallbackTimeoutIs(ctx context.Context, in *BulkEthLagIntfFallbackTimeoutIsRequest, opts ...grpc.CallOption) (*BulkEthLagIntfFallbackTimeoutIsResponse, error) {
	out := new(BulkEthLagIntfFallbackTimeoutIsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/bulk_fallback_timeout_is", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) FallbackTimeout(ctx context.Context, in *EthLagIntfFallbackTimeoutRequest, opts ...grpc.CallOption) (*EthLagIntfFallbackTimeoutResponse, error) {
	out := new(EthLagIntfFallbackTimeoutResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/fallback_timeout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) FallbackTimeoutDefault(ctx context.Context, in *EthLagIntfFallbackTimeoutDefaultRequest, opts ...grpc.CallOption) (*EthLagIntfFallbackTimeoutDefaultResponse, error) {
	out := new(EthLagIntfFallbackTimeoutDefaultResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/fallback_timeout_default", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) MembershipSet(ctx context.Context, in *EthLagIntfMembershipSetRequest, opts ...grpc.CallOption) (*EthLagIntfMembershipSetResponse, error) {
	out := new(EthLagIntfMembershipSetResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/membership_set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) BulkMembershipSet(ctx context.Context, in *BulkEthLagIntfMembershipSetRequest, opts ...grpc.CallOption) (*BulkEthLagIntfMembershipSetResponse, error) {
	out := new(BulkEthLagIntfMembershipSetResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/bulk_membership_set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) MembershipDel(ctx context.Context, in *EthLagIntfMembershipDelRequest, opts ...grpc.CallOption) (*EthLagIntfMembershipDelResponse, error) {
	out := new(EthLagIntfMembershipDelResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/membership_del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) BulkMembershipDel(ctx context.Context, in *BulkEthLagIntfMembershipDelRequest, opts ...grpc.CallOption) (*BulkEthLagIntfMembershipDelResponse, error) {
	out := new(BulkEthLagIntfMembershipDelResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/bulk_membership_del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) Membership(ctx context.Context, in *EthLagIntfMembershipRequest, opts ...grpc.CallOption) (*EthLagIntfMembershipResponse, error) {
	out := new(EthLagIntfMembershipResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/membership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) MembershipStatus(ctx context.Context, in *EthLagIntfMembershipStatusRequest, opts ...grpc.CallOption) (*EthLagIntfMembershipStatusResponse, error) {
	out := new(EthLagIntfMembershipStatusResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/membership_status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) MemberPriorityIs(ctx context.Context, in *EthLagIntfMemberPriorityIsRequest, opts ...grpc.CallOption) (*EthLagIntfMemberPriorityIsResponse, error) {
	out := new(EthLagIntfMemberPriorityIsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/member_priority_is", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) BulkMemberPriorityIs(ctx context.Context, in *BulkEthLagIntfMemberPriorityIsRequest, opts ...grpc.CallOption) (*BulkEthLagIntfMemberPriorityIsResponse, error) {
	out := new(BulkEthLagIntfMemberPriorityIsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/bulk_member_priority_is", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) MemberPriority(ctx context.Context, in *EthLagIntfMemberPriorityRequest, opts ...grpc.CallOption) (*EthLagIntfMemberPriorityResponse, error) {
	out := new(EthLagIntfMemberPriorityResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/member_priority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) MemberModeIs(ctx context.Context, in *EthLagIntfMemberModeIsRequest, opts ...grpc.CallOption) (*EthLagIntfMemberModeIsResponse, error) {
	out := new(EthLagIntfMemberModeIsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/member_mode_is", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) BulkMemberModeIs(ctx context.Context, in *BulkEthLagIntfMemberModeIsRequest, opts ...grpc.CallOption) (*BulkEthLagIntfMemberModeIsResponse, error) {
	out := new(BulkEthLagIntfMemberModeIsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/bulk_member_mode_is", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) MemberMode(ctx context.Context, in *EthLagIntfMemberModeRequest, opts ...grpc.CallOption) (*EthLagIntfMemberModeResponse, error) {
	out := new(EthLagIntfMemberModeResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/member_mode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) MemberTimeoutIs(ctx context.Context, in *EthLagIntfMemberTimeoutIsRequest, opts ...grpc.CallOption) (*EthLagIntfMemberTimeoutIsResponse, error) {
	out := new(EthLagIntfMemberTimeoutIsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/member_timeout_is", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) BulkMemberTimeoutIs(ctx context.Context, in *BulkEthLagIntfMemberTimeoutIsRequest, opts ...grpc.CallOption) (*BulkEthLagIntfMemberTimeoutIsResponse, error) {
	out := new(BulkEthLagIntfMemberTimeoutIsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/bulk_member_timeout_is", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) MemberTimeout(ctx context.Context, in *EthLagIntfMemberTimeoutRequest, opts ...grpc.CallOption) (*EthLagIntfMemberTimeoutResponse, error) {
	out := new(EthLagIntfMemberTimeoutResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/member_timeout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) MemberActive(ctx context.Context, in *EthLagIntfMemberActiveRequest, opts ...grpc.CallOption) (*EthLagIntfMemberActiveResponse, error) {
	out := new(EthLagIntfMemberActiveResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/member_active", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) MemberTime(ctx context.Context, in *EthLagIntfMemberTimeRequest, opts ...grpc.CallOption) (*EthLagIntfMemberTimeResponse, error) {
	out := new(EthLagIntfMemberTimeResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/member_time", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethLagIntfMgrServiceClient) MemberReason(ctx context.Context, in *EthLagIntfMemberReasonRequest, opts ...grpc.CallOption) (*EthLagIntfMemberReasonResponse, error) {
	out := new(EthLagIntfMemberReasonResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EthLagIntfMgrService/member_reason", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EthLagIntfMgrServiceServer is the server API for EthLagIntfMgrService service.
// All implementations should embed UnimplementedEthLagIntfMgrServiceServer
// for forward compatibility
type EthLagIntfMgrServiceServer interface {
	// *
	// Subscription to monitor LAG interface events. This request
	// stays active until the client cancels or the server shuts down.
	// When all = false and no version is specified, this request has no effect.
	//
	// EosSdk reference: eos::eth_lag_intf_handler (class)
	Watch(*EthLagIntfWatchRequest, EthLagIntfMgrService_WatchServer) error
	// *
	// Returns a list of interfaces configured as members of any LAG interface in
	// system.
	//
	// EosSdk reference:: eos::eth_lag_intf_mgr::eth_lag_intf_iter
	EthLagIntfs(*EthLagIntfsRequest, EthLagIntfMgrService_EthLagIntfsServer) error
	// *
	// Queries whether an ethernet LAG interface exists.
	//
	// EosSdk reference:: eos::eth_lag_intf_mgr::eth_lag_intf_exists
	Exists(context.Context, *EthLagIntfExistsRequest) (*EthLagIntfExistsResponse, error)
	// *
	// Returns a list of physical interfaces configured as members of any LAG
	// interface in the system.
	//
	// EosSdk reference:: eos::eth_lag_intf_mgr::eth_lag_intf_member_iter
	EthLagIntfMembers(*EthLagIntfMembersRequest, EthLagIntfMgrService_EthLagIntfMembersServer) error
	// *
	// Creates a LAG interface.
	//
	// EosSdk reference:: eos::eth_lag_intf_mgr::eth_lag_intf_is
	EthLagIntfIs(context.Context, *EthLagIntfIsRequest) (*EthLagIntfIsResponse, error)
	// *
	// Creates many LAG interfaces in a single request.
	//
	// EosSdk reference:: eos::eth_lag_intf_mgr::eth_lag_intf_is
	BulkEthLagIntfIs(context.Context, *BulkEthLagIntfIsRequest) (*BulkEthLagIntfIsResponse, error)
	// *
	// Returns the details for a LAG interface given its ID.
	//
	// EosSdk reference:: eos::eth_lag_intf_mgr::eth_lag_intf
	EthLagIntf(context.Context, *EthLagIntfRequest) (*EthLagIntfResponse, error)
	// *
	// Deletes a LAG interface.
	//
	// EosSdk reference:: eos::eth_lag_intf_mgr::eth_lag_intf_del
	EthLagIntfDel(context.Context, *EthLagIntfDelRequest) (*EthLagIntfDelResponse, error)
	// *
	// Deletes many LAG interfaces in a single request.
	//
	// EosSdk reference:: eos::eth_lag_intf_mgr::eth_lag_intf_del
	BulkEthLagIntfDel(context.Context, *BulkEthLagIntfDelRequest) (*BulkEthLagIntfDelResponse, error)
	// *
	// Returns the speed of a LAG interface, in Mbits/s.
	//
	// EosSdk reference:: eos::eth_lag_intf_mgr::speed
	Speed(context.Context, *EthLagIntfSpeedRequest) (*EthLagIntfSpeedResponse, error)
	// *
	// Returns the minimum number of links that must be up for a LAG interface to be
	// considered up too.
	//
	// EosSdk reference:: eos::eth_lag_intf_mgr::min_links
	MinLinks(context.Context, *EthLagIntfMinLinksRequest) (*EthLagIntfMinLinksResponse, error)
	// *
	// Sets min links values for a LAG interface.
	//
	// EosSdk reference:: eos::eth_lag_intf_mgr::eth_lag_intf_min_links_is
	MinLinksIs(context.Context, *EthLagIntfMinLinksIsRequest) (*EthLagIntfMinLinksIsResponse, error)
	// *
	// Sets min links values for many LAG interfaces.
	//
	// EosSdk reference:: eos::eth_lag_intf_mgr::eth_lag_intf_min_links_is
	BulkMinLinksIs(context.Context, *BulkEthLagIntfMinLinksIsRequest) (*BulkEthLagIntfMinLinksIsResponse, error)
	// *
	// Sets the fallback type for a LAG interface.
	//
	// EosSdk reference: eth_lag_intf_mgr::fallback_type_is
	FallbackTypeIs(context.Context, *EthLagIntfFallbackTypeIsRequest) (*EthLagIntfFallbackTypeIsResponse, error)
	// *
	// Sets the fallback type for many LAG interfaces.
	//
	// EosSdk reference: eth_lag_intf_mgr::fallback_type_is
	BulkFallbackTypeIs(context.Context, *BulkEthLagIntfFallbackTypeIsRequest) (*BulkEthLagIntfFallbackTypeIsResponse, error)
	// *
	// Returns the fallback mode for a LAG interface.
	//
	// EosSdk reference: eth_lag_intf_mgr::fallback_type
	FallbackType(context.Context, *EthLagIntfFallbackTypeRequest) (*EthLagIntfFallbackTypeResponse, error)
	// *
	// Sets the fallback timeout for a LAG interface, in seconds.
	//
	// EosSdk reference: eth_lag_intf_mgr::fallback_timeout_is
	FallbackTimeoutIs(context.Context, *EthLagIntfFallbackTimeoutIsRequest) (*EthLagIntfFallbackTimeoutIsResponse, error)
	// *
	// Sets fallback timeouts for multiple LAG interfaces, in seconds.
	//
	// EosSdk reference: eth_lag_intf_mgr::fallback_timeout_is
	BulkFallbackTimeoutIs(context.Context, *BulkEthLagIntfFallbackTimeoutIsRequest) (*BulkEthLagIntfFallbackTimeoutIsResponse, error)
	// *
	// Returns the LACP active mode timeout value, in seconds.
	//
	// EosSdk reference: eth_lag_intf_mgr::fallback_timeout
	FallbackTimeout(context.Context, *EthLagIntfFallbackTimeoutRequest) (*EthLagIntfFallbackTimeoutResponse, error)
	// *
	// Returns the default fallback timeout value, in seconds.
	//
	// EosSdk reference: eth_lag_intf_mgr::fallback_timeout_default
	FallbackTimeoutDefault(context.Context, *EthLagIntfFallbackTimeoutDefaultRequest) (*EthLagIntfFallbackTimeoutDefaultResponse, error)
	// *
	// Adds a physical interface to a LAG interface.
	//
	// EosSdk reference: eth_lag_intf_mgr::membership_set
	MembershipSet(context.Context, *EthLagIntfMembershipSetRequest) (*EthLagIntfMembershipSetResponse, error)
	// *
	// Adds multiple physical interfaces to multiple LAG interfaces.
	//
	// EosSdk reference: eth_lag_intf_mgr::membership_set
	BulkMembershipSet(context.Context, *BulkEthLagIntfMembershipSetRequest) (*BulkEthLagIntfMembershipSetResponse, error)
	// *
	// Removes an interface from a LAG interface.
	//
	// EosSdk reference: eth_lag_intf_mgr::membership_del
	MembershipDel(context.Context, *EthLagIntfMembershipDelRequest) (*EthLagIntfMembershipDelResponse, error)
	// *
	// Removes multiple interfaces from muliple LAG interfaces.
	//
	// EosSdk reference: eth_lag_intf_mgr::membership_del
	BulkMembershipDel(context.Context, *BulkEthLagIntfMembershipDelRequest) (*BulkEthLagIntfMembershipDelResponse, error)
	// *
	// Returns the LAG interface ID to which the physical interface is configured
	// to belong.
	//
	// EosSdk reference: eth_lag_intf_mgr::membership
	Membership(context.Context, *EthLagIntfMembershipRequest) (*EthLagIntfMembershipResponse, error)
	// *
	// Returns the member interface's status details.
	//
	// EosSdk reference: eth_lag_intf_mgr::membership_status
	MembershipStatus(context.Context, *EthLagIntfMembershipStatusRequest) (*EthLagIntfMembershipStatusResponse, error)
	// *
	// Sets the port LACP priority.
	//
	// EosSdk reference: eth_lag_intf_mgr::member_priority_is
	MemberPriorityIs(context.Context, *EthLagIntfMemberPriorityIsRequest) (*EthLagIntfMemberPriorityIsResponse, error)
	// *
	// Sets LACP priorities of multiple ports.
	//
	// EosSdk reference: eth_lag_intf_mgr::member_priority_is
	BulkMemberPriorityIs(context.Context, *BulkEthLagIntfMemberPriorityIsRequest) (*BulkEthLagIntfMemberPriorityIsResponse, error)
	// *
	// Gets the interface's configured LACP priority.
	//
	// EosSdk reference: eth_lag_intf_mgr::member_priority
	MemberPriority(context.Context, *EthLagIntfMemberPriorityRequest) (*EthLagIntfMemberPriorityResponse, error)
	// *
	// Sets the mode of this member in a LAG interface.
	//
	// EosSdk reference: eth_lag_intf_mgr::member_mode_is
	MemberModeIs(context.Context, *EthLagIntfMemberModeIsRequest) (*EthLagIntfMemberModeIsResponse, error)
	// *
	// Sets the modes of multiple members in LAG interfaces.
	//
	// EosSdk reference: eth_lag_intf_mgr::member_mode_is
	BulkMemberModeIs(context.Context, *BulkEthLagIntfMemberModeIsRequest) (*BulkEthLagIntfMemberModeIsResponse, error)
	// *
	// Returns the mode of this member in a LAG interface.
	//
	// EosSdk reference: eth_lag_intf_mgr::member_mode
	MemberMode(context.Context, *EthLagIntfMemberModeRequest) (*EthLagIntfMemberModeResponse, error)
	// *
	// Sets the LACP timeout for a member in a LAG, in seconds.
	//
	// EosSdk reference: eth_lag_intf_mgr::member_timeout_is
	MemberTimeoutIs(context.Context, *EthLagIntfMemberTimeoutIsRequest) (*EthLagIntfMemberTimeoutIsResponse, error)
	// *
	// Sets the LACP timeout for multiple members in LAG interfaces, in seconds.
	//
	// EosSdk reference: eth_lag_intf_mgr::member_timeout_is
	BulkMemberTimeoutIs(context.Context, *BulkEthLagIntfMemberTimeoutIsRequest) (*BulkEthLagIntfMemberTimeoutIsResponse, error)
	// *
	// Gets the configured LACP timeout for a member in a LAG, in seconds.
	//
	// EosSdk reference: eth_lag_intf_mgr::member_timeout
	MemberTimeout(context.Context, *EthLagIntfMemberTimeoutRequest) (*EthLagIntfMemberTimeoutResponse, error)
	// *
	// Returns whether this interface is active in a LAG.
	//
	// EosSdk reference: eth_lag_intf_mgr::member_active
	MemberActive(context.Context, *EthLagIntfMemberActiveRequest) (*EthLagIntfMemberActiveResponse, error)
	// *
	// Returns the time in seconds since reboot when this interface was last added
	// or removed as a member from a LAG.
	//
	// EosSdk reference: eth_lag_intf_mgr::member_time
	MemberTime(context.Context, *EthLagIntfMemberTimeRequest) (*EthLagIntfMemberTimeResponse, error)
	// *
	// Returns the reason this interface isn't active in a LAG.
	//
	// EosSdk reference: eth_lag_intf_mgr::member_reason
	MemberReason(context.Context, *EthLagIntfMemberReasonRequest) (*EthLagIntfMemberReasonResponse, error)
}

// UnimplementedEthLagIntfMgrServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEthLagIntfMgrServiceServer struct {
}

func (UnimplementedEthLagIntfMgrServiceServer) Watch(*EthLagIntfWatchRequest, EthLagIntfMgrService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) EthLagIntfs(*EthLagIntfsRequest, EthLagIntfMgrService_EthLagIntfsServer) error {
	return status.Errorf(codes.Unimplemented, "method EthLagIntfs not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) Exists(context.Context, *EthLagIntfExistsRequest) (*EthLagIntfExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) EthLagIntfMembers(*EthLagIntfMembersRequest, EthLagIntfMgrService_EthLagIntfMembersServer) error {
	return status.Errorf(codes.Unimplemented, "method EthLagIntfMembers not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) EthLagIntfIs(context.Context, *EthLagIntfIsRequest) (*EthLagIntfIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EthLagIntfIs not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) BulkEthLagIntfIs(context.Context, *BulkEthLagIntfIsRequest) (*BulkEthLagIntfIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkEthLagIntfIs not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) EthLagIntf(context.Context, *EthLagIntfRequest) (*EthLagIntfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EthLagIntf not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) EthLagIntfDel(context.Context, *EthLagIntfDelRequest) (*EthLagIntfDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EthLagIntfDel not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) BulkEthLagIntfDel(context.Context, *BulkEthLagIntfDelRequest) (*BulkEthLagIntfDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkEthLagIntfDel not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) Speed(context.Context, *EthLagIntfSpeedRequest) (*EthLagIntfSpeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Speed not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) MinLinks(context.Context, *EthLagIntfMinLinksRequest) (*EthLagIntfMinLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinLinks not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) MinLinksIs(context.Context, *EthLagIntfMinLinksIsRequest) (*EthLagIntfMinLinksIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MinLinksIs not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) BulkMinLinksIs(context.Context, *BulkEthLagIntfMinLinksIsRequest) (*BulkEthLagIntfMinLinksIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkMinLinksIs not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) FallbackTypeIs(context.Context, *EthLagIntfFallbackTypeIsRequest) (*EthLagIntfFallbackTypeIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FallbackTypeIs not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) BulkFallbackTypeIs(context.Context, *BulkEthLagIntfFallbackTypeIsRequest) (*BulkEthLagIntfFallbackTypeIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkFallbackTypeIs not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) FallbackType(context.Context, *EthLagIntfFallbackTypeRequest) (*EthLagIntfFallbackTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FallbackType not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) FallbackTimeoutIs(context.Context, *EthLagIntfFallbackTimeoutIsRequest) (*EthLagIntfFallbackTimeoutIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FallbackTimeoutIs not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) BulkFallbackTimeoutIs(context.Context, *BulkEthLagIntfFallbackTimeoutIsRequest) (*BulkEthLagIntfFallbackTimeoutIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkFallbackTimeoutIs not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) FallbackTimeout(context.Context, *EthLagIntfFallbackTimeoutRequest) (*EthLagIntfFallbackTimeoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FallbackTimeout not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) FallbackTimeoutDefault(context.Context, *EthLagIntfFallbackTimeoutDefaultRequest) (*EthLagIntfFallbackTimeoutDefaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FallbackTimeoutDefault not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) MembershipSet(context.Context, *EthLagIntfMembershipSetRequest) (*EthLagIntfMembershipSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MembershipSet not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) BulkMembershipSet(context.Context, *BulkEthLagIntfMembershipSetRequest) (*BulkEthLagIntfMembershipSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkMembershipSet not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) MembershipDel(context.Context, *EthLagIntfMembershipDelRequest) (*EthLagIntfMembershipDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MembershipDel not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) BulkMembershipDel(context.Context, *BulkEthLagIntfMembershipDelRequest) (*BulkEthLagIntfMembershipDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkMembershipDel not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) Membership(context.Context, *EthLagIntfMembershipRequest) (*EthLagIntfMembershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Membership not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) MembershipStatus(context.Context, *EthLagIntfMembershipStatusRequest) (*EthLagIntfMembershipStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MembershipStatus not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) MemberPriorityIs(context.Context, *EthLagIntfMemberPriorityIsRequest) (*EthLagIntfMemberPriorityIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberPriorityIs not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) BulkMemberPriorityIs(context.Context, *BulkEthLagIntfMemberPriorityIsRequest) (*BulkEthLagIntfMemberPriorityIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkMemberPriorityIs not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) MemberPriority(context.Context, *EthLagIntfMemberPriorityRequest) (*EthLagIntfMemberPriorityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberPriority not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) MemberModeIs(context.Context, *EthLagIntfMemberModeIsRequest) (*EthLagIntfMemberModeIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberModeIs not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) BulkMemberModeIs(context.Context, *BulkEthLagIntfMemberModeIsRequest) (*BulkEthLagIntfMemberModeIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkMemberModeIs not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) MemberMode(context.Context, *EthLagIntfMemberModeRequest) (*EthLagIntfMemberModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberMode not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) MemberTimeoutIs(context.Context, *EthLagIntfMemberTimeoutIsRequest) (*EthLagIntfMemberTimeoutIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberTimeoutIs not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) BulkMemberTimeoutIs(context.Context, *BulkEthLagIntfMemberTimeoutIsRequest) (*BulkEthLagIntfMemberTimeoutIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkMemberTimeoutIs not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) MemberTimeout(context.Context, *EthLagIntfMemberTimeoutRequest) (*EthLagIntfMemberTimeoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberTimeout not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) MemberActive(context.Context, *EthLagIntfMemberActiveRequest) (*EthLagIntfMemberActiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberActive not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) MemberTime(context.Context, *EthLagIntfMemberTimeRequest) (*EthLagIntfMemberTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberTime not implemented")
}
func (UnimplementedEthLagIntfMgrServiceServer) MemberReason(context.Context, *EthLagIntfMemberReasonRequest) (*EthLagIntfMemberReasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberReason not implemented")
}

// UnsafeEthLagIntfMgrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EthLagIntfMgrServiceServer will
// result in compilation errors.
type UnsafeEthLagIntfMgrServiceServer interface {
	mustEmbedUnimplementedEthLagIntfMgrServiceServer()
}

func RegisterEthLagIntfMgrServiceServer(s grpc.ServiceRegistrar, srv EthLagIntfMgrServiceServer) {
	s.RegisterService(&EthLagIntfMgrService_ServiceDesc, srv)
}

func _EthLagIntfMgrService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EthLagIntfWatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EthLagIntfMgrServiceServer).Watch(m, &ethLagIntfMgrServiceWatchServer{stream})
}

type EthLagIntfMgrService_WatchServer interface {
	Send(*EthLagIntfWatchResponse) error
	grpc.ServerStream
}

type ethLagIntfMgrServiceWatchServer struct {
	grpc.ServerStream
}

func (x *ethLagIntfMgrServiceWatchServer) Send(m *EthLagIntfWatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EthLagIntfMgrService_EthLagIntfs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EthLagIntfsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EthLagIntfMgrServiceServer).EthLagIntfs(m, &ethLagIntfMgrServiceEthLagIntfsServer{stream})
}

type EthLagIntfMgrService_EthLagIntfsServer interface {
	Send(*EthLagIntfsResponse) error
	grpc.ServerStream
}

type ethLagIntfMgrServiceEthLagIntfsServer struct {
	grpc.ServerStream
}

func (x *ethLagIntfMgrServiceEthLagIntfsServer) Send(m *EthLagIntfsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EthLagIntfMgrService_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthLagIntfExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).Exists(ctx, req.(*EthLagIntfExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_EthLagIntfMembers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EthLagIntfMembersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EthLagIntfMgrServiceServer).EthLagIntfMembers(m, &ethLagIntfMgrServiceEthLagIntfMembersServer{stream})
}

type EthLagIntfMgrService_EthLagIntfMembersServer interface {
	Send(*EthLagIntfMembersResponse) error
	grpc.ServerStream
}

type ethLagIntfMgrServiceEthLagIntfMembersServer struct {
	grpc.ServerStream
}

func (x *ethLagIntfMgrServiceEthLagIntfMembersServer) Send(m *EthLagIntfMembersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EthLagIntfMgrService_EthLagIntfIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthLagIntfIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).EthLagIntfIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/eth_lag_intf_is",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).EthLagIntfIs(ctx, req.(*EthLagIntfIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_BulkEthLagIntfIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkEthLagIntfIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).BulkEthLagIntfIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/bulk_eth_lag_intf_is",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).BulkEthLagIntfIs(ctx, req.(*BulkEthLagIntfIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_EthLagIntf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthLagIntfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).EthLagIntf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/eth_lag_intf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).EthLagIntf(ctx, req.(*EthLagIntfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_EthLagIntfDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthLagIntfDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).EthLagIntfDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/eth_lag_intf_del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).EthLagIntfDel(ctx, req.(*EthLagIntfDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_BulkEthLagIntfDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkEthLagIntfDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).BulkEthLagIntfDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/bulk_eth_lag_intf_del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).BulkEthLagIntfDel(ctx, req.(*BulkEthLagIntfDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_Speed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthLagIntfSpeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).Speed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/speed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).Speed(ctx, req.(*EthLagIntfSpeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_MinLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthLagIntfMinLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).MinLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/min_links",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).MinLinks(ctx, req.(*EthLagIntfMinLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_MinLinksIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthLagIntfMinLinksIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).MinLinksIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/min_links_is",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).MinLinksIs(ctx, req.(*EthLagIntfMinLinksIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_BulkMinLinksIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkEthLagIntfMinLinksIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).BulkMinLinksIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/bulk_min_links_is",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).BulkMinLinksIs(ctx, req.(*BulkEthLagIntfMinLinksIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_FallbackTypeIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthLagIntfFallbackTypeIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).FallbackTypeIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/fallback_type_is",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).FallbackTypeIs(ctx, req.(*EthLagIntfFallbackTypeIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_BulkFallbackTypeIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkEthLagIntfFallbackTypeIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).BulkFallbackTypeIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/bulk_fallback_type_is",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).BulkFallbackTypeIs(ctx, req.(*BulkEthLagIntfFallbackTypeIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_FallbackType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthLagIntfFallbackTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).FallbackType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/fallback_type",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).FallbackType(ctx, req.(*EthLagIntfFallbackTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_FallbackTimeoutIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthLagIntfFallbackTimeoutIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).FallbackTimeoutIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/fallback_timeout_is",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).FallbackTimeoutIs(ctx, req.(*EthLagIntfFallbackTimeoutIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_BulkFallbackTimeoutIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkEthLagIntfFallbackTimeoutIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).BulkFallbackTimeoutIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/bulk_fallback_timeout_is",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).BulkFallbackTimeoutIs(ctx, req.(*BulkEthLagIntfFallbackTimeoutIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_FallbackTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthLagIntfFallbackTimeoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).FallbackTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/fallback_timeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).FallbackTimeout(ctx, req.(*EthLagIntfFallbackTimeoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_FallbackTimeoutDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthLagIntfFallbackTimeoutDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).FallbackTimeoutDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/fallback_timeout_default",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).FallbackTimeoutDefault(ctx, req.(*EthLagIntfFallbackTimeoutDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_MembershipSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthLagIntfMembershipSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).MembershipSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/membership_set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).MembershipSet(ctx, req.(*EthLagIntfMembershipSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_BulkMembershipSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkEthLagIntfMembershipSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).BulkMembershipSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/bulk_membership_set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).BulkMembershipSet(ctx, req.(*BulkEthLagIntfMembershipSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_MembershipDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthLagIntfMembershipDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).MembershipDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/membership_del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).MembershipDel(ctx, req.(*EthLagIntfMembershipDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_BulkMembershipDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkEthLagIntfMembershipDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).BulkMembershipDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/bulk_membership_del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).BulkMembershipDel(ctx, req.(*BulkEthLagIntfMembershipDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_Membership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthLagIntfMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).Membership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/membership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).Membership(ctx, req.(*EthLagIntfMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_MembershipStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthLagIntfMembershipStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).MembershipStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/membership_status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).MembershipStatus(ctx, req.(*EthLagIntfMembershipStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_MemberPriorityIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthLagIntfMemberPriorityIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).MemberPriorityIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/member_priority_is",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).MemberPriorityIs(ctx, req.(*EthLagIntfMemberPriorityIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_BulkMemberPriorityIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkEthLagIntfMemberPriorityIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).BulkMemberPriorityIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/bulk_member_priority_is",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).BulkMemberPriorityIs(ctx, req.(*BulkEthLagIntfMemberPriorityIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_MemberPriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthLagIntfMemberPriorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).MemberPriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/member_priority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).MemberPriority(ctx, req.(*EthLagIntfMemberPriorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_MemberModeIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthLagIntfMemberModeIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).MemberModeIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/member_mode_is",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).MemberModeIs(ctx, req.(*EthLagIntfMemberModeIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_BulkMemberModeIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkEthLagIntfMemberModeIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).BulkMemberModeIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/bulk_member_mode_is",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).BulkMemberModeIs(ctx, req.(*BulkEthLagIntfMemberModeIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_MemberMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthLagIntfMemberModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).MemberMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/member_mode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).MemberMode(ctx, req.(*EthLagIntfMemberModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_MemberTimeoutIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthLagIntfMemberTimeoutIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).MemberTimeoutIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/member_timeout_is",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).MemberTimeoutIs(ctx, req.(*EthLagIntfMemberTimeoutIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_BulkMemberTimeoutIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkEthLagIntfMemberTimeoutIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).BulkMemberTimeoutIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/bulk_member_timeout_is",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).BulkMemberTimeoutIs(ctx, req.(*BulkEthLagIntfMemberTimeoutIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_MemberTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthLagIntfMemberTimeoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).MemberTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/member_timeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).MemberTimeout(ctx, req.(*EthLagIntfMemberTimeoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_MemberActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthLagIntfMemberActiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).MemberActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/member_active",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).MemberActive(ctx, req.(*EthLagIntfMemberActiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_MemberTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthLagIntfMemberTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).MemberTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/member_time",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).MemberTime(ctx, req.(*EthLagIntfMemberTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthLagIntfMgrService_MemberReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EthLagIntfMemberReasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthLagIntfMgrServiceServer).MemberReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EthLagIntfMgrService/member_reason",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthLagIntfMgrServiceServer).MemberReason(ctx, req.(*EthLagIntfMemberReasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EthLagIntfMgrService_ServiceDesc is the grpc.ServiceDesc for EthLagIntfMgrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EthLagIntfMgrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eos.remote.EthLagIntfMgrService",
	HandlerType: (*EthLagIntfMgrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "exists",
			Handler:    _EthLagIntfMgrService_Exists_Handler,
		},
		{
			MethodName: "eth_lag_intf_is",
			Handler:    _EthLagIntfMgrService_EthLagIntfIs_Handler,
		},
		{
			MethodName: "bulk_eth_lag_intf_is",
			Handler:    _EthLagIntfMgrService_BulkEthLagIntfIs_Handler,
		},
		{
			MethodName: "eth_lag_intf",
			Handler:    _EthLagIntfMgrService_EthLagIntf_Handler,
		},
		{
			MethodName: "eth_lag_intf_del",
			Handler:    _EthLagIntfMgrService_EthLagIntfDel_Handler,
		},
		{
			MethodName: "bulk_eth_lag_intf_del",
			Handler:    _EthLagIntfMgrService_BulkEthLagIntfDel_Handler,
		},
		{
			MethodName: "speed",
			Handler:    _EthLagIntfMgrService_Speed_Handler,
		},
		{
			MethodName: "min_links",
			Handler:    _EthLagIntfMgrService_MinLinks_Handler,
		},
		{
			MethodName: "min_links_is",
			Handler:    _EthLagIntfMgrService_MinLinksIs_Handler,
		},
		{
			MethodName: "bulk_min_links_is",
			Handler:    _EthLagIntfMgrService_BulkMinLinksIs_Handler,
		},
		{
			MethodName: "fallback_type_is",
			Handler:    _EthLagIntfMgrService_FallbackTypeIs_Handler,
		},
		{
			MethodName: "bulk_fallback_type_is",
			Handler:    _EthLagIntfMgrService_BulkFallbackTypeIs_Handler,
		},
		{
			MethodName: "fallback_type",
			Handler:    _EthLagIntfMgrService_FallbackType_Handler,
		},
		{
			MethodName: "fallback_timeout_is",
			Handler:    _EthLagIntfMgrService_FallbackTimeoutIs_Handler,
		},
		{
			MethodName: "bulk_fallback_timeout_is",
			Handler:    _EthLagIntfMgrService_BulkFallbackTimeoutIs_Handler,
		},
		{
			MethodName: "fallback_timeout",
			Handler:    _EthLagIntfMgrService_FallbackTimeout_Handler,
		},
		{
			MethodName: "fallback_timeout_default",
			Handler:    _EthLagIntfMgrService_FallbackTimeoutDefault_Handler,
		},
		{
			MethodName: "membership_set",
			Handler:    _EthLagIntfMgrService_MembershipSet_Handler,
		},
		{
			MethodName: "bulk_membership_set",
			Handler:    _EthLagIntfMgrService_BulkMembershipSet_Handler,
		},
		{
			MethodName: "membership_del",
			Handler:    _EthLagIntfMgrService_MembershipDel_Handler,
		},
		{
			MethodName: "bulk_membership_del",
			Handler:    _EthLagIntfMgrService_BulkMembershipDel_Handler,
		},
		{
			MethodName: "membership",
			Handler:    _EthLagIntfMgrService_Membership_Handler,
		},
		{
			MethodName: "membership_status",
			Handler:    _EthLagIntfMgrService_MembershipStatus_Handler,
		},
		{
			MethodName: "member_priority_is",
			Handler:    _EthLagIntfMgrService_MemberPriorityIs_Handler,
		},
		{
			MethodName: "bulk_member_priority_is",
			Handler:    _EthLagIntfMgrService_BulkMemberPriorityIs_Handler,
		},
		{
			MethodName: "member_priority",
			Handler:    _EthLagIntfMgrService_MemberPriority_Handler,
		},
		{
			MethodName: "member_mode_is",
			Handler:    _EthLagIntfMgrService_MemberModeIs_Handler,
		},
		{
			MethodName: "bulk_member_mode_is",
			Handler:    _EthLagIntfMgrService_BulkMemberModeIs_Handler,
		},
		{
			MethodName: "member_mode",
			Handler:    _EthLagIntfMgrService_MemberMode_Handler,
		},
		{
			MethodName: "member_timeout_is",
			Handler:    _EthLagIntfMgrService_MemberTimeoutIs_Handler,
		},
		{
			MethodName: "bulk_member_timeout_is",
			Handler:    _EthLagIntfMgrService_BulkMemberTimeoutIs_Handler,
		},
		{
			MethodName: "member_timeout",
			Handler:    _EthLagIntfMgrService_MemberTimeout_Handler,
		},
		{
			MethodName: "member_active",
			Handler:    _EthLagIntfMgrService_MemberActive_Handler,
		},
		{
			MethodName: "member_time",
			Handler:    _EthLagIntfMgrService_MemberTime_Handler,
		},
		{
			MethodName: "member_reason",
			Handler:    _EthLagIntfMgrService_MemberReason_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "watch",
			Handler:       _EthLagIntfMgrService_Watch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "eth_lag_intfs",
			Handler:       _EthLagIntfMgrService_EthLagIntfs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "eth_lag_intf_members",
			Handler:       _EthLagIntfMgrService_EthLagIntfMembers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "eth_lag_intf.proto",
}
