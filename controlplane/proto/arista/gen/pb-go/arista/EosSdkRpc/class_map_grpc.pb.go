// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: class_map.proto

package EosSdkRpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClassMapMgrServiceClient is the client API for ClassMapMgrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassMapMgrServiceClient interface {
	// *
	// Initiates a class map resync process. Starts a blank configuration to be
	// applied once resync_complete is called.
	//
	// EosSdk reference: eos::class_map_mgr::resync_init
	ResyncInit(ctx context.Context, in *ClassMapResyncInitRequest, opts ...grpc.CallOption) (*ClassMapResyncInitResponse, error)
	// *
	// Ends the current class map resync process.
	//
	// EosSdk reference: eos::class_map_mgr::resync_complete
	ResyncComplete(ctx context.Context, in *ClassMapResyncCompleteRequest, opts ...grpc.CallOption) (*ClassMapResyncCompleteResponse, error)
	// *
	// Queries whether the specified class map is configured or not.
	//
	// EosSdk reference: eos::class_map_mgr::exists
	Exists(ctx context.Context, in *ClassMapExistsRequest, opts ...grpc.CallOption) (*ClassMapExistsResponse, error)
	// *
	// Queries a class map given its key.
	//
	// EosSdk reference: eos::class_map_mgr::class_map
	ClassMap(ctx context.Context, in *ClassMapRequest, opts ...grpc.CallOption) (*ClassMapResponse, error)
	// *
	// Creates or updates a class map.
	//
	// EosSdk reference: eos::class_map_mgr::class_map_is
	ClassMapIs(ctx context.Context, in *ClassMapIsRequest, opts ...grpc.CallOption) (*ClassMapIsResponse, error)
	// *
	// Creates or updates multiple class maps in a single call.
	//
	// EosSdk reference: eos::class_map_mgr::class_map_is
	BulkClassMapIs(ctx context.Context, in *BulkClassMapIsRequest, opts ...grpc.CallOption) (*BulkClassMapIsResponse, error)
	// *
	// Deletes a class map.
	//
	// EosSdk reference: eos::class_map_mgr::class_map_del
	ClassMapDel(ctx context.Context, in *ClassMapDelRequest, opts ...grpc.CallOption) (*ClassMapDelResponse, error)
	// *
	// Deletes multiple class maps in a single call.
	//
	// EosSdk reference: eos::class_map_mgr::class_map_del
	BulkClassMapDel(ctx context.Context, in *BulkClassMapDelRequest, opts ...grpc.CallOption) (*BulkClassMapDelResponse, error)
	// *
	// Returns a list of the keys of the configured class maps for a
	// specified policy_feature
	//
	// EosSdk reference: eos::class_map_mgr::class_map_iter
	ClassMaps(ctx context.Context, in *ClassMapsRequest, opts ...grpc.CallOption) (ClassMapMgrService_ClassMapsClient, error)
}

type classMapMgrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClassMapMgrServiceClient(cc grpc.ClientConnInterface) ClassMapMgrServiceClient {
	return &classMapMgrServiceClient{cc}
}

func (c *classMapMgrServiceClient) ResyncInit(ctx context.Context, in *ClassMapResyncInitRequest, opts ...grpc.CallOption) (*ClassMapResyncInitResponse, error) {
	out := new(ClassMapResyncInitResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.ClassMapMgrService/resync_init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classMapMgrServiceClient) ResyncComplete(ctx context.Context, in *ClassMapResyncCompleteRequest, opts ...grpc.CallOption) (*ClassMapResyncCompleteResponse, error) {
	out := new(ClassMapResyncCompleteResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.ClassMapMgrService/resync_complete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classMapMgrServiceClient) Exists(ctx context.Context, in *ClassMapExistsRequest, opts ...grpc.CallOption) (*ClassMapExistsResponse, error) {
	out := new(ClassMapExistsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.ClassMapMgrService/exists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classMapMgrServiceClient) ClassMap(ctx context.Context, in *ClassMapRequest, opts ...grpc.CallOption) (*ClassMapResponse, error) {
	out := new(ClassMapResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.ClassMapMgrService/class_map", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classMapMgrServiceClient) ClassMapIs(ctx context.Context, in *ClassMapIsRequest, opts ...grpc.CallOption) (*ClassMapIsResponse, error) {
	out := new(ClassMapIsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.ClassMapMgrService/class_map_is", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classMapMgrServiceClient) BulkClassMapIs(ctx context.Context, in *BulkClassMapIsRequest, opts ...grpc.CallOption) (*BulkClassMapIsResponse, error) {
	out := new(BulkClassMapIsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.ClassMapMgrService/bulk_class_map_is", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classMapMgrServiceClient) ClassMapDel(ctx context.Context, in *ClassMapDelRequest, opts ...grpc.CallOption) (*ClassMapDelResponse, error) {
	out := new(ClassMapDelResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.ClassMapMgrService/class_map_del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classMapMgrServiceClient) BulkClassMapDel(ctx context.Context, in *BulkClassMapDelRequest, opts ...grpc.CallOption) (*BulkClassMapDelResponse, error) {
	out := new(BulkClassMapDelResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.ClassMapMgrService/bulk_class_map_del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classMapMgrServiceClient) ClassMaps(ctx context.Context, in *ClassMapsRequest, opts ...grpc.CallOption) (ClassMapMgrService_ClassMapsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClassMapMgrService_ServiceDesc.Streams[0], "/eos.remote.ClassMapMgrService/class_maps", opts...)
	if err != nil {
		return nil, err
	}
	x := &classMapMgrServiceClassMapsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClassMapMgrService_ClassMapsClient interface {
	Recv() (*ClassMapsResponse, error)
	grpc.ClientStream
}

type classMapMgrServiceClassMapsClient struct {
	grpc.ClientStream
}

func (x *classMapMgrServiceClassMapsClient) Recv() (*ClassMapsResponse, error) {
	m := new(ClassMapsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClassMapMgrServiceServer is the server API for ClassMapMgrService service.
// All implementations should embed UnimplementedClassMapMgrServiceServer
// for forward compatibility
type ClassMapMgrServiceServer interface {
	// *
	// Initiates a class map resync process. Starts a blank configuration to be
	// applied once resync_complete is called.
	//
	// EosSdk reference: eos::class_map_mgr::resync_init
	ResyncInit(context.Context, *ClassMapResyncInitRequest) (*ClassMapResyncInitResponse, error)
	// *
	// Ends the current class map resync process.
	//
	// EosSdk reference: eos::class_map_mgr::resync_complete
	ResyncComplete(context.Context, *ClassMapResyncCompleteRequest) (*ClassMapResyncCompleteResponse, error)
	// *
	// Queries whether the specified class map is configured or not.
	//
	// EosSdk reference: eos::class_map_mgr::exists
	Exists(context.Context, *ClassMapExistsRequest) (*ClassMapExistsResponse, error)
	// *
	// Queries a class map given its key.
	//
	// EosSdk reference: eos::class_map_mgr::class_map
	ClassMap(context.Context, *ClassMapRequest) (*ClassMapResponse, error)
	// *
	// Creates or updates a class map.
	//
	// EosSdk reference: eos::class_map_mgr::class_map_is
	ClassMapIs(context.Context, *ClassMapIsRequest) (*ClassMapIsResponse, error)
	// *
	// Creates or updates multiple class maps in a single call.
	//
	// EosSdk reference: eos::class_map_mgr::class_map_is
	BulkClassMapIs(context.Context, *BulkClassMapIsRequest) (*BulkClassMapIsResponse, error)
	// *
	// Deletes a class map.
	//
	// EosSdk reference: eos::class_map_mgr::class_map_del
	ClassMapDel(context.Context, *ClassMapDelRequest) (*ClassMapDelResponse, error)
	// *
	// Deletes multiple class maps in a single call.
	//
	// EosSdk reference: eos::class_map_mgr::class_map_del
	BulkClassMapDel(context.Context, *BulkClassMapDelRequest) (*BulkClassMapDelResponse, error)
	// *
	// Returns a list of the keys of the configured class maps for a
	// specified policy_feature
	//
	// EosSdk reference: eos::class_map_mgr::class_map_iter
	ClassMaps(*ClassMapsRequest, ClassMapMgrService_ClassMapsServer) error
}

// UnimplementedClassMapMgrServiceServer should be embedded to have forward compatible implementations.
type UnimplementedClassMapMgrServiceServer struct {
}

func (UnimplementedClassMapMgrServiceServer) ResyncInit(context.Context, *ClassMapResyncInitRequest) (*ClassMapResyncInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResyncInit not implemented")
}
func (UnimplementedClassMapMgrServiceServer) ResyncComplete(context.Context, *ClassMapResyncCompleteRequest) (*ClassMapResyncCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResyncComplete not implemented")
}
func (UnimplementedClassMapMgrServiceServer) Exists(context.Context, *ClassMapExistsRequest) (*ClassMapExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedClassMapMgrServiceServer) ClassMap(context.Context, *ClassMapRequest) (*ClassMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassMap not implemented")
}
func (UnimplementedClassMapMgrServiceServer) ClassMapIs(context.Context, *ClassMapIsRequest) (*ClassMapIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassMapIs not implemented")
}
func (UnimplementedClassMapMgrServiceServer) BulkClassMapIs(context.Context, *BulkClassMapIsRequest) (*BulkClassMapIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkClassMapIs not implemented")
}
func (UnimplementedClassMapMgrServiceServer) ClassMapDel(context.Context, *ClassMapDelRequest) (*ClassMapDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassMapDel not implemented")
}
func (UnimplementedClassMapMgrServiceServer) BulkClassMapDel(context.Context, *BulkClassMapDelRequest) (*BulkClassMapDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkClassMapDel not implemented")
}
func (UnimplementedClassMapMgrServiceServer) ClassMaps(*ClassMapsRequest, ClassMapMgrService_ClassMapsServer) error {
	return status.Errorf(codes.Unimplemented, "method ClassMaps not implemented")
}

// UnsafeClassMapMgrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassMapMgrServiceServer will
// result in compilation errors.
type UnsafeClassMapMgrServiceServer interface {
	mustEmbedUnimplementedClassMapMgrServiceServer()
}

func RegisterClassMapMgrServiceServer(s grpc.ServiceRegistrar, srv ClassMapMgrServiceServer) {
	s.RegisterService(&ClassMapMgrService_ServiceDesc, srv)
}

func _ClassMapMgrService_ResyncInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassMapResyncInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassMapMgrServiceServer).ResyncInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.ClassMapMgrService/resync_init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassMapMgrServiceServer).ResyncInit(ctx, req.(*ClassMapResyncInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassMapMgrService_ResyncComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassMapResyncCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassMapMgrServiceServer).ResyncComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.ClassMapMgrService/resync_complete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassMapMgrServiceServer).ResyncComplete(ctx, req.(*ClassMapResyncCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassMapMgrService_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassMapExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassMapMgrServiceServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.ClassMapMgrService/exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassMapMgrServiceServer).Exists(ctx, req.(*ClassMapExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassMapMgrService_ClassMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassMapMgrServiceServer).ClassMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.ClassMapMgrService/class_map",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassMapMgrServiceServer).ClassMap(ctx, req.(*ClassMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassMapMgrService_ClassMapIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassMapIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassMapMgrServiceServer).ClassMapIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.ClassMapMgrService/class_map_is",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassMapMgrServiceServer).ClassMapIs(ctx, req.(*ClassMapIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassMapMgrService_BulkClassMapIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkClassMapIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassMapMgrServiceServer).BulkClassMapIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.ClassMapMgrService/bulk_class_map_is",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassMapMgrServiceServer).BulkClassMapIs(ctx, req.(*BulkClassMapIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassMapMgrService_ClassMapDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClassMapDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassMapMgrServiceServer).ClassMapDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.ClassMapMgrService/class_map_del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassMapMgrServiceServer).ClassMapDel(ctx, req.(*ClassMapDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassMapMgrService_BulkClassMapDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkClassMapDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassMapMgrServiceServer).BulkClassMapDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.ClassMapMgrService/bulk_class_map_del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassMapMgrServiceServer).BulkClassMapDel(ctx, req.(*BulkClassMapDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassMapMgrService_ClassMaps_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClassMapsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClassMapMgrServiceServer).ClassMaps(m, &classMapMgrServiceClassMapsServer{stream})
}

type ClassMapMgrService_ClassMapsServer interface {
	Send(*ClassMapsResponse) error
	grpc.ServerStream
}

type classMapMgrServiceClassMapsServer struct {
	grpc.ServerStream
}

func (x *classMapMgrServiceClassMapsServer) Send(m *ClassMapsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ClassMapMgrService_ServiceDesc is the grpc.ServiceDesc for ClassMapMgrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClassMapMgrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eos.remote.ClassMapMgrService",
	HandlerType: (*ClassMapMgrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "resync_init",
			Handler:    _ClassMapMgrService_ResyncInit_Handler,
		},
		{
			MethodName: "resync_complete",
			Handler:    _ClassMapMgrService_ResyncComplete_Handler,
		},
		{
			MethodName: "exists",
			Handler:    _ClassMapMgrService_Exists_Handler,
		},
		{
			MethodName: "class_map",
			Handler:    _ClassMapMgrService_ClassMap_Handler,
		},
		{
			MethodName: "class_map_is",
			Handler:    _ClassMapMgrService_ClassMapIs_Handler,
		},
		{
			MethodName: "bulk_class_map_is",
			Handler:    _ClassMapMgrService_BulkClassMapIs_Handler,
		},
		{
			MethodName: "class_map_del",
			Handler:    _ClassMapMgrService_ClassMapDel_Handler,
		},
		{
			MethodName: "bulk_class_map_del",
			Handler:    _ClassMapMgrService_BulkClassMapDel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "class_maps",
			Handler:       _ClassMapMgrService_ClassMaps_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "class_map.proto",
}
