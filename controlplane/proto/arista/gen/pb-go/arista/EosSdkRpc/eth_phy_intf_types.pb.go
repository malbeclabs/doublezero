// Arista Networks, Inc. Confidential and Proprietary.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: eth_phy_intf_types.proto

package EosSdkRpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EthPhyIntfLinkSpeed int32

const (
	EthPhyIntfLinkSpeed_ETH_PHY_INTF_LINK_SPEED_UNKNOWN    EthPhyIntfLinkSpeed = 0
	EthPhyIntfLinkSpeed_ETH_PHY_INTF_LINK_SPEED_10MBPS     EthPhyIntfLinkSpeed = 1
	EthPhyIntfLinkSpeed_ETH_PHY_INTF_LINK_SPEED_100MBPS    EthPhyIntfLinkSpeed = 2
	EthPhyIntfLinkSpeed_ETH_PHY_INTF_LINK_SPEED_1GBPS      EthPhyIntfLinkSpeed = 3
	EthPhyIntfLinkSpeed_ETH_PHY_INTF_LINK_SPEED_2P5GBPS    EthPhyIntfLinkSpeed = 4
	EthPhyIntfLinkSpeed_ETH_PHY_INTF_LINK_SPEED_5GBPS      EthPhyIntfLinkSpeed = 5
	EthPhyIntfLinkSpeed_ETH_PHY_INTF_LINK_SPEED_10GBPS     EthPhyIntfLinkSpeed = 6
	EthPhyIntfLinkSpeed_ETH_PHY_INTF_LINK_SPEED_25GBPS     EthPhyIntfLinkSpeed = 7
	EthPhyIntfLinkSpeed_ETH_PHY_INTF_LINK_SPEED_40GBPS     EthPhyIntfLinkSpeed = 8
	EthPhyIntfLinkSpeed_ETH_PHY_INTF_LINK_SPEED_50GBPS     EthPhyIntfLinkSpeed = 9
	EthPhyIntfLinkSpeed_ETH_PHY_INTF_LINK_SPEED_100GBPS    EthPhyIntfLinkSpeed = 10
	EthPhyIntfLinkSpeed_ETH_PHY_INTF_LINK_SPEED_200GBPS    EthPhyIntfLinkSpeed = 11
	EthPhyIntfLinkSpeed_ETH_PHY_INTF_LINK_SPEED_400GBPS    EthPhyIntfLinkSpeed = 12
	EthPhyIntfLinkSpeed_ETH_PHY_INTF_LINK_SPEED_800GBPS    EthPhyIntfLinkSpeed = 13
	EthPhyIntfLinkSpeed_ETH_PHY_INTF_LINK_SPEED_UNEXPECTED EthPhyIntfLinkSpeed = 14
)

// Enum value maps for EthPhyIntfLinkSpeed.
var (
	EthPhyIntfLinkSpeed_name = map[int32]string{
		0:  "ETH_PHY_INTF_LINK_SPEED_UNKNOWN",
		1:  "ETH_PHY_INTF_LINK_SPEED_10MBPS",
		2:  "ETH_PHY_INTF_LINK_SPEED_100MBPS",
		3:  "ETH_PHY_INTF_LINK_SPEED_1GBPS",
		4:  "ETH_PHY_INTF_LINK_SPEED_2P5GBPS",
		5:  "ETH_PHY_INTF_LINK_SPEED_5GBPS",
		6:  "ETH_PHY_INTF_LINK_SPEED_10GBPS",
		7:  "ETH_PHY_INTF_LINK_SPEED_25GBPS",
		8:  "ETH_PHY_INTF_LINK_SPEED_40GBPS",
		9:  "ETH_PHY_INTF_LINK_SPEED_50GBPS",
		10: "ETH_PHY_INTF_LINK_SPEED_100GBPS",
		11: "ETH_PHY_INTF_LINK_SPEED_200GBPS",
		12: "ETH_PHY_INTF_LINK_SPEED_400GBPS",
		13: "ETH_PHY_INTF_LINK_SPEED_800GBPS",
		14: "ETH_PHY_INTF_LINK_SPEED_UNEXPECTED",
	}
	EthPhyIntfLinkSpeed_value = map[string]int32{
		"ETH_PHY_INTF_LINK_SPEED_UNKNOWN":    0,
		"ETH_PHY_INTF_LINK_SPEED_10MBPS":     1,
		"ETH_PHY_INTF_LINK_SPEED_100MBPS":    2,
		"ETH_PHY_INTF_LINK_SPEED_1GBPS":      3,
		"ETH_PHY_INTF_LINK_SPEED_2P5GBPS":    4,
		"ETH_PHY_INTF_LINK_SPEED_5GBPS":      5,
		"ETH_PHY_INTF_LINK_SPEED_10GBPS":     6,
		"ETH_PHY_INTF_LINK_SPEED_25GBPS":     7,
		"ETH_PHY_INTF_LINK_SPEED_40GBPS":     8,
		"ETH_PHY_INTF_LINK_SPEED_50GBPS":     9,
		"ETH_PHY_INTF_LINK_SPEED_100GBPS":    10,
		"ETH_PHY_INTF_LINK_SPEED_200GBPS":    11,
		"ETH_PHY_INTF_LINK_SPEED_400GBPS":    12,
		"ETH_PHY_INTF_LINK_SPEED_800GBPS":    13,
		"ETH_PHY_INTF_LINK_SPEED_UNEXPECTED": 14,
	}
)

func (x EthPhyIntfLinkSpeed) Enum() *EthPhyIntfLinkSpeed {
	p := new(EthPhyIntfLinkSpeed)
	*p = x
	return p
}

func (x EthPhyIntfLinkSpeed) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EthPhyIntfLinkSpeed) Descriptor() protoreflect.EnumDescriptor {
	return file_eth_phy_intf_types_proto_enumTypes[0].Descriptor()
}

func (EthPhyIntfLinkSpeed) Type() protoreflect.EnumType {
	return &file_eth_phy_intf_types_proto_enumTypes[0]
}

func (x EthPhyIntfLinkSpeed) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EthPhyIntfLinkSpeed.Descriptor instead.
func (EthPhyIntfLinkSpeed) EnumDescriptor() ([]byte, []int) {
	return file_eth_phy_intf_types_proto_rawDescGZIP(), []int{0}
}

// *
// Ethernet interface counter.
//
// All of these attributes have the same meanings as the corresponding objects in
// the Ethernetlike (RFC3635) and RMON (RFC2819) MIBs.
type EthPhyIntfCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Etherlike-MIB singleCollisionFrames counter.
	SingleCollisionFrames uint64 `protobuf:"varint,1,opt,name=single_collision_frames,json=singleCollisionFrames,proto3" json:"single_collision_frames,omitempty"`
	// Etherlike-MIB multipleCollisionFrames counter.
	MultipleCollisionFrames uint64 `protobuf:"varint,2,opt,name=multiple_collision_frames,json=multipleCollisionFrames,proto3" json:"multiple_collision_frames,omitempty"`
	// Etherlike-MIB fcsErrors counter.
	FcsErrors uint64 `protobuf:"varint,3,opt,name=fcs_errors,json=fcsErrors,proto3" json:"fcs_errors,omitempty"`
	// Etherlike-MIB alignmentErrors counter.
	AlignmentErrors uint64 `protobuf:"varint,4,opt,name=alignment_errors,json=alignmentErrors,proto3" json:"alignment_errors,omitempty"`
	// Etherlike-MIB deferredTransmissions counter.
	DeferredTransmissions uint64 `protobuf:"varint,5,opt,name=deferred_transmissions,json=deferredTransmissions,proto3" json:"deferred_transmissions,omitempty"`
	// Etherlike-MIB lateCollisions counter.
	LateCollisions uint64 `protobuf:"varint,6,opt,name=late_collisions,json=lateCollisions,proto3" json:"late_collisions,omitempty"`
	// Etherlike-MIB excessiveCollisions counter.
	ExcessiveCollisions uint64 `protobuf:"varint,7,opt,name=excessive_collisions,json=excessiveCollisions,proto3" json:"excessive_collisions,omitempty"`
	// Etherlike-MIB internalMacTransmitErrors counter.
	InternalMacTransmitErrors uint64 `protobuf:"varint,8,opt,name=internal_mac_transmit_errors,json=internalMacTransmitErrors,proto3" json:"internal_mac_transmit_errors,omitempty"`
	// Etherlike-MIB carrierSenseErrors counter.
	CarrierSenseErrors uint64 `protobuf:"varint,9,opt,name=carrier_sense_errors,json=carrierSenseErrors,proto3" json:"carrier_sense_errors,omitempty"`
	// Etherlike-MIB internalMacReceiveErrors counter.
	InternalMacReceiveErrors uint64 `protobuf:"varint,10,opt,name=internal_mac_receive_errors,json=internalMacReceiveErrors,proto3" json:"internal_mac_receive_errors,omitempty"`
	// Etherlike-MIB frameTooShorts counter.
	FrameTooShorts uint64 `protobuf:"varint,11,opt,name=frame_too_shorts,json=frameTooShorts,proto3" json:"frame_too_shorts,omitempty"`
	// Etherlike-MIB frameTooLongs counter.
	FrameTooLongs uint64 `protobuf:"varint,12,opt,name=frame_too_longs,json=frameTooLongs,proto3" json:"frame_too_longs,omitempty"`
	// Etherlike-MIB sqeTestErrors counter.
	SqeTestErrors uint64 `protobuf:"varint,13,opt,name=sqe_test_errors,json=sqeTestErrors,proto3" json:"sqe_test_errors,omitempty"`
	// Etherlike-MIB symbolErrors counter.
	SymbolErrors uint64 `protobuf:"varint,14,opt,name=symbol_errors,json=symbolErrors,proto3" json:"symbol_errors,omitempty"`
	// Etherlike-MIB inUnknownOpcodes counter.
	InUnknownOpcodes uint64 `protobuf:"varint,15,opt,name=in_unknown_opcodes,json=inUnknownOpcodes,proto3" json:"in_unknown_opcodes,omitempty"`
	// Etherlike-MIB outPauseFrames counter.
	OutPauseFrames uint64 `protobuf:"varint,16,opt,name=out_pause_frames,json=outPauseFrames,proto3" json:"out_pause_frames,omitempty"`
	// Etherlike-MIB inPauseFrames counter.
	InPauseFrames uint64 `protobuf:"varint,17,opt,name=in_pause_frames,json=inPauseFrames,proto3" json:"in_pause_frames,omitempty"`
	// RMON-MIB fragments counter.
	Fragments uint64 `protobuf:"varint,18,opt,name=fragments,proto3" json:"fragments,omitempty"`
	// RMON-MIB jabbers counter.
	Jabbers uint64 `protobuf:"varint,19,opt,name=jabbers,proto3" json:"jabbers,omitempty"`
}

func (x *EthPhyIntfCounters) Reset() {
	*x = EthPhyIntfCounters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_phy_intf_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthPhyIntfCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthPhyIntfCounters) ProtoMessage() {}

func (x *EthPhyIntfCounters) ProtoReflect() protoreflect.Message {
	mi := &file_eth_phy_intf_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthPhyIntfCounters.ProtoReflect.Descriptor instead.
func (*EthPhyIntfCounters) Descriptor() ([]byte, []int) {
	return file_eth_phy_intf_types_proto_rawDescGZIP(), []int{0}
}

func (x *EthPhyIntfCounters) GetSingleCollisionFrames() uint64 {
	if x != nil {
		return x.SingleCollisionFrames
	}
	return 0
}

func (x *EthPhyIntfCounters) GetMultipleCollisionFrames() uint64 {
	if x != nil {
		return x.MultipleCollisionFrames
	}
	return 0
}

func (x *EthPhyIntfCounters) GetFcsErrors() uint64 {
	if x != nil {
		return x.FcsErrors
	}
	return 0
}

func (x *EthPhyIntfCounters) GetAlignmentErrors() uint64 {
	if x != nil {
		return x.AlignmentErrors
	}
	return 0
}

func (x *EthPhyIntfCounters) GetDeferredTransmissions() uint64 {
	if x != nil {
		return x.DeferredTransmissions
	}
	return 0
}

func (x *EthPhyIntfCounters) GetLateCollisions() uint64 {
	if x != nil {
		return x.LateCollisions
	}
	return 0
}

func (x *EthPhyIntfCounters) GetExcessiveCollisions() uint64 {
	if x != nil {
		return x.ExcessiveCollisions
	}
	return 0
}

func (x *EthPhyIntfCounters) GetInternalMacTransmitErrors() uint64 {
	if x != nil {
		return x.InternalMacTransmitErrors
	}
	return 0
}

func (x *EthPhyIntfCounters) GetCarrierSenseErrors() uint64 {
	if x != nil {
		return x.CarrierSenseErrors
	}
	return 0
}

func (x *EthPhyIntfCounters) GetInternalMacReceiveErrors() uint64 {
	if x != nil {
		return x.InternalMacReceiveErrors
	}
	return 0
}

func (x *EthPhyIntfCounters) GetFrameTooShorts() uint64 {
	if x != nil {
		return x.FrameTooShorts
	}
	return 0
}

func (x *EthPhyIntfCounters) GetFrameTooLongs() uint64 {
	if x != nil {
		return x.FrameTooLongs
	}
	return 0
}

func (x *EthPhyIntfCounters) GetSqeTestErrors() uint64 {
	if x != nil {
		return x.SqeTestErrors
	}
	return 0
}

func (x *EthPhyIntfCounters) GetSymbolErrors() uint64 {
	if x != nil {
		return x.SymbolErrors
	}
	return 0
}

func (x *EthPhyIntfCounters) GetInUnknownOpcodes() uint64 {
	if x != nil {
		return x.InUnknownOpcodes
	}
	return 0
}

func (x *EthPhyIntfCounters) GetOutPauseFrames() uint64 {
	if x != nil {
		return x.OutPauseFrames
	}
	return 0
}

func (x *EthPhyIntfCounters) GetInPauseFrames() uint64 {
	if x != nil {
		return x.InPauseFrames
	}
	return 0
}

func (x *EthPhyIntfCounters) GetFragments() uint64 {
	if x != nil {
		return x.Fragments
	}
	return 0
}

func (x *EthPhyIntfCounters) GetJabbers() uint64 {
	if x != nil {
		return x.Jabbers
	}
	return 0
}

// *
// Ethernet interface counters.
//
// All of these attributes have the same meanings as the corresponding objects in
// the Ethernetlike (RFC3635) and RMON (RFC2819) MIBs.
type EthPhyIntfBinCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input 64 octet frame counter.
	In_64OctetFrames uint64 `protobuf:"varint,1,opt,name=in_64_octet_frames,json=in64OctetFrames,proto3" json:"in_64_octet_frames,omitempty"`
	// Input 65 to 127 octet frame counter.
	In_65To_127OctetFrames uint64 `protobuf:"varint,2,opt,name=in_65_to_127_octet_frames,json=in65To127OctetFrames,proto3" json:"in_65_to_127_octet_frames,omitempty"`
	// Input 128 to 255 octet frame counter.
	In_128To_255OctetFrames uint64 `protobuf:"varint,3,opt,name=in_128_to_255_octet_frames,json=in128To255OctetFrames,proto3" json:"in_128_to_255_octet_frames,omitempty"`
	// Input 256 to 511 octet frame counter.
	In_256To_511OctetFrames uint64 `protobuf:"varint,4,opt,name=in_256_to_511_octet_frames,json=in256To511OctetFrames,proto3" json:"in_256_to_511_octet_frames,omitempty"`
	// Input 512 to 1023 octet frame counter.
	In_512To_1023OctetFrames uint64 `protobuf:"varint,5,opt,name=in_512_to_1023_octet_frames,json=in512To1023OctetFrames,proto3" json:"in_512_to_1023_octet_frames,omitempty"`
	// Input 1024 to 1522 octet frame counter.
	In_1024To_1522OctetFrames uint64 `protobuf:"varint,6,opt,name=in_1024_to_1522_octet_frames,json=in1024To1522OctetFrames,proto3" json:"in_1024_to_1522_octet_frames,omitempty"`
	// Input 1523 to max octet frame counter.
	In_1523ToMaxOctetFrames uint64 `protobuf:"varint,7,opt,name=in_1523_to_max_octet_frames,json=in1523ToMaxOctetFrames,proto3" json:"in_1523_to_max_octet_frames,omitempty"`
	// Output 64 octet frame counter.
	Out_64OctetFrames uint64 `protobuf:"varint,8,opt,name=out_64_octet_frames,json=out64OctetFrames,proto3" json:"out_64_octet_frames,omitempty"`
	// Output 65 to 127 octet frame counter.
	Out_65To_127OctetFrames uint64 `protobuf:"varint,9,opt,name=out_65_to_127_octet_frames,json=out65To127OctetFrames,proto3" json:"out_65_to_127_octet_frames,omitempty"`
	// Output 128 to 255 octet frame counter.
	Out_128To_255OctetFrames uint64 `protobuf:"varint,10,opt,name=out_128_to_255_octet_frames,json=out128To255OctetFrames,proto3" json:"out_128_to_255_octet_frames,omitempty"`
	// Output 256 to 511 octet frame counter.
	Out_256To_511OctetFrames uint64 `protobuf:"varint,11,opt,name=out_256_to_511_octet_frames,json=out256To511OctetFrames,proto3" json:"out_256_to_511_octet_frames,omitempty"`
	// Output 512 to 1023 octet frame counter.
	Out_512To_1023OctetFrames uint64 `protobuf:"varint,12,opt,name=out_512_to_1023_octet_frames,json=out512To1023OctetFrames,proto3" json:"out_512_to_1023_octet_frames,omitempty"`
	// Output 1024 to 1522 octet frame counter.
	Out_1024To_1522OctetFrames uint64 `protobuf:"varint,13,opt,name=out_1024_to_1522_octet_frames,json=out1024To1522OctetFrames,proto3" json:"out_1024_to_1522_octet_frames,omitempty"`
	// Output 1523 to max octet frame counter.
	Out_1523ToMaxOctetFrames uint64 `protobuf:"varint,14,opt,name=out_1523_to_max_octet_frames,json=out1523ToMaxOctetFrames,proto3" json:"out_1523_to_max_octet_frames,omitempty"`
}

func (x *EthPhyIntfBinCounters) Reset() {
	*x = EthPhyIntfBinCounters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_phy_intf_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthPhyIntfBinCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthPhyIntfBinCounters) ProtoMessage() {}

func (x *EthPhyIntfBinCounters) ProtoReflect() protoreflect.Message {
	mi := &file_eth_phy_intf_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthPhyIntfBinCounters.ProtoReflect.Descriptor instead.
func (*EthPhyIntfBinCounters) Descriptor() ([]byte, []int) {
	return file_eth_phy_intf_types_proto_rawDescGZIP(), []int{1}
}

func (x *EthPhyIntfBinCounters) GetIn_64OctetFrames() uint64 {
	if x != nil {
		return x.In_64OctetFrames
	}
	return 0
}

func (x *EthPhyIntfBinCounters) GetIn_65To_127OctetFrames() uint64 {
	if x != nil {
		return x.In_65To_127OctetFrames
	}
	return 0
}

func (x *EthPhyIntfBinCounters) GetIn_128To_255OctetFrames() uint64 {
	if x != nil {
		return x.In_128To_255OctetFrames
	}
	return 0
}

func (x *EthPhyIntfBinCounters) GetIn_256To_511OctetFrames() uint64 {
	if x != nil {
		return x.In_256To_511OctetFrames
	}
	return 0
}

func (x *EthPhyIntfBinCounters) GetIn_512To_1023OctetFrames() uint64 {
	if x != nil {
		return x.In_512To_1023OctetFrames
	}
	return 0
}

func (x *EthPhyIntfBinCounters) GetIn_1024To_1522OctetFrames() uint64 {
	if x != nil {
		return x.In_1024To_1522OctetFrames
	}
	return 0
}

func (x *EthPhyIntfBinCounters) GetIn_1523ToMaxOctetFrames() uint64 {
	if x != nil {
		return x.In_1523ToMaxOctetFrames
	}
	return 0
}

func (x *EthPhyIntfBinCounters) GetOut_64OctetFrames() uint64 {
	if x != nil {
		return x.Out_64OctetFrames
	}
	return 0
}

func (x *EthPhyIntfBinCounters) GetOut_65To_127OctetFrames() uint64 {
	if x != nil {
		return x.Out_65To_127OctetFrames
	}
	return 0
}

func (x *EthPhyIntfBinCounters) GetOut_128To_255OctetFrames() uint64 {
	if x != nil {
		return x.Out_128To_255OctetFrames
	}
	return 0
}

func (x *EthPhyIntfBinCounters) GetOut_256To_511OctetFrames() uint64 {
	if x != nil {
		return x.Out_256To_511OctetFrames
	}
	return 0
}

func (x *EthPhyIntfBinCounters) GetOut_512To_1023OctetFrames() uint64 {
	if x != nil {
		return x.Out_512To_1023OctetFrames
	}
	return 0
}

func (x *EthPhyIntfBinCounters) GetOut_1024To_1522OctetFrames() uint64 {
	if x != nil {
		return x.Out_1024To_1522OctetFrames
	}
	return 0
}

func (x *EthPhyIntfBinCounters) GetOut_1523ToMaxOctetFrames() uint64 {
	if x != nil {
		return x.Out_1523ToMaxOctetFrames
	}
	return 0
}

var File_eth_phy_intf_types_proto protoreflect.FileDescriptor

var file_eth_phy_intf_types_proto_rawDesc = []byte{
	0x0a, 0x18, 0x65, 0x74, 0x68, 0x5f, 0x70, 0x68, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x22, 0xee, 0x06, 0x0a, 0x12, 0x45, 0x74, 0x68, 0x50, 0x68,
	0x79, 0x49, 0x6e, 0x74, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x36, 0x0a,
	0x17, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15,
	0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x63, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x63, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x6c, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x16, 0x64,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x64, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6c, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x65,
	0x78, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x65, 0x78, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f,
	0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x19, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x61,
	0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x30, 0x0a, 0x14, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63,
	0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x61,
	0x63, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x4d, 0x61, 0x63, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6f, 0x5f, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x54, 0x6f, 0x6f, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x6f, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x6f, 0x4c, 0x6f, 0x6e,
	0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x71, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x71, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x6f, 0x70,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x69, 0x6e, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x4f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x5f, 0x70, 0x61,
	0x75, 0x73, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x69, 0x6e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6a, 0x61, 0x62, 0x62, 0x65, 0x72, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x6a, 0x61, 0x62, 0x62, 0x65, 0x72, 0x73, 0x22, 0xcf, 0x06, 0x0a, 0x15, 0x45, 0x74, 0x68, 0x50,
	0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x42, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x2b, 0x0a, 0x12, 0x69, 0x6e, 0x5f, 0x36, 0x34, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x69,
	0x6e, 0x36, 0x34, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x37,
	0x0a, 0x19, 0x69, 0x6e, 0x5f, 0x36, 0x35, 0x5f, 0x74, 0x6f, 0x5f, 0x31, 0x32, 0x37, 0x5f, 0x6f,
	0x63, 0x74, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x14, 0x69, 0x6e, 0x36, 0x35, 0x54, 0x6f, 0x31, 0x32, 0x37, 0x4f, 0x63, 0x74, 0x65,
	0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x1a, 0x69, 0x6e, 0x5f, 0x31, 0x32,
	0x38, 0x5f, 0x74, 0x6f, 0x5f, 0x32, 0x35, 0x35, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x69, 0x6e, 0x31,
	0x32, 0x38, 0x54, 0x6f, 0x32, 0x35, 0x35, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x39, 0x0a, 0x1a, 0x69, 0x6e, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x74, 0x6f, 0x5f,
	0x35, 0x31, 0x31, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x69, 0x6e, 0x32, 0x35, 0x36, 0x54, 0x6f, 0x35,
	0x31, 0x31, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3b, 0x0a,
	0x1b, 0x69, 0x6e, 0x5f, 0x35, 0x31, 0x32, 0x5f, 0x74, 0x6f, 0x5f, 0x31, 0x30, 0x32, 0x33, 0x5f,
	0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x16, 0x69, 0x6e, 0x35, 0x31, 0x32, 0x54, 0x6f, 0x31, 0x30, 0x32, 0x33, 0x4f,
	0x63, 0x74, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x1c, 0x69, 0x6e,
	0x5f, 0x31, 0x30, 0x32, 0x34, 0x5f, 0x74, 0x6f, 0x5f, 0x31, 0x35, 0x32, 0x32, 0x5f, 0x6f, 0x63,
	0x74, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x17, 0x69, 0x6e, 0x31, 0x30, 0x32, 0x34, 0x54, 0x6f, 0x31, 0x35, 0x32, 0x32, 0x4f, 0x63,
	0x74, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1b, 0x69, 0x6e, 0x5f,
	0x31, 0x35, 0x32, 0x33, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x63, 0x74, 0x65,
	0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16,
	0x69, 0x6e, 0x31, 0x35, 0x32, 0x33, 0x54, 0x6f, 0x4d, 0x61, 0x78, 0x4f, 0x63, 0x74, 0x65, 0x74,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x6f, 0x75, 0x74, 0x5f, 0x36, 0x34,
	0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x36, 0x34, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x1a, 0x6f, 0x75, 0x74, 0x5f, 0x36, 0x35, 0x5f,
	0x74, 0x6f, 0x5f, 0x31, 0x32, 0x37, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6f, 0x75, 0x74, 0x36, 0x35,
	0x54, 0x6f, 0x31, 0x32, 0x37, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x3b, 0x0a, 0x1b, 0x6f, 0x75, 0x74, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x74, 0x6f, 0x5f, 0x32,
	0x35, 0x35, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6f, 0x75, 0x74, 0x31, 0x32, 0x38, 0x54, 0x6f, 0x32,
	0x35, 0x35, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3b, 0x0a,
	0x1b, 0x6f, 0x75, 0x74, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x74, 0x6f, 0x5f, 0x35, 0x31, 0x31, 0x5f,
	0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x16, 0x6f, 0x75, 0x74, 0x32, 0x35, 0x36, 0x54, 0x6f, 0x35, 0x31, 0x31, 0x4f,
	0x63, 0x74, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x1c, 0x6f, 0x75,
	0x74, 0x5f, 0x35, 0x31, 0x32, 0x5f, 0x74, 0x6f, 0x5f, 0x31, 0x30, 0x32, 0x33, 0x5f, 0x6f, 0x63,
	0x74, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x17, 0x6f, 0x75, 0x74, 0x35, 0x31, 0x32, 0x54, 0x6f, 0x31, 0x30, 0x32, 0x33, 0x4f, 0x63,
	0x74, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x1d, 0x6f, 0x75, 0x74,
	0x5f, 0x31, 0x30, 0x32, 0x34, 0x5f, 0x74, 0x6f, 0x5f, 0x31, 0x35, 0x32, 0x32, 0x5f, 0x6f, 0x63,
	0x74, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x18, 0x6f, 0x75, 0x74, 0x31, 0x30, 0x32, 0x34, 0x54, 0x6f, 0x31, 0x35, 0x32, 0x32, 0x4f,
	0x63, 0x74, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x1c, 0x6f, 0x75,
	0x74, 0x5f, 0x31, 0x35, 0x32, 0x33, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x63,
	0x74, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x17, 0x6f, 0x75, 0x74, 0x31, 0x35, 0x32, 0x33, 0x54, 0x6f, 0x4d, 0x61, 0x78, 0x4f, 0x63,
	0x74, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x2a, 0xba, 0x04, 0x0a, 0x13, 0x45, 0x74,
	0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x54, 0x48, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x49, 0x4e, 0x54,
	0x46, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x54, 0x48, 0x5f, 0x50, 0x48,
	0x59, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x50, 0x45, 0x45,
	0x44, 0x5f, 0x31, 0x30, 0x4d, 0x42, 0x50, 0x53, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x54,
	0x48, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x30, 0x4d, 0x42, 0x50, 0x53, 0x10, 0x02, 0x12,
	0x21, 0x0a, 0x1d, 0x45, 0x54, 0x48, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f,
	0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x47, 0x42, 0x50, 0x53,
	0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x54, 0x48, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x49, 0x4e,
	0x54, 0x46, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x32, 0x50,
	0x35, 0x47, 0x42, 0x50, 0x53, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x54, 0x48, 0x5f, 0x50,
	0x48, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x50, 0x45,
	0x45, 0x44, 0x5f, 0x35, 0x47, 0x42, 0x50, 0x53, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x54,
	0x48, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x47, 0x42, 0x50, 0x53, 0x10, 0x06, 0x12, 0x22,
	0x0a, 0x1e, 0x45, 0x54, 0x48, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x32, 0x35, 0x47, 0x42, 0x50, 0x53,
	0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x54, 0x48, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x49, 0x4e,
	0x54, 0x46, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x34, 0x30,
	0x47, 0x42, 0x50, 0x53, 0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x54, 0x48, 0x5f, 0x50, 0x48,
	0x59, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x50, 0x45, 0x45,
	0x44, 0x5f, 0x35, 0x30, 0x47, 0x42, 0x50, 0x53, 0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x54,
	0x48, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x42, 0x50, 0x53, 0x10, 0x0a, 0x12,
	0x23, 0x0a, 0x1f, 0x45, 0x54, 0x48, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f,
	0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x32, 0x30, 0x30, 0x47, 0x42,
	0x50, 0x53, 0x10, 0x0b, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x54, 0x48, 0x5f, 0x50, 0x48, 0x59, 0x5f,
	0x49, 0x4e, 0x54, 0x46, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f,
	0x34, 0x30, 0x30, 0x47, 0x42, 0x50, 0x53, 0x10, 0x0c, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x54, 0x48,
	0x5f, 0x50, 0x48, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53,
	0x50, 0x45, 0x45, 0x44, 0x5f, 0x38, 0x30, 0x30, 0x47, 0x42, 0x50, 0x53, 0x10, 0x0d, 0x12, 0x26,
	0x0a, 0x22, 0x45, 0x54, 0x48, 0x5f, 0x50, 0x48, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x0e, 0x42, 0x12, 0x5a, 0x10, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2f, 0x45, 0x6f, 0x73, 0x53, 0x64, 0x6b, 0x52, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_eth_phy_intf_types_proto_rawDescOnce sync.Once
	file_eth_phy_intf_types_proto_rawDescData = file_eth_phy_intf_types_proto_rawDesc
)

func file_eth_phy_intf_types_proto_rawDescGZIP() []byte {
	file_eth_phy_intf_types_proto_rawDescOnce.Do(func() {
		file_eth_phy_intf_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_eth_phy_intf_types_proto_rawDescData)
	})
	return file_eth_phy_intf_types_proto_rawDescData
}

var file_eth_phy_intf_types_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_eth_phy_intf_types_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_eth_phy_intf_types_proto_goTypes = []interface{}{
	(EthPhyIntfLinkSpeed)(0),      // 0: eos.remote.EthPhyIntfLinkSpeed
	(*EthPhyIntfCounters)(nil),    // 1: eos.remote.EthPhyIntfCounters
	(*EthPhyIntfBinCounters)(nil), // 2: eos.remote.EthPhyIntfBinCounters
}
var file_eth_phy_intf_types_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_eth_phy_intf_types_proto_init() }
func file_eth_phy_intf_types_proto_init() {
	if File_eth_phy_intf_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_eth_phy_intf_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthPhyIntfCounters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_phy_intf_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthPhyIntfBinCounters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eth_phy_intf_types_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eth_phy_intf_types_proto_goTypes,
		DependencyIndexes: file_eth_phy_intf_types_proto_depIdxs,
		EnumInfos:         file_eth_phy_intf_types_proto_enumTypes,
		MessageInfos:      file_eth_phy_intf_types_proto_msgTypes,
	}.Build()
	File_eth_phy_intf_types_proto = out.File
	file_eth_phy_intf_types_proto_rawDesc = nil
	file_eth_phy_intf_types_proto_goTypes = nil
	file_eth_phy_intf_types_proto_depIdxs = nil
}
