// Copyright (c) 2021 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: nexthop_group_types.proto

package EosSdkRpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NexthopGroupEncapTypes int32

const (
	NexthopGroupEncapTypes_NEXTHOP_GROUP_ENCAP_TYPE_NULL     NexthopGroupEncapTypes = 0
	NexthopGroupEncapTypes_NEXTHOP_GROUP_ENCAP_IP_IN_IP      NexthopGroupEncapTypes = 1
	NexthopGroupEncapTypes_NEXTHOP_GROUP_ENCAP_GRE           NexthopGroupEncapTypes = 2
	NexthopGroupEncapTypes_NEXTHOP_GROUP_ENCAP_MPLS          NexthopGroupEncapTypes = 3
	NexthopGroupEncapTypes_NEXTHOP_GROUP_ENCAP_MPLS_OVER_GRE NexthopGroupEncapTypes = 4
	NexthopGroupEncapTypes_NEXTHOP_GROUP_ENCAP_IP            NexthopGroupEncapTypes = 5
)

// Enum value maps for NexthopGroupEncapTypes.
var (
	NexthopGroupEncapTypes_name = map[int32]string{
		0: "NEXTHOP_GROUP_ENCAP_TYPE_NULL",
		1: "NEXTHOP_GROUP_ENCAP_IP_IN_IP",
		2: "NEXTHOP_GROUP_ENCAP_GRE",
		3: "NEXTHOP_GROUP_ENCAP_MPLS",
		4: "NEXTHOP_GROUP_ENCAP_MPLS_OVER_GRE",
		5: "NEXTHOP_GROUP_ENCAP_IP",
	}
	NexthopGroupEncapTypes_value = map[string]int32{
		"NEXTHOP_GROUP_ENCAP_TYPE_NULL":     0,
		"NEXTHOP_GROUP_ENCAP_IP_IN_IP":      1,
		"NEXTHOP_GROUP_ENCAP_GRE":           2,
		"NEXTHOP_GROUP_ENCAP_MPLS":          3,
		"NEXTHOP_GROUP_ENCAP_MPLS_OVER_GRE": 4,
		"NEXTHOP_GROUP_ENCAP_IP":            5,
	}
)

func (x NexthopGroupEncapTypes) Enum() *NexthopGroupEncapTypes {
	p := new(NexthopGroupEncapTypes)
	*p = x
	return p
}

func (x NexthopGroupEncapTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NexthopGroupEncapTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_nexthop_group_types_proto_enumTypes[0].Descriptor()
}

func (NexthopGroupEncapTypes) Type() protoreflect.EnumType {
	return &file_nexthop_group_types_proto_enumTypes[0]
}

func (x NexthopGroupEncapTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NexthopGroupEncapTypes.Descriptor instead.
func (NexthopGroupEncapTypes) EnumDescriptor() ([]byte, []int) {
	return file_nexthop_group_types_proto_rawDescGZIP(), []int{0}
}

type NexthopGroupGreKeyTypes int32

const (
	NexthopGroupGreKeyTypes_NEXTHOP_GROUP_GRE_KEY_NULL         NexthopGroupGreKeyTypes = 0
	NexthopGroupGreKeyTypes_NEXTHOP_GROUP_GRE_KEY_INGRESS_INTF NexthopGroupGreKeyTypes = 1
)

// Enum value maps for NexthopGroupGreKeyTypes.
var (
	NexthopGroupGreKeyTypes_name = map[int32]string{
		0: "NEXTHOP_GROUP_GRE_KEY_NULL",
		1: "NEXTHOP_GROUP_GRE_KEY_INGRESS_INTF",
	}
	NexthopGroupGreKeyTypes_value = map[string]int32{
		"NEXTHOP_GROUP_GRE_KEY_NULL":         0,
		"NEXTHOP_GROUP_GRE_KEY_INGRESS_INTF": 1,
	}
)

func (x NexthopGroupGreKeyTypes) Enum() *NexthopGroupGreKeyTypes {
	p := new(NexthopGroupGreKeyTypes)
	*p = x
	return p
}

func (x NexthopGroupGreKeyTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NexthopGroupGreKeyTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_nexthop_group_types_proto_enumTypes[1].Descriptor()
}

func (NexthopGroupGreKeyTypes) Type() protoreflect.EnumType {
	return &file_nexthop_group_types_proto_enumTypes[1]
}

func (x NexthopGroupGreKeyTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NexthopGroupGreKeyTypes.Descriptor instead.
func (NexthopGroupGreKeyTypes) EnumDescriptor() ([]byte, []int) {
	return file_nexthop_group_types_proto_rawDescGZIP(), []int{1}
}

type NexthopGroupCounterState int32

const (
	// Nexthop group entry counters are not enabled for this group.
	NexthopGroupCounterState_NEXTHOP_GROUP_COUNTER_INACTIVE NexthopGroupCounterState = 0
	// At least one nexthop group entry counter for this group has failed to be
	// programmed.
	//
	// Confirm that the expected configuration fits within the hardware limits of the
	// system and reconfigure all nexthop groups.
	NexthopGroupCounterState_NEXTHOP_GROUP_COUNTER_PROGRAMMING_FAILED NexthopGroupCounterState = 1
	// All nexthop group entry counters for this group have been successfully
	// programmed.
	NexthopGroupCounterState_NEXTHOP_GROUP_COUNTER_PROGRAMMING_COMPLETE NexthopGroupCounterState = 2
)

// Enum value maps for NexthopGroupCounterState.
var (
	NexthopGroupCounterState_name = map[int32]string{
		0: "NEXTHOP_GROUP_COUNTER_INACTIVE",
		1: "NEXTHOP_GROUP_COUNTER_PROGRAMMING_FAILED",
		2: "NEXTHOP_GROUP_COUNTER_PROGRAMMING_COMPLETE",
	}
	NexthopGroupCounterState_value = map[string]int32{
		"NEXTHOP_GROUP_COUNTER_INACTIVE":             0,
		"NEXTHOP_GROUP_COUNTER_PROGRAMMING_FAILED":   1,
		"NEXTHOP_GROUP_COUNTER_PROGRAMMING_COMPLETE": 2,
	}
)

func (x NexthopGroupCounterState) Enum() *NexthopGroupCounterState {
	p := new(NexthopGroupCounterState)
	*p = x
	return p
}

func (x NexthopGroupCounterState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NexthopGroupCounterState) Descriptor() protoreflect.EnumDescriptor {
	return file_nexthop_group_types_proto_enumTypes[2].Descriptor()
}

func (NexthopGroupCounterState) Type() protoreflect.EnumType {
	return &file_nexthop_group_types_proto_enumTypes[2]
}

func (x NexthopGroupCounterState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NexthopGroupCounterState.Descriptor instead.
func (NexthopGroupCounterState) EnumDescriptor() ([]byte, []int) {
	return file_nexthop_group_types_proto_rawDescGZIP(), []int{2}
}

type NexthopGroupProgrammedHwState int32

const (
	NexthopGroupProgrammedHwState_NEXTHOP_GROUP_HW_DROP                 NexthopGroupProgrammedHwState = 0
	NexthopGroupProgrammedHwState_NEXTHOP_GROUP_HW_PARTIALLY_PROGRAMMED NexthopGroupProgrammedHwState = 1
	NexthopGroupProgrammedHwState_NEXTHOP_GROUP_HW_ALL_PROGRAMMED       NexthopGroupProgrammedHwState = 2
)

// Enum value maps for NexthopGroupProgrammedHwState.
var (
	NexthopGroupProgrammedHwState_name = map[int32]string{
		0: "NEXTHOP_GROUP_HW_DROP",
		1: "NEXTHOP_GROUP_HW_PARTIALLY_PROGRAMMED",
		2: "NEXTHOP_GROUP_HW_ALL_PROGRAMMED",
	}
	NexthopGroupProgrammedHwState_value = map[string]int32{
		"NEXTHOP_GROUP_HW_DROP":                 0,
		"NEXTHOP_GROUP_HW_PARTIALLY_PROGRAMMED": 1,
		"NEXTHOP_GROUP_HW_ALL_PROGRAMMED":       2,
	}
)

func (x NexthopGroupProgrammedHwState) Enum() *NexthopGroupProgrammedHwState {
	p := new(NexthopGroupProgrammedHwState)
	*p = x
	return p
}

func (x NexthopGroupProgrammedHwState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NexthopGroupProgrammedHwState) Descriptor() protoreflect.EnumDescriptor {
	return file_nexthop_group_types_proto_enumTypes[3].Descriptor()
}

func (NexthopGroupProgrammedHwState) Type() protoreflect.EnumType {
	return &file_nexthop_group_types_proto_enumTypes[3]
}

func (x NexthopGroupProgrammedHwState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NexthopGroupProgrammedHwState.Descriptor instead.
func (NexthopGroupProgrammedHwState) EnumDescriptor() ([]byte, []int) {
	return file_nexthop_group_types_proto_rawDescGZIP(), []int{3}
}

type NexthopGroupEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MplsAction        *NexthopGroupMplsAction `protobuf:"bytes,1,opt,name=mpls_action,json=mplsAction,proto3" json:"mpls_action,omitempty"`
	NexthopIp         []byte                  `protobuf:"bytes,2,opt,name=nexthop_ip,json=nexthopIp,proto3" json:"nexthop_ip,omitempty"`
	IntfId            *IntfId                 `protobuf:"bytes,3,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
	ChildNexthopGroup string                  `protobuf:"bytes,4,opt,name=child_nexthop_group,json=childNexthopGroup,proto3" json:"child_nexthop_group,omitempty"`
}

func (x *NexthopGroupEntry) Reset() {
	*x = NexthopGroupEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NexthopGroupEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NexthopGroupEntry) ProtoMessage() {}

func (x *NexthopGroupEntry) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NexthopGroupEntry.ProtoReflect.Descriptor instead.
func (*NexthopGroupEntry) Descriptor() ([]byte, []int) {
	return file_nexthop_group_types_proto_rawDescGZIP(), []int{0}
}

func (x *NexthopGroupEntry) GetMplsAction() *NexthopGroupMplsAction {
	if x != nil {
		return x.MplsAction
	}
	return nil
}

func (x *NexthopGroupEntry) GetNexthopIp() []byte {
	if x != nil {
		return x.NexthopIp
	}
	return nil
}

func (x *NexthopGroupEntry) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

func (x *NexthopGroupEntry) GetChildNexthopGroup() string {
	if x != nil {
		return x.ChildNexthopGroup
	}
	return ""
}

type NexthopGroupMplsAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action     MplsActions `protobuf:"varint,1,opt,name=action,proto3,enum=eos.remote.MplsActions" json:"action,omitempty"`
	MplsLabels []uint32    `protobuf:"varint,2,rep,packed,name=mpls_labels,json=mplsLabels,proto3" json:"mpls_labels,omitempty"`
}

func (x *NexthopGroupMplsAction) Reset() {
	*x = NexthopGroupMplsAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NexthopGroupMplsAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NexthopGroupMplsAction) ProtoMessage() {}

func (x *NexthopGroupMplsAction) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NexthopGroupMplsAction.ProtoReflect.Descriptor instead.
func (*NexthopGroupMplsAction) Descriptor() ([]byte, []int) {
	return file_nexthop_group_types_proto_rawDescGZIP(), []int{1}
}

func (x *NexthopGroupMplsAction) GetAction() MplsActions {
	if x != nil {
		return x.Action
	}
	return MplsActions_MPLS_ACTION_NULL
}

func (x *NexthopGroupMplsAction) GetMplsLabels() []uint32 {
	if x != nil {
		return x.MplsLabels
	}
	return nil
}

type NexthopGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type       NexthopGroupEncapTypes  `protobuf:"varint,2,opt,name=type,proto3,enum=eos.remote.NexthopGroupEncapTypes" json:"type,omitempty"`
	GreKeyType NexthopGroupGreKeyTypes `protobuf:"varint,3,opt,name=gre_key_type,json=greKeyType,proto3,enum=eos.remote.NexthopGroupGreKeyTypes" json:"gre_key_type,omitempty"`
	// Types that are assignable to TtlPresent:
	//
	//	*NexthopGroup_Ttl
	TtlPresent   isNexthopGroup_TtlPresent `protobuf_oneof:"ttl_present"`
	SourceIpAddr []byte                    `protobuf:"bytes,5,opt,name=source_ip_addr,json=sourceIpAddr,proto3" json:"source_ip_addr,omitempty"`
	SourceIntf   *IntfId                   `protobuf:"bytes,6,opt,name=source_intf,json=sourceIntf,proto3" json:"source_intf,omitempty"`
	Autosize     bool                      `protobuf:"varint,7,opt,name=autosize,proto3" json:"autosize,omitempty"`
	// The numeric key corresponds to the nexthop index position for the entry.
	Nexthops                map[uint32]*NexthopGroupEntry `protobuf:"bytes,8,rep,name=nexthops,proto3" json:"nexthops,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DestinationIps          map[uint32][]byte             `protobuf:"bytes,9,rep,name=destination_ips,json=destinationIps,proto3" json:"destination_ips,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	CountersUnshared        bool                          `protobuf:"varint,10,opt,name=counters_unshared,json=countersUnshared,proto3" json:"counters_unshared,omitempty"`
	HierarchicalFecsEnabled bool                          `protobuf:"varint,11,opt,name=hierarchical_fecs_enabled,json=hierarchicalFecsEnabled,proto3" json:"hierarchical_fecs_enabled,omitempty"`
	CountersPersistent      bool                          `protobuf:"varint,12,opt,name=counters_persistent,json=countersPersistent,proto3" json:"counters_persistent,omitempty"`
	// NOTE: this is actually a 16-bit value.
	VersionId uint32 `protobuf:"varint,13,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// The numeric key corresponds to the nexthop index position for the entry.
	BackupNexthops map[uint32]*NexthopGroupEntry `protobuf:"bytes,14,rep,name=backup_nexthops,json=backupNexthops,proto3" json:"backup_nexthops,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NexthopGroup) Reset() {
	*x = NexthopGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NexthopGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NexthopGroup) ProtoMessage() {}

func (x *NexthopGroup) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NexthopGroup.ProtoReflect.Descriptor instead.
func (*NexthopGroup) Descriptor() ([]byte, []int) {
	return file_nexthop_group_types_proto_rawDescGZIP(), []int{2}
}

func (x *NexthopGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NexthopGroup) GetType() NexthopGroupEncapTypes {
	if x != nil {
		return x.Type
	}
	return NexthopGroupEncapTypes_NEXTHOP_GROUP_ENCAP_TYPE_NULL
}

func (x *NexthopGroup) GetGreKeyType() NexthopGroupGreKeyTypes {
	if x != nil {
		return x.GreKeyType
	}
	return NexthopGroupGreKeyTypes_NEXTHOP_GROUP_GRE_KEY_NULL
}

func (m *NexthopGroup) GetTtlPresent() isNexthopGroup_TtlPresent {
	if m != nil {
		return m.TtlPresent
	}
	return nil
}

func (x *NexthopGroup) GetTtl() uint32 {
	if x, ok := x.GetTtlPresent().(*NexthopGroup_Ttl); ok {
		return x.Ttl
	}
	return 0
}

func (x *NexthopGroup) GetSourceIpAddr() []byte {
	if x != nil {
		return x.SourceIpAddr
	}
	return nil
}

func (x *NexthopGroup) GetSourceIntf() *IntfId {
	if x != nil {
		return x.SourceIntf
	}
	return nil
}

func (x *NexthopGroup) GetAutosize() bool {
	if x != nil {
		return x.Autosize
	}
	return false
}

func (x *NexthopGroup) GetNexthops() map[uint32]*NexthopGroupEntry {
	if x != nil {
		return x.Nexthops
	}
	return nil
}

func (x *NexthopGroup) GetDestinationIps() map[uint32][]byte {
	if x != nil {
		return x.DestinationIps
	}
	return nil
}

func (x *NexthopGroup) GetCountersUnshared() bool {
	if x != nil {
		return x.CountersUnshared
	}
	return false
}

func (x *NexthopGroup) GetHierarchicalFecsEnabled() bool {
	if x != nil {
		return x.HierarchicalFecsEnabled
	}
	return false
}

func (x *NexthopGroup) GetCountersPersistent() bool {
	if x != nil {
		return x.CountersPersistent
	}
	return false
}

func (x *NexthopGroup) GetVersionId() uint32 {
	if x != nil {
		return x.VersionId
	}
	return 0
}

func (x *NexthopGroup) GetBackupNexthops() map[uint32]*NexthopGroupEntry {
	if x != nil {
		return x.BackupNexthops
	}
	return nil
}

type isNexthopGroup_TtlPresent interface {
	isNexthopGroup_TtlPresent()
}

type NexthopGroup_Ttl struct {
	// Default value is 64.
	Ttl uint32 `protobuf:"varint,4,opt,name=ttl,proto3,oneof"`
}

func (*NexthopGroup_Ttl) isNexthopGroup_TtlPresent() {}

type NexthopGroupCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Packets uint64 `protobuf:"varint,1,opt,name=packets,proto3" json:"packets,omitempty"`
	Bytes   uint64 `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Valid   bool   `protobuf:"varint,3,opt,name=valid,proto3" json:"valid,omitempty"`
	EntryId uint32 `protobuf:"varint,4,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
}

func (x *NexthopGroupCounter) Reset() {
	*x = NexthopGroupCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NexthopGroupCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NexthopGroupCounter) ProtoMessage() {}

func (x *NexthopGroupCounter) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NexthopGroupCounter.ProtoReflect.Descriptor instead.
func (*NexthopGroupCounter) Descriptor() ([]byte, []int) {
	return file_nexthop_group_types_proto_rawDescGZIP(), []int{3}
}

func (x *NexthopGroupCounter) GetPackets() uint64 {
	if x != nil {
		return x.Packets
	}
	return 0
}

func (x *NexthopGroupCounter) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *NexthopGroupCounter) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *NexthopGroupCounter) GetEntryId() uint32 {
	if x != nil {
		return x.EntryId
	}
	return 0
}

type OnNexthopGroupProgrammed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HwState      NexthopGroupProgrammedHwState `protobuf:"varint,1,opt,name=hw_state,json=hwState,proto3,enum=eos.remote.NexthopGroupProgrammedHwState" json:"hw_state,omitempty"`
	CounterState NexthopGroupCounterState      `protobuf:"varint,2,opt,name=counter_state,json=counterState,proto3,enum=eos.remote.NexthopGroupCounterState" json:"counter_state,omitempty"`
}

func (x *OnNexthopGroupProgrammed) Reset() {
	*x = OnNexthopGroupProgrammed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnNexthopGroupProgrammed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnNexthopGroupProgrammed) ProtoMessage() {}

func (x *OnNexthopGroupProgrammed) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnNexthopGroupProgrammed.ProtoReflect.Descriptor instead.
func (*OnNexthopGroupProgrammed) Descriptor() ([]byte, []int) {
	return file_nexthop_group_types_proto_rawDescGZIP(), []int{4}
}

func (x *OnNexthopGroupProgrammed) GetHwState() NexthopGroupProgrammedHwState {
	if x != nil {
		return x.HwState
	}
	return NexthopGroupProgrammedHwState_NEXTHOP_GROUP_HW_DROP
}

func (x *OnNexthopGroupProgrammed) GetCounterState() NexthopGroupCounterState {
	if x != nil {
		return x.CounterState
	}
	return NexthopGroupCounterState_NEXTHOP_GROUP_COUNTER_INACTIVE
}

var File_nexthop_group_types_proto protoreflect.FileDescriptor

var file_nexthop_group_types_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x1a, 0x10, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x6d, 0x70, 0x6c, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd4, 0x01, 0x0a, 0x11,
	0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x43, 0x0a, 0x0b, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x70, 0x6c, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6d, 0x70, 0x6c, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f,
	0x70, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x49, 0x70, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x6e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x22, 0x6a, 0x0a, 0x16, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x70, 0x6c, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0xe7,
	0x07, 0x0a, 0x0c, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e,
	0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x63, 0x61, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x67,
	0x72, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e,
	0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x72, 0x65, 0x4b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x0a, 0x67, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x33, 0x0a, 0x0b,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49,
	0x6e, 0x74, 0x66, 0x49, 0x64, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x74,
	0x66, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x42, 0x0a,
	0x08, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78,
	0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f,
	0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x73, 0x12, 0x55, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x70, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x70, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x5f, 0x75, 0x6e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x55, 0x6e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x63, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x65, 0x63, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x55, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x4e, 0x65, 0x78, 0x74, 0x68,
	0x6f, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x1a, 0x5a, 0x0a, 0x0d, 0x4e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x13, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78,
	0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x74, 0x74, 0x6c,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x22, 0x76, 0x0a, 0x13, 0x4e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64,
	0x22, 0xab, 0x01, 0x0a, 0x18, 0x4f, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x64, 0x12, 0x44, 0x0a,
	0x08, 0x68, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78,
	0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x6d, 0x65, 0x64, 0x48, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x68, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2a, 0xdb,
	0x01, 0x0a, 0x16, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45,
	0x6e, 0x63, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x45, 0x58,
	0x54, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c,
	0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x45, 0x4e,
	0x43, 0x41, 0x50, 0x5f, 0x49, 0x50, 0x5f, 0x49, 0x4e, 0x5f, 0x49, 0x50, 0x10, 0x01, 0x12, 0x1b,
	0x0a, 0x17, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x45, 0x4e, 0x43, 0x41, 0x50, 0x5f, 0x47, 0x52, 0x45, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x4e,
	0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x45, 0x4e, 0x43,
	0x41, 0x50, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x4e, 0x45, 0x58,
	0x54, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50,
	0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x47, 0x52, 0x45, 0x10, 0x04,
	0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x45, 0x4e, 0x43, 0x41, 0x50, 0x5f, 0x49, 0x50, 0x10, 0x05, 0x2a, 0x61, 0x0a, 0x17,
	0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x47, 0x72, 0x65, 0x4b,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x4e, 0x45, 0x58, 0x54, 0x48,
	0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x47, 0x52, 0x45, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x4e, 0x45, 0x58, 0x54, 0x48,
	0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x47, 0x52, 0x45, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x10, 0x01, 0x2a,
	0x9c, 0x01, 0x0a, 0x18, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x1e,
	0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00,
	0x12, 0x2c, 0x0a, 0x28, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41,
	0x4d, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2e,
	0x0a, 0x2a, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x4d,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x2a, 0x8a,
	0x01, 0x0a, 0x1d, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x64, 0x48, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x48, 0x57, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x4e,
	0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x48, 0x57, 0x5f,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41,
	0x4d, 0x4d, 0x45, 0x44, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f,
	0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x48, 0x57, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x4d, 0x45, 0x44, 0x10, 0x02, 0x42, 0x12, 0x5a, 0x10, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x45, 0x6f, 0x73, 0x53, 0x64, 0x6b, 0x52, 0x70, 0x63, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nexthop_group_types_proto_rawDescOnce sync.Once
	file_nexthop_group_types_proto_rawDescData = file_nexthop_group_types_proto_rawDesc
)

func file_nexthop_group_types_proto_rawDescGZIP() []byte {
	file_nexthop_group_types_proto_rawDescOnce.Do(func() {
		file_nexthop_group_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_nexthop_group_types_proto_rawDescData)
	})
	return file_nexthop_group_types_proto_rawDescData
}

var file_nexthop_group_types_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_nexthop_group_types_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_nexthop_group_types_proto_goTypes = []interface{}{
	(NexthopGroupEncapTypes)(0),        // 0: eos.remote.NexthopGroupEncapTypes
	(NexthopGroupGreKeyTypes)(0),       // 1: eos.remote.NexthopGroupGreKeyTypes
	(NexthopGroupCounterState)(0),      // 2: eos.remote.NexthopGroupCounterState
	(NexthopGroupProgrammedHwState)(0), // 3: eos.remote.NexthopGroupProgrammedHwState
	(*NexthopGroupEntry)(nil),          // 4: eos.remote.NexthopGroupEntry
	(*NexthopGroupMplsAction)(nil),     // 5: eos.remote.NexthopGroupMplsAction
	(*NexthopGroup)(nil),               // 6: eos.remote.NexthopGroup
	(*NexthopGroupCounter)(nil),        // 7: eos.remote.NexthopGroupCounter
	(*OnNexthopGroupProgrammed)(nil),   // 8: eos.remote.OnNexthopGroupProgrammed
	nil,                                // 9: eos.remote.NexthopGroup.NexthopsEntry
	nil,                                // 10: eos.remote.NexthopGroup.DestinationIpsEntry
	nil,                                // 11: eos.remote.NexthopGroup.BackupNexthopsEntry
	(*IntfId)(nil),                     // 12: eos.remote.IntfId
	(MplsActions)(0),                   // 13: eos.remote.MplsActions
}
var file_nexthop_group_types_proto_depIdxs = []int32{
	5,  // 0: eos.remote.NexthopGroupEntry.mpls_action:type_name -> eos.remote.NexthopGroupMplsAction
	12, // 1: eos.remote.NexthopGroupEntry.intf_id:type_name -> eos.remote.IntfId
	13, // 2: eos.remote.NexthopGroupMplsAction.action:type_name -> eos.remote.MplsActions
	0,  // 3: eos.remote.NexthopGroup.type:type_name -> eos.remote.NexthopGroupEncapTypes
	1,  // 4: eos.remote.NexthopGroup.gre_key_type:type_name -> eos.remote.NexthopGroupGreKeyTypes
	12, // 5: eos.remote.NexthopGroup.source_intf:type_name -> eos.remote.IntfId
	9,  // 6: eos.remote.NexthopGroup.nexthops:type_name -> eos.remote.NexthopGroup.NexthopsEntry
	10, // 7: eos.remote.NexthopGroup.destination_ips:type_name -> eos.remote.NexthopGroup.DestinationIpsEntry
	11, // 8: eos.remote.NexthopGroup.backup_nexthops:type_name -> eos.remote.NexthopGroup.BackupNexthopsEntry
	3,  // 9: eos.remote.OnNexthopGroupProgrammed.hw_state:type_name -> eos.remote.NexthopGroupProgrammedHwState
	2,  // 10: eos.remote.OnNexthopGroupProgrammed.counter_state:type_name -> eos.remote.NexthopGroupCounterState
	4,  // 11: eos.remote.NexthopGroup.NexthopsEntry.value:type_name -> eos.remote.NexthopGroupEntry
	4,  // 12: eos.remote.NexthopGroup.BackupNexthopsEntry.value:type_name -> eos.remote.NexthopGroupEntry
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_nexthop_group_types_proto_init() }
func file_nexthop_group_types_proto_init() {
	if File_nexthop_group_types_proto != nil {
		return
	}
	file_intf_types_proto_init()
	file_mpls_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_nexthop_group_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NexthopGroupEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NexthopGroupMplsAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NexthopGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NexthopGroupCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnNexthopGroupProgrammed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_nexthop_group_types_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*NexthopGroup_Ttl)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nexthop_group_types_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nexthop_group_types_proto_goTypes,
		DependencyIndexes: file_nexthop_group_types_proto_depIdxs,
		EnumInfos:         file_nexthop_group_types_proto_enumTypes,
		MessageInfos:      file_nexthop_group_types_proto_msgTypes,
	}.Build()
	File_nexthop_group_types_proto = out.File
	file_nexthop_group_types_proto_rawDesc = nil
	file_nexthop_group_types_proto_goTypes = nil
	file_nexthop_group_types_proto_depIdxs = nil
}
