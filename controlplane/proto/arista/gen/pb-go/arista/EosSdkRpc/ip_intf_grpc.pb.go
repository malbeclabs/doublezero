// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: ip_intf.proto

package EosSdkRpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IpIntfMgrServiceClient is the client API for IpIntfMgrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IpIntfMgrServiceClient interface {
	// *
	// Subscription to monitor changes on the IP addresses of interfaces. This request
	// stays active until it is cancelled from client side or the server is shut down.
	//
	// EosSdk reference: eos::ip_intf_handler (class)
	Watch(ctx context.Context, in *IpIntfWatchRequest, opts ...grpc.CallOption) (IpIntfMgrService_WatchClient, error)
	// *
	// Queries whether the given interface exists and is able to have IP addresses.
	//
	// EosSdk reference: eos::ip_intf_mgr::exists
	Exists(ctx context.Context, in *IpIntfExistsRequest, opts ...grpc.CallOption) (*IpIntfExistsResponse, error)
	// *
	// Queries all IP addresses associated with an interface.
	//
	// EosSdk reference: eos::ip_intf_mgr::ip_addrs
	IpAddrs(ctx context.Context, in *IpIntfAddrsRequest, opts ...grpc.CallOption) (*IpIntfAddrsResponse, error)
	// *
	// Sets IP addresses for an interface.
	//
	// EosSdk reference: eos::ip_intf_mgr::ip_addrs_is
	IpAddrsIs(ctx context.Context, in *IpIntfAddrsIsRequest, opts ...grpc.CallOption) (*IpIntfAddrsIsResponse, error)
	// *
	// Sets IP addresses for multiple interfaces.
	//
	// EosSdk reference: eos::ip_intf_mgr::ip_addrs_is
	BulkIpAddrsIs(ctx context.Context, in *BulkIpIntfAddrsIsRequest, opts ...grpc.CallOption) (*BulkIpIntfAddrsIsResponse, error)
	// *
	// Adds or deletes one address to an interface.
	//
	// EosSdk references: eos::ip_intf_mgr::ip_addr_add and
	// eos::ip_intf_mgr::ip_addr_del
	IpAddrModify(ctx context.Context, in *IpIntfAddrModifyRequest, opts ...grpc.CallOption) (*IpIntfAddrModifyResponse, error)
	// *
	// Applies multiple IP address changes in a single call.
	//
	// EosSdk references: eos::ip_intf_mgr::ip_addr_add and
	// eos::ip_intf_mgr::ip_addr_del
	BulkIpAddrModify(ctx context.Context, in *BulkIpIntfAddrModifyRequest, opts ...grpc.CallOption) (*BulkIpIntfAddrModifyResponse, error)
	// *
	// Queries the IP address merge mode for an interface.
	//
	// EosSdk references: eos::ip_intf_mgr::ip_addr_merge_mode and
	// eos::ip_intf_mgr::ip_addr_merge_mode_is
	IpAddrMergeMode(ctx context.Context, in *IpIntfAddrMergeModeRequest, opts ...grpc.CallOption) (*IpIntfAddrMergeModeResponse, error)
	// *
	// Updates the IP address merge mode for an interface.
	//
	// EosSdk reference: eos::ip_intf_mgr::ip_addr_merge_mode_is
	IpAddrMergeModeIs(ctx context.Context, in *IpIntfAddrMergeModeIsRequest, opts ...grpc.CallOption) (*IpIntfAddrMergeModeIsResponse, error)
	// *
	// Updates the IP address merge mode for multiple interfaces.
	//
	// EosSdk reference: eos::ip_intf_mgr::ip_addr_merge_mode_is
	BulkIpAddrMergeModeIs(ctx context.Context, in *BulkIpIntfAddrMergeModeIsRequest, opts ...grpc.CallOption) (*BulkIpIntfAddrMergeModeIsResponse, error)
	// *
	// Queries the internal VLAN ID associated with an interface
	//
	// EosSdk reference: eos::ip_intf_mgr::internal_vlan_id
	InternalVlanId(ctx context.Context, in *IpIntfInternalVlanIdRequest, opts ...grpc.CallOption) (*IpIntfInternalVlanIdResponse, error)
}

type ipIntfMgrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIpIntfMgrServiceClient(cc grpc.ClientConnInterface) IpIntfMgrServiceClient {
	return &ipIntfMgrServiceClient{cc}
}

func (c *ipIntfMgrServiceClient) Watch(ctx context.Context, in *IpIntfWatchRequest, opts ...grpc.CallOption) (IpIntfMgrService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &IpIntfMgrService_ServiceDesc.Streams[0], "/eos.remote.IpIntfMgrService/watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &ipIntfMgrServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IpIntfMgrService_WatchClient interface {
	Recv() (*IpIntfEvent, error)
	grpc.ClientStream
}

type ipIntfMgrServiceWatchClient struct {
	grpc.ClientStream
}

func (x *ipIntfMgrServiceWatchClient) Recv() (*IpIntfEvent, error) {
	m := new(IpIntfEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ipIntfMgrServiceClient) Exists(ctx context.Context, in *IpIntfExistsRequest, opts ...grpc.CallOption) (*IpIntfExistsResponse, error) {
	out := new(IpIntfExistsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.IpIntfMgrService/exists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipIntfMgrServiceClient) IpAddrs(ctx context.Context, in *IpIntfAddrsRequest, opts ...grpc.CallOption) (*IpIntfAddrsResponse, error) {
	out := new(IpIntfAddrsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.IpIntfMgrService/ip_addrs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipIntfMgrServiceClient) IpAddrsIs(ctx context.Context, in *IpIntfAddrsIsRequest, opts ...grpc.CallOption) (*IpIntfAddrsIsResponse, error) {
	out := new(IpIntfAddrsIsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.IpIntfMgrService/ip_addrs_is", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipIntfMgrServiceClient) BulkIpAddrsIs(ctx context.Context, in *BulkIpIntfAddrsIsRequest, opts ...grpc.CallOption) (*BulkIpIntfAddrsIsResponse, error) {
	out := new(BulkIpIntfAddrsIsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.IpIntfMgrService/bulk_ip_addrs_is", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipIntfMgrServiceClient) IpAddrModify(ctx context.Context, in *IpIntfAddrModifyRequest, opts ...grpc.CallOption) (*IpIntfAddrModifyResponse, error) {
	out := new(IpIntfAddrModifyResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.IpIntfMgrService/ip_addr_modify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipIntfMgrServiceClient) BulkIpAddrModify(ctx context.Context, in *BulkIpIntfAddrModifyRequest, opts ...grpc.CallOption) (*BulkIpIntfAddrModifyResponse, error) {
	out := new(BulkIpIntfAddrModifyResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.IpIntfMgrService/bulk_ip_addr_modify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipIntfMgrServiceClient) IpAddrMergeMode(ctx context.Context, in *IpIntfAddrMergeModeRequest, opts ...grpc.CallOption) (*IpIntfAddrMergeModeResponse, error) {
	out := new(IpIntfAddrMergeModeResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.IpIntfMgrService/ip_addr_merge_mode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipIntfMgrServiceClient) IpAddrMergeModeIs(ctx context.Context, in *IpIntfAddrMergeModeIsRequest, opts ...grpc.CallOption) (*IpIntfAddrMergeModeIsResponse, error) {
	out := new(IpIntfAddrMergeModeIsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.IpIntfMgrService/ip_addr_merge_mode_is", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipIntfMgrServiceClient) BulkIpAddrMergeModeIs(ctx context.Context, in *BulkIpIntfAddrMergeModeIsRequest, opts ...grpc.CallOption) (*BulkIpIntfAddrMergeModeIsResponse, error) {
	out := new(BulkIpIntfAddrMergeModeIsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.IpIntfMgrService/bulk_ip_addr_merge_mode_is", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipIntfMgrServiceClient) InternalVlanId(ctx context.Context, in *IpIntfInternalVlanIdRequest, opts ...grpc.CallOption) (*IpIntfInternalVlanIdResponse, error) {
	out := new(IpIntfInternalVlanIdResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.IpIntfMgrService/internal_vlan_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IpIntfMgrServiceServer is the server API for IpIntfMgrService service.
// All implementations should embed UnimplementedIpIntfMgrServiceServer
// for forward compatibility
type IpIntfMgrServiceServer interface {
	// *
	// Subscription to monitor changes on the IP addresses of interfaces. This request
	// stays active until it is cancelled from client side or the server is shut down.
	//
	// EosSdk reference: eos::ip_intf_handler (class)
	Watch(*IpIntfWatchRequest, IpIntfMgrService_WatchServer) error
	// *
	// Queries whether the given interface exists and is able to have IP addresses.
	//
	// EosSdk reference: eos::ip_intf_mgr::exists
	Exists(context.Context, *IpIntfExistsRequest) (*IpIntfExistsResponse, error)
	// *
	// Queries all IP addresses associated with an interface.
	//
	// EosSdk reference: eos::ip_intf_mgr::ip_addrs
	IpAddrs(context.Context, *IpIntfAddrsRequest) (*IpIntfAddrsResponse, error)
	// *
	// Sets IP addresses for an interface.
	//
	// EosSdk reference: eos::ip_intf_mgr::ip_addrs_is
	IpAddrsIs(context.Context, *IpIntfAddrsIsRequest) (*IpIntfAddrsIsResponse, error)
	// *
	// Sets IP addresses for multiple interfaces.
	//
	// EosSdk reference: eos::ip_intf_mgr::ip_addrs_is
	BulkIpAddrsIs(context.Context, *BulkIpIntfAddrsIsRequest) (*BulkIpIntfAddrsIsResponse, error)
	// *
	// Adds or deletes one address to an interface.
	//
	// EosSdk references: eos::ip_intf_mgr::ip_addr_add and
	// eos::ip_intf_mgr::ip_addr_del
	IpAddrModify(context.Context, *IpIntfAddrModifyRequest) (*IpIntfAddrModifyResponse, error)
	// *
	// Applies multiple IP address changes in a single call.
	//
	// EosSdk references: eos::ip_intf_mgr::ip_addr_add and
	// eos::ip_intf_mgr::ip_addr_del
	BulkIpAddrModify(context.Context, *BulkIpIntfAddrModifyRequest) (*BulkIpIntfAddrModifyResponse, error)
	// *
	// Queries the IP address merge mode for an interface.
	//
	// EosSdk references: eos::ip_intf_mgr::ip_addr_merge_mode and
	// eos::ip_intf_mgr::ip_addr_merge_mode_is
	IpAddrMergeMode(context.Context, *IpIntfAddrMergeModeRequest) (*IpIntfAddrMergeModeResponse, error)
	// *
	// Updates the IP address merge mode for an interface.
	//
	// EosSdk reference: eos::ip_intf_mgr::ip_addr_merge_mode_is
	IpAddrMergeModeIs(context.Context, *IpIntfAddrMergeModeIsRequest) (*IpIntfAddrMergeModeIsResponse, error)
	// *
	// Updates the IP address merge mode for multiple interfaces.
	//
	// EosSdk reference: eos::ip_intf_mgr::ip_addr_merge_mode_is
	BulkIpAddrMergeModeIs(context.Context, *BulkIpIntfAddrMergeModeIsRequest) (*BulkIpIntfAddrMergeModeIsResponse, error)
	// *
	// Queries the internal VLAN ID associated with an interface
	//
	// EosSdk reference: eos::ip_intf_mgr::internal_vlan_id
	InternalVlanId(context.Context, *IpIntfInternalVlanIdRequest) (*IpIntfInternalVlanIdResponse, error)
}

// UnimplementedIpIntfMgrServiceServer should be embedded to have forward compatible implementations.
type UnimplementedIpIntfMgrServiceServer struct {
}

func (UnimplementedIpIntfMgrServiceServer) Watch(*IpIntfWatchRequest, IpIntfMgrService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedIpIntfMgrServiceServer) Exists(context.Context, *IpIntfExistsRequest) (*IpIntfExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedIpIntfMgrServiceServer) IpAddrs(context.Context, *IpIntfAddrsRequest) (*IpIntfAddrsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IpAddrs not implemented")
}
func (UnimplementedIpIntfMgrServiceServer) IpAddrsIs(context.Context, *IpIntfAddrsIsRequest) (*IpIntfAddrsIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IpAddrsIs not implemented")
}
func (UnimplementedIpIntfMgrServiceServer) BulkIpAddrsIs(context.Context, *BulkIpIntfAddrsIsRequest) (*BulkIpIntfAddrsIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkIpAddrsIs not implemented")
}
func (UnimplementedIpIntfMgrServiceServer) IpAddrModify(context.Context, *IpIntfAddrModifyRequest) (*IpIntfAddrModifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IpAddrModify not implemented")
}
func (UnimplementedIpIntfMgrServiceServer) BulkIpAddrModify(context.Context, *BulkIpIntfAddrModifyRequest) (*BulkIpIntfAddrModifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkIpAddrModify not implemented")
}
func (UnimplementedIpIntfMgrServiceServer) IpAddrMergeMode(context.Context, *IpIntfAddrMergeModeRequest) (*IpIntfAddrMergeModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IpAddrMergeMode not implemented")
}
func (UnimplementedIpIntfMgrServiceServer) IpAddrMergeModeIs(context.Context, *IpIntfAddrMergeModeIsRequest) (*IpIntfAddrMergeModeIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IpAddrMergeModeIs not implemented")
}
func (UnimplementedIpIntfMgrServiceServer) BulkIpAddrMergeModeIs(context.Context, *BulkIpIntfAddrMergeModeIsRequest) (*BulkIpIntfAddrMergeModeIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkIpAddrMergeModeIs not implemented")
}
func (UnimplementedIpIntfMgrServiceServer) InternalVlanId(context.Context, *IpIntfInternalVlanIdRequest) (*IpIntfInternalVlanIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalVlanId not implemented")
}

// UnsafeIpIntfMgrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IpIntfMgrServiceServer will
// result in compilation errors.
type UnsafeIpIntfMgrServiceServer interface {
	mustEmbedUnimplementedIpIntfMgrServiceServer()
}

func RegisterIpIntfMgrServiceServer(s grpc.ServiceRegistrar, srv IpIntfMgrServiceServer) {
	s.RegisterService(&IpIntfMgrService_ServiceDesc, srv)
}

func _IpIntfMgrService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IpIntfWatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IpIntfMgrServiceServer).Watch(m, &ipIntfMgrServiceWatchServer{stream})
}

type IpIntfMgrService_WatchServer interface {
	Send(*IpIntfEvent) error
	grpc.ServerStream
}

type ipIntfMgrServiceWatchServer struct {
	grpc.ServerStream
}

func (x *ipIntfMgrServiceWatchServer) Send(m *IpIntfEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _IpIntfMgrService_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpIntfExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpIntfMgrServiceServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.IpIntfMgrService/exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpIntfMgrServiceServer).Exists(ctx, req.(*IpIntfExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpIntfMgrService_IpAddrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpIntfAddrsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpIntfMgrServiceServer).IpAddrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.IpIntfMgrService/ip_addrs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpIntfMgrServiceServer).IpAddrs(ctx, req.(*IpIntfAddrsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpIntfMgrService_IpAddrsIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpIntfAddrsIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpIntfMgrServiceServer).IpAddrsIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.IpIntfMgrService/ip_addrs_is",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpIntfMgrServiceServer).IpAddrsIs(ctx, req.(*IpIntfAddrsIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpIntfMgrService_BulkIpAddrsIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkIpIntfAddrsIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpIntfMgrServiceServer).BulkIpAddrsIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.IpIntfMgrService/bulk_ip_addrs_is",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpIntfMgrServiceServer).BulkIpAddrsIs(ctx, req.(*BulkIpIntfAddrsIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpIntfMgrService_IpAddrModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpIntfAddrModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpIntfMgrServiceServer).IpAddrModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.IpIntfMgrService/ip_addr_modify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpIntfMgrServiceServer).IpAddrModify(ctx, req.(*IpIntfAddrModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpIntfMgrService_BulkIpAddrModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkIpIntfAddrModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpIntfMgrServiceServer).BulkIpAddrModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.IpIntfMgrService/bulk_ip_addr_modify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpIntfMgrServiceServer).BulkIpAddrModify(ctx, req.(*BulkIpIntfAddrModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpIntfMgrService_IpAddrMergeMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpIntfAddrMergeModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpIntfMgrServiceServer).IpAddrMergeMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.IpIntfMgrService/ip_addr_merge_mode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpIntfMgrServiceServer).IpAddrMergeMode(ctx, req.(*IpIntfAddrMergeModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpIntfMgrService_IpAddrMergeModeIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpIntfAddrMergeModeIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpIntfMgrServiceServer).IpAddrMergeModeIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.IpIntfMgrService/ip_addr_merge_mode_is",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpIntfMgrServiceServer).IpAddrMergeModeIs(ctx, req.(*IpIntfAddrMergeModeIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpIntfMgrService_BulkIpAddrMergeModeIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkIpIntfAddrMergeModeIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpIntfMgrServiceServer).BulkIpAddrMergeModeIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.IpIntfMgrService/bulk_ip_addr_merge_mode_is",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpIntfMgrServiceServer).BulkIpAddrMergeModeIs(ctx, req.(*BulkIpIntfAddrMergeModeIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpIntfMgrService_InternalVlanId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpIntfInternalVlanIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpIntfMgrServiceServer).InternalVlanId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.IpIntfMgrService/internal_vlan_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpIntfMgrServiceServer).InternalVlanId(ctx, req.(*IpIntfInternalVlanIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IpIntfMgrService_ServiceDesc is the grpc.ServiceDesc for IpIntfMgrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IpIntfMgrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eos.remote.IpIntfMgrService",
	HandlerType: (*IpIntfMgrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "exists",
			Handler:    _IpIntfMgrService_Exists_Handler,
		},
		{
			MethodName: "ip_addrs",
			Handler:    _IpIntfMgrService_IpAddrs_Handler,
		},
		{
			MethodName: "ip_addrs_is",
			Handler:    _IpIntfMgrService_IpAddrsIs_Handler,
		},
		{
			MethodName: "bulk_ip_addrs_is",
			Handler:    _IpIntfMgrService_BulkIpAddrsIs_Handler,
		},
		{
			MethodName: "ip_addr_modify",
			Handler:    _IpIntfMgrService_IpAddrModify_Handler,
		},
		{
			MethodName: "bulk_ip_addr_modify",
			Handler:    _IpIntfMgrService_BulkIpAddrModify_Handler,
		},
		{
			MethodName: "ip_addr_merge_mode",
			Handler:    _IpIntfMgrService_IpAddrMergeMode_Handler,
		},
		{
			MethodName: "ip_addr_merge_mode_is",
			Handler:    _IpIntfMgrService_IpAddrMergeModeIs_Handler,
		},
		{
			MethodName: "bulk_ip_addr_merge_mode_is",
			Handler:    _IpIntfMgrService_BulkIpAddrMergeModeIs_Handler,
		},
		{
			MethodName: "internal_vlan_id",
			Handler:    _IpIntfMgrService_InternalVlanId_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "watch",
			Handler:       _IpIntfMgrService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ip_intf.proto",
}
