// Copyright (c) 2021 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: bgp_path.proto

package EosSdkRpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BgpPathWatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Overloads:
	//
	//	*BgpPathWatchRequest_AllPaths
	//	*BgpPathWatchRequest_Ipv4UnicastPaths
	//	*BgpPathWatchRequest_Ipv6UnicastPaths
	Overloads isBgpPathWatchRequest_Overloads `protobuf_oneof:"overloads"`
	// Set to true when an ackowledgment is desired.
	Ack bool `protobuf:"varint,4,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (x *BgpPathWatchRequest) Reset() {
	*x = BgpPathWatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_path_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpPathWatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPathWatchRequest) ProtoMessage() {}

func (x *BgpPathWatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_path_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPathWatchRequest.ProtoReflect.Descriptor instead.
func (*BgpPathWatchRequest) Descriptor() ([]byte, []int) {
	return file_bgp_path_proto_rawDescGZIP(), []int{0}
}

func (m *BgpPathWatchRequest) GetOverloads() isBgpPathWatchRequest_Overloads {
	if m != nil {
		return m.Overloads
	}
	return nil
}

func (x *BgpPathWatchRequest) GetAllPaths() bool {
	if x, ok := x.GetOverloads().(*BgpPathWatchRequest_AllPaths); ok {
		return x.AllPaths
	}
	return false
}

func (x *BgpPathWatchRequest) GetIpv4UnicastPaths() bool {
	if x, ok := x.GetOverloads().(*BgpPathWatchRequest_Ipv4UnicastPaths); ok {
		return x.Ipv4UnicastPaths
	}
	return false
}

func (x *BgpPathWatchRequest) GetIpv6UnicastPaths() bool {
	if x, ok := x.GetOverloads().(*BgpPathWatchRequest_Ipv6UnicastPaths); ok {
		return x.Ipv6UnicastPaths
	}
	return false
}

func (x *BgpPathWatchRequest) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

type isBgpPathWatchRequest_Overloads interface {
	isBgpPathWatchRequest_Overloads()
}

type BgpPathWatchRequest_AllPaths struct {
	AllPaths bool `protobuf:"varint,1,opt,name=all_paths,json=allPaths,proto3,oneof"`
}

type BgpPathWatchRequest_Ipv4UnicastPaths struct {
	// True if IPv4 unicast paths should be monitored.
	Ipv4UnicastPaths bool `protobuf:"varint,2,opt,name=ipv4_unicast_paths,json=ipv4UnicastPaths,proto3,oneof"`
}

type BgpPathWatchRequest_Ipv6UnicastPaths struct {
	// True if IPv6 unicast paths should be monitored.
	Ipv6UnicastPaths bool `protobuf:"varint,3,opt,name=ipv6_unicast_paths,json=ipv6UnicastPaths,proto3,oneof"`
}

func (*BgpPathWatchRequest_AllPaths) isBgpPathWatchRequest_Overloads() {}

func (*BgpPathWatchRequest_Ipv4UnicastPaths) isBgpPathWatchRequest_Overloads() {}

func (*BgpPathWatchRequest_Ipv6UnicastPaths) isBgpPathWatchRequest_Overloads() {}

// *
// Events are streamed as changes happen.
type BgpPathWatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IP family affected by the event.
	IpVersion IpVersion `protobuf:"varint,1,opt,name=ip_version,json=ipVersion,proto3,enum=eos.remote.IpVersion" json:"ip_version,omitempty"`
	// Types that are assignable to Events:
	//
	//	*BgpPathWatchResponse_PathKey
	//	*BgpPathWatchResponse_Converged
	Events isBgpPathWatchResponse_Events `protobuf_oneof:"events"`
	// If true, this is not an event and the fields below are invalid.
	Ack bool `protobuf:"varint,4,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (x *BgpPathWatchResponse) Reset() {
	*x = BgpPathWatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_path_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpPathWatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPathWatchResponse) ProtoMessage() {}

func (x *BgpPathWatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_path_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPathWatchResponse.ProtoReflect.Descriptor instead.
func (*BgpPathWatchResponse) Descriptor() ([]byte, []int) {
	return file_bgp_path_proto_rawDescGZIP(), []int{1}
}

func (x *BgpPathWatchResponse) GetIpVersion() IpVersion {
	if x != nil {
		return x.IpVersion
	}
	return IpVersion_IP_VERSION_NONE
}

func (m *BgpPathWatchResponse) GetEvents() isBgpPathWatchResponse_Events {
	if m != nil {
		return m.Events
	}
	return nil
}

func (x *BgpPathWatchResponse) GetPathKey() *BgpPathKey {
	if x, ok := x.GetEvents().(*BgpPathWatchResponse_PathKey); ok {
		return x.PathKey
	}
	return nil
}

func (x *BgpPathWatchResponse) GetConverged() bool {
	if x, ok := x.GetEvents().(*BgpPathWatchResponse_Converged); ok {
		return x.Converged
	}
	return false
}

func (x *BgpPathWatchResponse) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

type isBgpPathWatchResponse_Events interface {
	isBgpPathWatchResponse_Events()
}

type BgpPathWatchResponse_PathKey struct {
	// Path changed in adj-RIB-in.
	PathKey *BgpPathKey `protobuf:"bytes,2,opt,name=path_key,json=pathKey,proto3,oneof"`
}

type BgpPathWatchResponse_Converged struct {
	// BGP convergence changed for that IP family.
	Converged bool `protobuf:"varint,3,opt,name=converged,proto3,oneof"`
}

func (*BgpPathWatchResponse_PathKey) isBgpPathWatchResponse_Events() {}

func (*BgpPathWatchResponse_Converged) isBgpPathWatchResponse_Events() {}

type Ipv4UnicastPathsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathOptions *BgpPathOptions `protobuf:"bytes,1,opt,name=path_options,json=pathOptions,proto3" json:"path_options,omitempty"`
}

func (x *Ipv4UnicastPathsRequest) Reset() {
	*x = Ipv4UnicastPathsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_path_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv4UnicastPathsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv4UnicastPathsRequest) ProtoMessage() {}

func (x *Ipv4UnicastPathsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_path_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv4UnicastPathsRequest.ProtoReflect.Descriptor instead.
func (*Ipv4UnicastPathsRequest) Descriptor() ([]byte, []int) {
	return file_bgp_path_proto_rawDescGZIP(), []int{2}
}

func (x *Ipv4UnicastPathsRequest) GetPathOptions() *BgpPathOptions {
	if x != nil {
		return x.PathOptions
	}
	return nil
}

type Ipv4UnicastPathsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of paths that match the criteria.
	Path *BgpPath `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Ipv4UnicastPathsResponse) Reset() {
	*x = Ipv4UnicastPathsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_path_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv4UnicastPathsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv4UnicastPathsResponse) ProtoMessage() {}

func (x *Ipv4UnicastPathsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_path_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv4UnicastPathsResponse.ProtoReflect.Descriptor instead.
func (*Ipv4UnicastPathsResponse) Descriptor() ([]byte, []int) {
	return file_bgp_path_proto_rawDescGZIP(), []int{3}
}

func (x *Ipv4UnicastPathsResponse) GetPath() *BgpPath {
	if x != nil {
		return x.Path
	}
	return nil
}

type Ipv4UnicastPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathKey     *BgpPathKey     `protobuf:"bytes,1,opt,name=path_key,json=pathKey,proto3" json:"path_key,omitempty"`
	PathOptions *BgpPathOptions `protobuf:"bytes,2,opt,name=path_options,json=pathOptions,proto3" json:"path_options,omitempty"`
}

func (x *Ipv4UnicastPathRequest) Reset() {
	*x = Ipv4UnicastPathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_path_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv4UnicastPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv4UnicastPathRequest) ProtoMessage() {}

func (x *Ipv4UnicastPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_path_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv4UnicastPathRequest.ProtoReflect.Descriptor instead.
func (*Ipv4UnicastPathRequest) Descriptor() ([]byte, []int) {
	return file_bgp_path_proto_rawDescGZIP(), []int{4}
}

func (x *Ipv4UnicastPathRequest) GetPathKey() *BgpPathKey {
	if x != nil {
		return x.PathKey
	}
	return nil
}

func (x *Ipv4UnicastPathRequest) GetPathOptions() *BgpPathOptions {
	if x != nil {
		return x.PathOptions
	}
	return nil
}

type Ipv4UnicastPathResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path matching criteria or empty if not found.
	Path *BgpPath `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Ipv4UnicastPathResponse) Reset() {
	*x = Ipv4UnicastPathResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_path_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv4UnicastPathResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv4UnicastPathResponse) ProtoMessage() {}

func (x *Ipv4UnicastPathResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_path_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv4UnicastPathResponse.ProtoReflect.Descriptor instead.
func (*Ipv4UnicastPathResponse) Descriptor() ([]byte, []int) {
	return file_bgp_path_proto_rawDescGZIP(), []int{5}
}

func (x *Ipv4UnicastPathResponse) GetPath() *BgpPath {
	if x != nil {
		return x.Path
	}
	return nil
}

type Ipv4UnicastBgpConvergenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ipv4UnicastBgpConvergenceRequest) Reset() {
	*x = Ipv4UnicastBgpConvergenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_path_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv4UnicastBgpConvergenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv4UnicastBgpConvergenceRequest) ProtoMessage() {}

func (x *Ipv4UnicastBgpConvergenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_path_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv4UnicastBgpConvergenceRequest.ProtoReflect.Descriptor instead.
func (*Ipv4UnicastBgpConvergenceRequest) Descriptor() ([]byte, []int) {
	return file_bgp_path_proto_rawDescGZIP(), []int{6}
}

type Ipv4UnicastBgpConvergenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if IPv4 family has converged.
	Converged bool `protobuf:"varint,1,opt,name=converged,proto3" json:"converged,omitempty"`
}

func (x *Ipv4UnicastBgpConvergenceResponse) Reset() {
	*x = Ipv4UnicastBgpConvergenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_path_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv4UnicastBgpConvergenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv4UnicastBgpConvergenceResponse) ProtoMessage() {}

func (x *Ipv4UnicastBgpConvergenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_path_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv4UnicastBgpConvergenceResponse.ProtoReflect.Descriptor instead.
func (*Ipv4UnicastBgpConvergenceResponse) Descriptor() ([]byte, []int) {
	return file_bgp_path_proto_rawDescGZIP(), []int{7}
}

func (x *Ipv4UnicastBgpConvergenceResponse) GetConverged() bool {
	if x != nil {
		return x.Converged
	}
	return false
}

type Ipv6UnicastPathsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathOptions *BgpPathOptions `protobuf:"bytes,2,opt,name=path_options,json=pathOptions,proto3" json:"path_options,omitempty"`
}

func (x *Ipv6UnicastPathsRequest) Reset() {
	*x = Ipv6UnicastPathsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_path_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6UnicastPathsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6UnicastPathsRequest) ProtoMessage() {}

func (x *Ipv6UnicastPathsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_path_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6UnicastPathsRequest.ProtoReflect.Descriptor instead.
func (*Ipv6UnicastPathsRequest) Descriptor() ([]byte, []int) {
	return file_bgp_path_proto_rawDescGZIP(), []int{8}
}

func (x *Ipv6UnicastPathsRequest) GetPathOptions() *BgpPathOptions {
	if x != nil {
		return x.PathOptions
	}
	return nil
}

type Ipv6UnicastPathsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A path that matches the criteria.
	Path *BgpPath `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Ipv6UnicastPathsResponse) Reset() {
	*x = Ipv6UnicastPathsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_path_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6UnicastPathsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6UnicastPathsResponse) ProtoMessage() {}

func (x *Ipv6UnicastPathsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_path_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6UnicastPathsResponse.ProtoReflect.Descriptor instead.
func (*Ipv6UnicastPathsResponse) Descriptor() ([]byte, []int) {
	return file_bgp_path_proto_rawDescGZIP(), []int{9}
}

func (x *Ipv6UnicastPathsResponse) GetPath() *BgpPath {
	if x != nil {
		return x.Path
	}
	return nil
}

type Ipv6UnicastPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathKey     *BgpPathKey     `protobuf:"bytes,1,opt,name=path_key,json=pathKey,proto3" json:"path_key,omitempty"`
	PathOptions *BgpPathOptions `protobuf:"bytes,2,opt,name=path_options,json=pathOptions,proto3" json:"path_options,omitempty"`
}

func (x *Ipv6UnicastPathRequest) Reset() {
	*x = Ipv6UnicastPathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_path_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6UnicastPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6UnicastPathRequest) ProtoMessage() {}

func (x *Ipv6UnicastPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_path_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6UnicastPathRequest.ProtoReflect.Descriptor instead.
func (*Ipv6UnicastPathRequest) Descriptor() ([]byte, []int) {
	return file_bgp_path_proto_rawDescGZIP(), []int{10}
}

func (x *Ipv6UnicastPathRequest) GetPathKey() *BgpPathKey {
	if x != nil {
		return x.PathKey
	}
	return nil
}

func (x *Ipv6UnicastPathRequest) GetPathOptions() *BgpPathOptions {
	if x != nil {
		return x.PathOptions
	}
	return nil
}

type Ipv6UnicastPathResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path matching criteria or empty if not found.
	Path *BgpPath `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Ipv6UnicastPathResponse) Reset() {
	*x = Ipv6UnicastPathResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_path_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6UnicastPathResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6UnicastPathResponse) ProtoMessage() {}

func (x *Ipv6UnicastPathResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_path_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6UnicastPathResponse.ProtoReflect.Descriptor instead.
func (*Ipv6UnicastPathResponse) Descriptor() ([]byte, []int) {
	return file_bgp_path_proto_rawDescGZIP(), []int{11}
}

func (x *Ipv6UnicastPathResponse) GetPath() *BgpPath {
	if x != nil {
		return x.Path
	}
	return nil
}

type Ipv6UnicastBgpConvergenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ipv6UnicastBgpConvergenceRequest) Reset() {
	*x = Ipv6UnicastBgpConvergenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_path_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6UnicastBgpConvergenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6UnicastBgpConvergenceRequest) ProtoMessage() {}

func (x *Ipv6UnicastBgpConvergenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_path_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6UnicastBgpConvergenceRequest.ProtoReflect.Descriptor instead.
func (*Ipv6UnicastBgpConvergenceRequest) Descriptor() ([]byte, []int) {
	return file_bgp_path_proto_rawDescGZIP(), []int{12}
}

type Ipv6UnicastBgpConvergenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if IPv6 family has converged.
	Converged bool `protobuf:"varint,1,opt,name=converged,proto3" json:"converged,omitempty"`
}

func (x *Ipv6UnicastBgpConvergenceResponse) Reset() {
	*x = Ipv6UnicastBgpConvergenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_path_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ipv6UnicastBgpConvergenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv6UnicastBgpConvergenceResponse) ProtoMessage() {}

func (x *Ipv6UnicastBgpConvergenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_path_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv6UnicastBgpConvergenceResponse.ProtoReflect.Descriptor instead.
func (*Ipv6UnicastBgpConvergenceResponse) Descriptor() ([]byte, []int) {
	return file_bgp_path_proto_rawDescGZIP(), []int{13}
}

func (x *Ipv6UnicastBgpConvergenceResponse) GetConverged() bool {
	if x != nil {
		return x.Converged
	}
	return false
}

var File_bgp_path_proto protoreflect.FileDescriptor

var file_bgp_path_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x62, 0x67, 0x70, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0a, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x1a, 0x14, 0x62, 0x67,
	0x70, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0e, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb3, 0x01, 0x0a, 0x13, 0x42, 0x67, 0x70, 0x50, 0x61, 0x74, 0x68, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x61, 0x6c,
	0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x08, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x70, 0x76,
	0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x10, 0x69, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x70, 0x76,
	0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x10, 0x69, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x6f,
	0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x14, 0x42, 0x67, 0x70,
	0x50, 0x61, 0x74, 0x68, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x49, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x69, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x61, 0x74, 0x68, 0x4b, 0x65,
	0x79, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x42, 0x08,
	0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x58, 0x0a, 0x17, 0x49, 0x70, 0x76, 0x34,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x61, 0x74, 0x68, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x43, 0x0a, 0x18, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x8a, 0x01, 0x0a, 0x16, 0x49, 0x70, 0x76, 0x34,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x61, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x70, 0x61,
	0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x61, 0x74, 0x68,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x42, 0x0a, 0x17, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x27, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x22, 0x0a, 0x20, 0x49, 0x70, 0x76, 0x34,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x67, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x21,
	0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x42, 0x67, 0x70, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x22,
	0x58, 0x0a, 0x17, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x67,
	0x70, 0x50, 0x61, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x61,
	0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x43, 0x0a, 0x18, 0x49, 0x70, 0x76,
	0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x42, 0x67, 0x70, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x8a,
	0x01, 0x0a, 0x16, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x61, 0x74, 0x68,
	0x4b, 0x65, 0x79, 0x52, 0x07, 0x70, 0x61, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x0c,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x42, 0x67, 0x70, 0x50, 0x61, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b,
	0x70, 0x61, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x42, 0x0a, 0x17, 0x49,
	0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22,
	0x22, 0x0a, 0x20, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x42, 0x67,
	0x70, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x21, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x32, 0xeb, 0x05, 0x0a, 0x11, 0x42, 0x67, 0x70, 0x50, 0x61,
	0x74, 0x68, 0x4d, 0x67, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x05,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1f, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x61, 0x74, 0x68, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x61, 0x74, 0x68, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x63, 0x0a, 0x12,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x12, 0x23, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x5e, 0x0a, 0x11, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x12, 0x22, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7d, 0x0a, 0x1c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x2c, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49,
	0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x76,
	0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x63, 0x0a, 0x12, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x23, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5e, 0x0a, 0x11, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x12, 0x22, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36,
	0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x1c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x67, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2c, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x42, 0x67,
	0x70, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x42, 0x67, 0x70, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x12, 0x5a, 0x10, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x45,
	0x6f, 0x73, 0x53, 0x64, 0x6b, 0x52, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bgp_path_proto_rawDescOnce sync.Once
	file_bgp_path_proto_rawDescData = file_bgp_path_proto_rawDesc
)

func file_bgp_path_proto_rawDescGZIP() []byte {
	file_bgp_path_proto_rawDescOnce.Do(func() {
		file_bgp_path_proto_rawDescData = protoimpl.X.CompressGZIP(file_bgp_path_proto_rawDescData)
	})
	return file_bgp_path_proto_rawDescData
}

var file_bgp_path_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_bgp_path_proto_goTypes = []interface{}{
	(*BgpPathWatchRequest)(nil),               // 0: eos.remote.BgpPathWatchRequest
	(*BgpPathWatchResponse)(nil),              // 1: eos.remote.BgpPathWatchResponse
	(*Ipv4UnicastPathsRequest)(nil),           // 2: eos.remote.Ipv4UnicastPathsRequest
	(*Ipv4UnicastPathsResponse)(nil),          // 3: eos.remote.Ipv4UnicastPathsResponse
	(*Ipv4UnicastPathRequest)(nil),            // 4: eos.remote.Ipv4UnicastPathRequest
	(*Ipv4UnicastPathResponse)(nil),           // 5: eos.remote.Ipv4UnicastPathResponse
	(*Ipv4UnicastBgpConvergenceRequest)(nil),  // 6: eos.remote.Ipv4UnicastBgpConvergenceRequest
	(*Ipv4UnicastBgpConvergenceResponse)(nil), // 7: eos.remote.Ipv4UnicastBgpConvergenceResponse
	(*Ipv6UnicastPathsRequest)(nil),           // 8: eos.remote.Ipv6UnicastPathsRequest
	(*Ipv6UnicastPathsResponse)(nil),          // 9: eos.remote.Ipv6UnicastPathsResponse
	(*Ipv6UnicastPathRequest)(nil),            // 10: eos.remote.Ipv6UnicastPathRequest
	(*Ipv6UnicastPathResponse)(nil),           // 11: eos.remote.Ipv6UnicastPathResponse
	(*Ipv6UnicastBgpConvergenceRequest)(nil),  // 12: eos.remote.Ipv6UnicastBgpConvergenceRequest
	(*Ipv6UnicastBgpConvergenceResponse)(nil), // 13: eos.remote.Ipv6UnicastBgpConvergenceResponse
	(IpVersion)(0),                            // 14: eos.remote.IpVersion
	(*BgpPathKey)(nil),                        // 15: eos.remote.BgpPathKey
	(*BgpPathOptions)(nil),                    // 16: eos.remote.BgpPathOptions
	(*BgpPath)(nil),                           // 17: eos.remote.BgpPath
}
var file_bgp_path_proto_depIdxs = []int32{
	14, // 0: eos.remote.BgpPathWatchResponse.ip_version:type_name -> eos.remote.IpVersion
	15, // 1: eos.remote.BgpPathWatchResponse.path_key:type_name -> eos.remote.BgpPathKey
	16, // 2: eos.remote.Ipv4UnicastPathsRequest.path_options:type_name -> eos.remote.BgpPathOptions
	17, // 3: eos.remote.Ipv4UnicastPathsResponse.path:type_name -> eos.remote.BgpPath
	15, // 4: eos.remote.Ipv4UnicastPathRequest.path_key:type_name -> eos.remote.BgpPathKey
	16, // 5: eos.remote.Ipv4UnicastPathRequest.path_options:type_name -> eos.remote.BgpPathOptions
	17, // 6: eos.remote.Ipv4UnicastPathResponse.path:type_name -> eos.remote.BgpPath
	16, // 7: eos.remote.Ipv6UnicastPathsRequest.path_options:type_name -> eos.remote.BgpPathOptions
	17, // 8: eos.remote.Ipv6UnicastPathsResponse.path:type_name -> eos.remote.BgpPath
	15, // 9: eos.remote.Ipv6UnicastPathRequest.path_key:type_name -> eos.remote.BgpPathKey
	16, // 10: eos.remote.Ipv6UnicastPathRequest.path_options:type_name -> eos.remote.BgpPathOptions
	17, // 11: eos.remote.Ipv6UnicastPathResponse.path:type_name -> eos.remote.BgpPath
	0,  // 12: eos.remote.BgpPathMgrService.watch:input_type -> eos.remote.BgpPathWatchRequest
	2,  // 13: eos.remote.BgpPathMgrService.ipv4_unicast_paths:input_type -> eos.remote.Ipv4UnicastPathsRequest
	4,  // 14: eos.remote.BgpPathMgrService.ipv4_unicast_path:input_type -> eos.remote.Ipv4UnicastPathRequest
	6,  // 15: eos.remote.BgpPathMgrService.ipv4_unicast_bgp_convergence:input_type -> eos.remote.Ipv4UnicastBgpConvergenceRequest
	8,  // 16: eos.remote.BgpPathMgrService.ipv6_unicast_paths:input_type -> eos.remote.Ipv6UnicastPathsRequest
	10, // 17: eos.remote.BgpPathMgrService.ipv6_unicast_path:input_type -> eos.remote.Ipv6UnicastPathRequest
	12, // 18: eos.remote.BgpPathMgrService.ipv6_unicast_bgp_convergence:input_type -> eos.remote.Ipv6UnicastBgpConvergenceRequest
	1,  // 19: eos.remote.BgpPathMgrService.watch:output_type -> eos.remote.BgpPathWatchResponse
	3,  // 20: eos.remote.BgpPathMgrService.ipv4_unicast_paths:output_type -> eos.remote.Ipv4UnicastPathsResponse
	5,  // 21: eos.remote.BgpPathMgrService.ipv4_unicast_path:output_type -> eos.remote.Ipv4UnicastPathResponse
	7,  // 22: eos.remote.BgpPathMgrService.ipv4_unicast_bgp_convergence:output_type -> eos.remote.Ipv4UnicastBgpConvergenceResponse
	9,  // 23: eos.remote.BgpPathMgrService.ipv6_unicast_paths:output_type -> eos.remote.Ipv6UnicastPathsResponse
	11, // 24: eos.remote.BgpPathMgrService.ipv6_unicast_path:output_type -> eos.remote.Ipv6UnicastPathResponse
	13, // 25: eos.remote.BgpPathMgrService.ipv6_unicast_bgp_convergence:output_type -> eos.remote.Ipv6UnicastBgpConvergenceResponse
	19, // [19:26] is the sub-list for method output_type
	12, // [12:19] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_bgp_path_proto_init() }
func file_bgp_path_proto_init() {
	if File_bgp_path_proto != nil {
		return
	}
	file_bgp_path_types_proto_init()
	file_ip_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bgp_path_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpPathWatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_path_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpPathWatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_path_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv4UnicastPathsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_path_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv4UnicastPathsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_path_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv4UnicastPathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_path_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv4UnicastPathResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_path_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv4UnicastBgpConvergenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_path_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv4UnicastBgpConvergenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_path_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6UnicastPathsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_path_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6UnicastPathsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_path_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6UnicastPathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_path_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6UnicastPathResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_path_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6UnicastBgpConvergenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_path_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ipv6UnicastBgpConvergenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bgp_path_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*BgpPathWatchRequest_AllPaths)(nil),
		(*BgpPathWatchRequest_Ipv4UnicastPaths)(nil),
		(*BgpPathWatchRequest_Ipv6UnicastPaths)(nil),
	}
	file_bgp_path_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*BgpPathWatchResponse_PathKey)(nil),
		(*BgpPathWatchResponse_Converged)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bgp_path_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bgp_path_proto_goTypes,
		DependencyIndexes: file_bgp_path_proto_depIdxs,
		MessageInfos:      file_bgp_path_proto_msgTypes,
	}.Build()
	File_bgp_path_proto = out.File
	file_bgp_path_proto_rawDesc = nil
	file_bgp_path_proto_goTypes = nil
	file_bgp_path_proto_depIdxs = nil
}
