// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: policy_map_counters.proto

package EosSdkRpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PolicyMapCountersOperation int32

const (
	PolicyMapCountersOperation_POLICY_MAP_COUNTERS_UPDATE PolicyMapCountersOperation = 0
	PolicyMapCountersOperation_POLICY_MAP_COUNTERS_DELETE PolicyMapCountersOperation = 1
)

// Enum value maps for PolicyMapCountersOperation.
var (
	PolicyMapCountersOperation_name = map[int32]string{
		0: "POLICY_MAP_COUNTERS_UPDATE",
		1: "POLICY_MAP_COUNTERS_DELETE",
	}
	PolicyMapCountersOperation_value = map[string]int32{
		"POLICY_MAP_COUNTERS_UPDATE": 0,
		"POLICY_MAP_COUNTERS_DELETE": 1,
	}
)

func (x PolicyMapCountersOperation) Enum() *PolicyMapCountersOperation {
	p := new(PolicyMapCountersOperation)
	*p = x
	return p
}

func (x PolicyMapCountersOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyMapCountersOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_policy_map_counters_proto_enumTypes[0].Descriptor()
}

func (PolicyMapCountersOperation) Type() protoreflect.EnumType {
	return &file_policy_map_counters_proto_enumTypes[0]
}

func (x PolicyMapCountersOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyMapCountersOperation.Descriptor instead.
func (PolicyMapCountersOperation) EnumDescriptor() ([]byte, []int) {
	return file_policy_map_counters_proto_rawDescGZIP(), []int{0}
}

type PolicyMapCountersWatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// When set to true, messages will mostly carry a short key that can be
	// mapped to the descriptive key.
	// Disabling compression is not supported, theferefore the default choice
	// for this argument is `true`.
	CompressKeys *bool `protobuf:"varint,1,opt,name=compress_keys,json=compressKeys,proto3,oneof" json:"compress_keys,omitempty"`
}

func (x *PolicyMapCountersWatchRequest) Reset() {
	*x = PolicyMapCountersWatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_counters_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapCountersWatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapCountersWatchRequest) ProtoMessage() {}

func (x *PolicyMapCountersWatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_counters_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapCountersWatchRequest.ProtoReflect.Descriptor instead.
func (*PolicyMapCountersWatchRequest) Descriptor() ([]byte, []int) {
	return file_policy_map_counters_proto_rawDescGZIP(), []int{0}
}

func (x *PolicyMapCountersWatchRequest) GetCompressKeys() bool {
	if x != nil && x.CompressKeys != nil {
		return *x.CompressKeys
	}
	return false
}

type PolicyMapCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is the compressed key allocated by the server
	// if compress_keys is enabled (true), all subsequent counter updates
	// will only provide the key_id
	KeyId uint64 `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// This is compound key. The client is responsible for
	// maintaining the association between key_name and the more efficient key_id
	KeyName      *PolicyMapCountersKey    `protobuf:"bytes,2,opt,name=key_name,json=keyName,proto3" json:"key_name,omitempty"`
	Counters     *PolicyMapRuleCounters   `protobuf:"bytes,3,opt,name=counters,proto3" json:"counters,omitempty"`
	PolicyAction *PolicyMapCountersAction `protobuf:"bytes,4,opt,name=policy_action,json=policyAction,proto3" json:"policy_action,omitempty"`
	// Instructs whether this entry is updating counters or deleting entries from the
	// counter table.
	Operation PolicyMapCountersOperation `protobuf:"varint,5,opt,name=operation,proto3,enum=eos.remote.PolicyMapCountersOperation" json:"operation,omitempty"`
}

func (x *PolicyMapCounters) Reset() {
	*x = PolicyMapCounters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_counters_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapCounters) ProtoMessage() {}

func (x *PolicyMapCounters) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_counters_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapCounters.ProtoReflect.Descriptor instead.
func (*PolicyMapCounters) Descriptor() ([]byte, []int) {
	return file_policy_map_counters_proto_rawDescGZIP(), []int{1}
}

func (x *PolicyMapCounters) GetKeyId() uint64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *PolicyMapCounters) GetKeyName() *PolicyMapCountersKey {
	if x != nil {
		return x.KeyName
	}
	return nil
}

func (x *PolicyMapCounters) GetCounters() *PolicyMapRuleCounters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *PolicyMapCounters) GetPolicyAction() *PolicyMapCountersAction {
	if x != nil {
		return x.PolicyAction
	}
	return nil
}

func (x *PolicyMapCounters) GetOperation() PolicyMapCountersOperation {
	if x != nil {
		return x.Operation
	}
	return PolicyMapCountersOperation_POLICY_MAP_COUNTERS_UPDATE
}

type PolicyMapCountersWatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counters    []*PolicyMapCounters `protobuf:"bytes,1,rep,name=counters,proto3" json:"counters,omitempty"`
	StreamReady bool                 `protobuf:"varint,2,opt,name=stream_ready,json=streamReady,proto3" json:"stream_ready,omitempty"`
}

func (x *PolicyMapCountersWatchResponse) Reset() {
	*x = PolicyMapCountersWatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_counters_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapCountersWatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapCountersWatchResponse) ProtoMessage() {}

func (x *PolicyMapCountersWatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_counters_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapCountersWatchResponse.ProtoReflect.Descriptor instead.
func (*PolicyMapCountersWatchResponse) Descriptor() ([]byte, []int) {
	return file_policy_map_counters_proto_rawDescGZIP(), []int{2}
}

func (x *PolicyMapCountersWatchResponse) GetCounters() []*PolicyMapCounters {
	if x != nil {
		return x.Counters
	}
	return nil
}

func (x *PolicyMapCountersWatchResponse) GetStreamReady() bool {
	if x != nil {
		return x.StreamReady
	}
	return false
}

var File_policy_map_counters_proto protoreflect.FileDescriptor

var file_policy_map_counters_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x1a, 0x1f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5b, 0x0a, 0x1d, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x22, 0xb6, 0x02, 0x0a, 0x11, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4d, 0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x48,
	0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d,
	0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7e,
	0x0a, 0x1e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x39, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x79, 0x2a, 0x5c,
	0x0a, 0x1a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x1a,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x45, 0x52, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x45, 0x52, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x32, 0x93, 0x01, 0x0a,
	0x1b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x4d, 0x67, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x74, 0x0a, 0x19,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x70,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x29, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x42, 0x12, 0x5a, 0x10, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x45, 0x6f, 0x73,
	0x53, 0x64, 0x6b, 0x52, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_policy_map_counters_proto_rawDescOnce sync.Once
	file_policy_map_counters_proto_rawDescData = file_policy_map_counters_proto_rawDesc
)

func file_policy_map_counters_proto_rawDescGZIP() []byte {
	file_policy_map_counters_proto_rawDescOnce.Do(func() {
		file_policy_map_counters_proto_rawDescData = protoimpl.X.CompressGZIP(file_policy_map_counters_proto_rawDescData)
	})
	return file_policy_map_counters_proto_rawDescData
}

var file_policy_map_counters_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_policy_map_counters_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_policy_map_counters_proto_goTypes = []interface{}{
	(PolicyMapCountersOperation)(0),        // 0: eos.remote.PolicyMapCountersOperation
	(*PolicyMapCountersWatchRequest)(nil),  // 1: eos.remote.PolicyMapCountersWatchRequest
	(*PolicyMapCounters)(nil),              // 2: eos.remote.PolicyMapCounters
	(*PolicyMapCountersWatchResponse)(nil), // 3: eos.remote.PolicyMapCountersWatchResponse
	(*PolicyMapCountersKey)(nil),           // 4: eos.remote.PolicyMapCountersKey
	(*PolicyMapRuleCounters)(nil),          // 5: eos.remote.PolicyMapRuleCounters
	(*PolicyMapCountersAction)(nil),        // 6: eos.remote.PolicyMapCountersAction
}
var file_policy_map_counters_proto_depIdxs = []int32{
	4, // 0: eos.remote.PolicyMapCounters.key_name:type_name -> eos.remote.PolicyMapCountersKey
	5, // 1: eos.remote.PolicyMapCounters.counters:type_name -> eos.remote.PolicyMapRuleCounters
	6, // 2: eos.remote.PolicyMapCounters.policy_action:type_name -> eos.remote.PolicyMapCountersAction
	0, // 3: eos.remote.PolicyMapCounters.operation:type_name -> eos.remote.PolicyMapCountersOperation
	2, // 4: eos.remote.PolicyMapCountersWatchResponse.counters:type_name -> eos.remote.PolicyMapCounters
	1, // 5: eos.remote.PolicyMapCountersMgrService.watch_policy_map_counters:input_type -> eos.remote.PolicyMapCountersWatchRequest
	3, // 6: eos.remote.PolicyMapCountersMgrService.watch_policy_map_counters:output_type -> eos.remote.PolicyMapCountersWatchResponse
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_policy_map_counters_proto_init() }
func file_policy_map_counters_proto_init() {
	if File_policy_map_counters_proto != nil {
		return
	}
	file_policy_map_counters_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_policy_map_counters_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapCountersWatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_counters_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapCounters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_counters_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapCountersWatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_policy_map_counters_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_policy_map_counters_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_policy_map_counters_proto_goTypes,
		DependencyIndexes: file_policy_map_counters_proto_depIdxs,
		EnumInfos:         file_policy_map_counters_proto_enumTypes,
		MessageInfos:      file_policy_map_counters_proto_msgTypes,
	}.Build()
	File_policy_map_counters_proto = out.File
	file_policy_map_counters_proto_rawDesc = nil
	file_policy_map_counters_proto_goTypes = nil
	file_policy_map_counters_proto_depIdxs = nil
}
