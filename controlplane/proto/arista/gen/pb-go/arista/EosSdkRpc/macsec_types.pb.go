// Copyright (c) 2021 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: macsec_types.proto

package EosSdkRpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Cipher suites used for MACsec.
type MacsecCipherSuite int32

const (
	MacsecCipherSuite_MACSEC_CIPHER_SUITE_CIPHER_NULL     MacsecCipherSuite = 0
	MacsecCipherSuite_MACSEC_CIPHER_SUITE_GCM_AES_128     MacsecCipherSuite = 1
	MacsecCipherSuite_MACSEC_CIPHER_SUITE_GCM_AES_256     MacsecCipherSuite = 2
	MacsecCipherSuite_MACSEC_CIPHER_SUITE_GCM_AES_XPN_128 MacsecCipherSuite = 3
	MacsecCipherSuite_MACSEC_CIPHER_SUITE_GCM_AES_XPN_256 MacsecCipherSuite = 4
)

// Enum value maps for MacsecCipherSuite.
var (
	MacsecCipherSuite_name = map[int32]string{
		0: "MACSEC_CIPHER_SUITE_CIPHER_NULL",
		1: "MACSEC_CIPHER_SUITE_GCM_AES_128",
		2: "MACSEC_CIPHER_SUITE_GCM_AES_256",
		3: "MACSEC_CIPHER_SUITE_GCM_AES_XPN_128",
		4: "MACSEC_CIPHER_SUITE_GCM_AES_XPN_256",
	}
	MacsecCipherSuite_value = map[string]int32{
		"MACSEC_CIPHER_SUITE_CIPHER_NULL":     0,
		"MACSEC_CIPHER_SUITE_GCM_AES_128":     1,
		"MACSEC_CIPHER_SUITE_GCM_AES_256":     2,
		"MACSEC_CIPHER_SUITE_GCM_AES_XPN_128": 3,
		"MACSEC_CIPHER_SUITE_GCM_AES_XPN_256": 4,
	}
)

func (x MacsecCipherSuite) Enum() *MacsecCipherSuite {
	p := new(MacsecCipherSuite)
	*p = x
	return p
}

func (x MacsecCipherSuite) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MacsecCipherSuite) Descriptor() protoreflect.EnumDescriptor {
	return file_macsec_types_proto_enumTypes[0].Descriptor()
}

func (MacsecCipherSuite) Type() protoreflect.EnumType {
	return &file_macsec_types_proto_enumTypes[0]
}

func (x MacsecCipherSuite) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MacsecCipherSuite.Descriptor instead.
func (MacsecCipherSuite) EnumDescriptor() ([]byte, []int) {
	return file_macsec_types_proto_rawDescGZIP(), []int{0}
}

// *
// Bypass level for a protocol.
type MacsecBypass int32

const (
	MacsecBypass_MACSEC_BYPASS_NULL         MacsecBypass = 0
	MacsecBypass_MACSEC_BYPASS_AUTHORIZED   MacsecBypass = 1
	MacsecBypass_MACSEC_BYPASS_UNAUTHORIZED MacsecBypass = 2
)

// Enum value maps for MacsecBypass.
var (
	MacsecBypass_name = map[int32]string{
		0: "MACSEC_BYPASS_NULL",
		1: "MACSEC_BYPASS_AUTHORIZED",
		2: "MACSEC_BYPASS_UNAUTHORIZED",
	}
	MacsecBypass_value = map[string]int32{
		"MACSEC_BYPASS_NULL":         0,
		"MACSEC_BYPASS_AUTHORIZED":   1,
		"MACSEC_BYPASS_UNAUTHORIZED": 2,
	}
)

func (x MacsecBypass) Enum() *MacsecBypass {
	p := new(MacsecBypass)
	*p = x
	return p
}

func (x MacsecBypass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MacsecBypass) Descriptor() protoreflect.EnumDescriptor {
	return file_macsec_types_proto_enumTypes[1].Descriptor()
}

func (MacsecBypass) Type() protoreflect.EnumType {
	return &file_macsec_types_proto_enumTypes[1]
}

func (x MacsecBypass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MacsecBypass.Descriptor instead.
func (MacsecBypass) EnumDescriptor() ([]byte, []int) {
	return file_macsec_types_proto_rawDescGZIP(), []int{1}
}

// *
// Traffic policy on a profile.
type MacsecProfileTrafficPolicy int32

const (
	MacsecProfileTrafficPolicy_MACSEC_PROFILE_TRAFFIC_POLICY_NULL        MacsecProfileTrafficPolicy = 0
	MacsecProfileTrafficPolicy_MACSEC_PROFILE_TRAFFIC_POLICY_ACTIVE_SAK  MacsecProfileTrafficPolicy = 1
	MacsecProfileTrafficPolicy_MACSEC_PROFILE_TRAFFIC_POLICY_UNPROTECTED MacsecProfileTrafficPolicy = 2
	MacsecProfileTrafficPolicy_MACSEC_PROFILE_TRAFFIC_POLICY_BLOCKED     MacsecProfileTrafficPolicy = 3
)

// Enum value maps for MacsecProfileTrafficPolicy.
var (
	MacsecProfileTrafficPolicy_name = map[int32]string{
		0: "MACSEC_PROFILE_TRAFFIC_POLICY_NULL",
		1: "MACSEC_PROFILE_TRAFFIC_POLICY_ACTIVE_SAK",
		2: "MACSEC_PROFILE_TRAFFIC_POLICY_UNPROTECTED",
		3: "MACSEC_PROFILE_TRAFFIC_POLICY_BLOCKED",
	}
	MacsecProfileTrafficPolicy_value = map[string]int32{
		"MACSEC_PROFILE_TRAFFIC_POLICY_NULL":        0,
		"MACSEC_PROFILE_TRAFFIC_POLICY_ACTIVE_SAK":  1,
		"MACSEC_PROFILE_TRAFFIC_POLICY_UNPROTECTED": 2,
		"MACSEC_PROFILE_TRAFFIC_POLICY_BLOCKED":     3,
	}
)

func (x MacsecProfileTrafficPolicy) Enum() *MacsecProfileTrafficPolicy {
	p := new(MacsecProfileTrafficPolicy)
	*p = x
	return p
}

func (x MacsecProfileTrafficPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MacsecProfileTrafficPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_macsec_types_proto_enumTypes[2].Descriptor()
}

func (MacsecProfileTrafficPolicy) Type() protoreflect.EnumType {
	return &file_macsec_types_proto_enumTypes[2]
}

func (x MacsecProfileTrafficPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MacsecProfileTrafficPolicy.Descriptor instead.
func (MacsecProfileTrafficPolicy) EnumDescriptor() ([]byte, []int) {
	return file_macsec_types_proto_rawDescGZIP(), []int{2}
}

// *
// Which key an interface is using if a profile is configured.
type MacsecIntfKeyStatus int32

const (
	MacsecIntfKeyStatus_MACSEC_INTF_KEY_INVALID         MacsecIntfKeyStatus = 0
	MacsecIntfKeyStatus_MACSEC_INTF_KEY_NO_PROFILE      MacsecIntfKeyStatus = 1
	MacsecIntfKeyStatus_MACSEC_INTF_KEY_NONE            MacsecIntfKeyStatus = 2
	MacsecIntfKeyStatus_MACSEC_INTF_KEY_PRIMARY         MacsecIntfKeyStatus = 3
	MacsecIntfKeyStatus_MACSEC_INTF_KEY_FALLBACK        MacsecIntfKeyStatus = 4
	MacsecIntfKeyStatus_MACSEC_INTF_KEY_PRIMARY_CACHED  MacsecIntfKeyStatus = 5
	MacsecIntfKeyStatus_MACSEC_INTF_KEY_FALLBACK_CACHED MacsecIntfKeyStatus = 6
)

// Enum value maps for MacsecIntfKeyStatus.
var (
	MacsecIntfKeyStatus_name = map[int32]string{
		0: "MACSEC_INTF_KEY_INVALID",
		1: "MACSEC_INTF_KEY_NO_PROFILE",
		2: "MACSEC_INTF_KEY_NONE",
		3: "MACSEC_INTF_KEY_PRIMARY",
		4: "MACSEC_INTF_KEY_FALLBACK",
		5: "MACSEC_INTF_KEY_PRIMARY_CACHED",
		6: "MACSEC_INTF_KEY_FALLBACK_CACHED",
	}
	MacsecIntfKeyStatus_value = map[string]int32{
		"MACSEC_INTF_KEY_INVALID":         0,
		"MACSEC_INTF_KEY_NO_PROFILE":      1,
		"MACSEC_INTF_KEY_NONE":            2,
		"MACSEC_INTF_KEY_PRIMARY":         3,
		"MACSEC_INTF_KEY_FALLBACK":        4,
		"MACSEC_INTF_KEY_PRIMARY_CACHED":  5,
		"MACSEC_INTF_KEY_FALLBACK_CACHED": 6,
	}
)

func (x MacsecIntfKeyStatus) Enum() *MacsecIntfKeyStatus {
	p := new(MacsecIntfKeyStatus)
	*p = x
	return p
}

func (x MacsecIntfKeyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MacsecIntfKeyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_macsec_types_proto_enumTypes[3].Descriptor()
}

func (MacsecIntfKeyStatus) Type() protoreflect.EnumType {
	return &file_macsec_types_proto_enumTypes[3]
}

func (x MacsecIntfKeyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MacsecIntfKeyStatus.Descriptor instead.
func (MacsecIntfKeyStatus) EnumDescriptor() ([]byte, []int) {
	return file_macsec_types_proto_rawDescGZIP(), []int{3}
}

// *
// Traffic status on an interface.
type MacsecIntfTrafficStatus int32

const (
	MacsecIntfTrafficStatus_MACSEC_INTF_TRAFFIC_INVALID     MacsecIntfTrafficStatus = 0
	MacsecIntfTrafficStatus_MACSEC_INTF_TRAFFIC_PROTECTED   MacsecIntfTrafficStatus = 1
	MacsecIntfTrafficStatus_MACSEC_INTF_TRAFFIC_UNPROTECTED MacsecIntfTrafficStatus = 2
	MacsecIntfTrafficStatus_MACSEC_INTF_TRAFFIC_BLOCKED     MacsecIntfTrafficStatus = 3
)

// Enum value maps for MacsecIntfTrafficStatus.
var (
	MacsecIntfTrafficStatus_name = map[int32]string{
		0: "MACSEC_INTF_TRAFFIC_INVALID",
		1: "MACSEC_INTF_TRAFFIC_PROTECTED",
		2: "MACSEC_INTF_TRAFFIC_UNPROTECTED",
		3: "MACSEC_INTF_TRAFFIC_BLOCKED",
	}
	MacsecIntfTrafficStatus_value = map[string]int32{
		"MACSEC_INTF_TRAFFIC_INVALID":     0,
		"MACSEC_INTF_TRAFFIC_PROTECTED":   1,
		"MACSEC_INTF_TRAFFIC_UNPROTECTED": 2,
		"MACSEC_INTF_TRAFFIC_BLOCKED":     3,
	}
)

func (x MacsecIntfTrafficStatus) Enum() *MacsecIntfTrafficStatus {
	p := new(MacsecIntfTrafficStatus)
	*p = x
	return p
}

func (x MacsecIntfTrafficStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MacsecIntfTrafficStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_macsec_types_proto_enumTypes[4].Descriptor()
}

func (MacsecIntfTrafficStatus) Type() protoreflect.EnumType {
	return &file_macsec_types_proto_enumTypes[4]
}

func (x MacsecIntfTrafficStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MacsecIntfTrafficStatus.Descriptor instead.
func (MacsecIntfTrafficStatus) EnumDescriptor() ([]byte, []int) {
	return file_macsec_types_proto_rawDescGZIP(), []int{4}
}

type MacsecIntfStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyStatus     MacsecIntfKeyStatus     `protobuf:"varint,1,opt,name=key_status,json=keyStatus,proto3,enum=eos.remote.MacsecIntfKeyStatus" json:"key_status,omitempty"`
	TrafficStatus MacsecIntfTrafficStatus `protobuf:"varint,2,opt,name=traffic_status,json=trafficStatus,proto3,enum=eos.remote.MacsecIntfTrafficStatus" json:"traffic_status,omitempty"`
}

func (x *MacsecIntfStatus) Reset() {
	*x = MacsecIntfStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecIntfStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecIntfStatus) ProtoMessage() {}

func (x *MacsecIntfStatus) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecIntfStatus.ProtoReflect.Descriptor instead.
func (*MacsecIntfStatus) Descriptor() ([]byte, []int) {
	return file_macsec_types_proto_rawDescGZIP(), []int{0}
}

func (x *MacsecIntfStatus) GetKeyStatus() MacsecIntfKeyStatus {
	if x != nil {
		return x.KeyStatus
	}
	return MacsecIntfKeyStatus_MACSEC_INTF_KEY_INVALID
}

func (x *MacsecIntfStatus) GetTrafficStatus() MacsecIntfTrafficStatus {
	if x != nil {
		return x.TrafficStatus
	}
	return MacsecIntfTrafficStatus_MACSEC_INTF_TRAFFIC_INVALID
}

type MacsecIntfCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutPktsEncrypted   uint64 `protobuf:"varint,1,opt,name=out_pkts_encrypted,json=outPktsEncrypted,proto3" json:"out_pkts_encrypted,omitempty"`
	OutOctetsEncrypted uint64 `protobuf:"varint,2,opt,name=out_octets_encrypted,json=outOctetsEncrypted,proto3" json:"out_octets_encrypted,omitempty"`
	InPktsDecrypted    uint64 `protobuf:"varint,3,opt,name=in_pkts_decrypted,json=inPktsDecrypted,proto3" json:"in_pkts_decrypted,omitempty"`
	InOctetsDecrypted  uint64 `protobuf:"varint,4,opt,name=in_octets_decrypted,json=inOctetsDecrypted,proto3" json:"in_octets_decrypted,omitempty"`
	InPktsNotValid     uint64 `protobuf:"varint,5,opt,name=in_pkts_not_valid,json=inPktsNotValid,proto3" json:"in_pkts_not_valid,omitempty"`
}

func (x *MacsecIntfCounters) Reset() {
	*x = MacsecIntfCounters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecIntfCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecIntfCounters) ProtoMessage() {}

func (x *MacsecIntfCounters) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecIntfCounters.ProtoReflect.Descriptor instead.
func (*MacsecIntfCounters) Descriptor() ([]byte, []int) {
	return file_macsec_types_proto_rawDescGZIP(), []int{1}
}

func (x *MacsecIntfCounters) GetOutPktsEncrypted() uint64 {
	if x != nil {
		return x.OutPktsEncrypted
	}
	return 0
}

func (x *MacsecIntfCounters) GetOutOctetsEncrypted() uint64 {
	if x != nil {
		return x.OutOctetsEncrypted
	}
	return 0
}

func (x *MacsecIntfCounters) GetInPktsDecrypted() uint64 {
	if x != nil {
		return x.InPktsDecrypted
	}
	return 0
}

func (x *MacsecIntfCounters) GetInOctetsDecrypted() uint64 {
	if x != nil {
		return x.InOctetsDecrypted
	}
	return 0
}

func (x *MacsecIntfCounters) GetInPktsNotValid() uint64 {
	if x != nil {
		return x.InPktsNotValid
	}
	return 0
}

type MacsecProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileName string     `protobuf:"bytes,1,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
	PrimaryKey  *MacsecKey `protobuf:"bytes,2,opt,name=primary_key,json=primaryKey,proto3" json:"primary_key,omitempty"`
	FallbackKey *MacsecKey `protobuf:"bytes,3,opt,name=fallback_key,json=fallbackKey,proto3" json:"fallback_key,omitempty"`
	// Types that are assignable to KeyServerPriorityPresent:
	//
	//	*MacsecProfile_KeyServerPriority
	KeyServerPriorityPresent isMacsecProfile_KeyServerPriorityPresent `protobuf_oneof:"key_server_priority_present"`
	RekeyPeriod              uint32                                   `protobuf:"varint,5,opt,name=rekey_period,json=rekeyPeriod,proto3" json:"rekey_period,omitempty"`
	// Types that are assignable to MkaLifeTimePresent:
	//
	//	*MacsecProfile_MkaLifeTime
	MkaLifeTimePresent isMacsecProfile_MkaLifeTimePresent `protobuf_oneof:"mka_life_time_present"`
	// Types that are assignable to CipherPresent:
	//
	//	*MacsecProfile_Cipher
	CipherPresent isMacsecProfile_CipherPresent `protobuf_oneof:"cipher_present"`
	Dot1X         bool                          `protobuf:"varint,8,opt,name=dot1x,proto3" json:"dot1x,omitempty"`
	IncludeSci    bool                          `protobuf:"varint,9,opt,name=include_sci,json=includeSci,proto3" json:"include_sci,omitempty"`
	// The field bypass_lldp is for reading back only. Setting it has no effect.
	// Please use lldp_bypass_level instead.
	BypassLldp      bool         `protobuf:"varint,10,opt,name=bypass_lldp,json=bypassLldp,proto3" json:"bypass_lldp,omitempty"`
	LldpBypassLevel MacsecBypass `protobuf:"varint,11,opt,name=lldp_bypass_level,json=lldpBypassLevel,proto3,enum=eos.remote.MacsecBypass" json:"lldp_bypass_level,omitempty"`
	// Types that are assignable to TrafficPolicyPresent:
	//
	//	*MacsecProfile_TrafficPolicy
	TrafficPolicyPresent isMacsecProfile_TrafficPolicyPresent `protobuf_oneof:"traffic_policy_present"`
	// Deprecated. Please use traffic_policy instead.
	// Only used if traffic_policy_present is not set.
	AllowUnprotected bool `protobuf:"varint,13,opt,name=allow_unprotected,json=allowUnprotected,proto3" json:"allow_unprotected,omitempty"`
	// Types that are assignable to ReplayProtectionPresent:
	//
	//	*MacsecProfile_ReplayProtection
	ReplayProtectionPresent isMacsecProfile_ReplayProtectionPresent `protobuf_oneof:"replay_protection_present"`
	ReplayProtectionWindow  uint32                                  `protobuf:"varint,15,opt,name=replay_protection_window,json=replayProtectionWindow,proto3" json:"replay_protection_window,omitempty"`
	KeyRetirementImmediate  bool                                    `protobuf:"varint,16,opt,name=key_retirement_immediate,json=keyRetirementImmediate,proto3" json:"key_retirement_immediate,omitempty"`
	// For reading back only. Setting it has no effect.
	IntfIds []*IntfId `protobuf:"bytes,17,rep,name=intf_ids,json=intfIds,proto3" json:"intf_ids,omitempty"`
}

func (x *MacsecProfile) Reset() {
	*x = MacsecProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecProfile) ProtoMessage() {}

func (x *MacsecProfile) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecProfile.ProtoReflect.Descriptor instead.
func (*MacsecProfile) Descriptor() ([]byte, []int) {
	return file_macsec_types_proto_rawDescGZIP(), []int{2}
}

func (x *MacsecProfile) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *MacsecProfile) GetPrimaryKey() *MacsecKey {
	if x != nil {
		return x.PrimaryKey
	}
	return nil
}

func (x *MacsecProfile) GetFallbackKey() *MacsecKey {
	if x != nil {
		return x.FallbackKey
	}
	return nil
}

func (m *MacsecProfile) GetKeyServerPriorityPresent() isMacsecProfile_KeyServerPriorityPresent {
	if m != nil {
		return m.KeyServerPriorityPresent
	}
	return nil
}

func (x *MacsecProfile) GetKeyServerPriority() uint32 {
	if x, ok := x.GetKeyServerPriorityPresent().(*MacsecProfile_KeyServerPriority); ok {
		return x.KeyServerPriority
	}
	return 0
}

func (x *MacsecProfile) GetRekeyPeriod() uint32 {
	if x != nil {
		return x.RekeyPeriod
	}
	return 0
}

func (m *MacsecProfile) GetMkaLifeTimePresent() isMacsecProfile_MkaLifeTimePresent {
	if m != nil {
		return m.MkaLifeTimePresent
	}
	return nil
}

func (x *MacsecProfile) GetMkaLifeTime() uint32 {
	if x, ok := x.GetMkaLifeTimePresent().(*MacsecProfile_MkaLifeTime); ok {
		return x.MkaLifeTime
	}
	return 0
}

func (m *MacsecProfile) GetCipherPresent() isMacsecProfile_CipherPresent {
	if m != nil {
		return m.CipherPresent
	}
	return nil
}

func (x *MacsecProfile) GetCipher() MacsecCipherSuite {
	if x, ok := x.GetCipherPresent().(*MacsecProfile_Cipher); ok {
		return x.Cipher
	}
	return MacsecCipherSuite_MACSEC_CIPHER_SUITE_CIPHER_NULL
}

func (x *MacsecProfile) GetDot1X() bool {
	if x != nil {
		return x.Dot1X
	}
	return false
}

func (x *MacsecProfile) GetIncludeSci() bool {
	if x != nil {
		return x.IncludeSci
	}
	return false
}

func (x *MacsecProfile) GetBypassLldp() bool {
	if x != nil {
		return x.BypassLldp
	}
	return false
}

func (x *MacsecProfile) GetLldpBypassLevel() MacsecBypass {
	if x != nil {
		return x.LldpBypassLevel
	}
	return MacsecBypass_MACSEC_BYPASS_NULL
}

func (m *MacsecProfile) GetTrafficPolicyPresent() isMacsecProfile_TrafficPolicyPresent {
	if m != nil {
		return m.TrafficPolicyPresent
	}
	return nil
}

func (x *MacsecProfile) GetTrafficPolicy() MacsecProfileTrafficPolicy {
	if x, ok := x.GetTrafficPolicyPresent().(*MacsecProfile_TrafficPolicy); ok {
		return x.TrafficPolicy
	}
	return MacsecProfileTrafficPolicy_MACSEC_PROFILE_TRAFFIC_POLICY_NULL
}

func (x *MacsecProfile) GetAllowUnprotected() bool {
	if x != nil {
		return x.AllowUnprotected
	}
	return false
}

func (m *MacsecProfile) GetReplayProtectionPresent() isMacsecProfile_ReplayProtectionPresent {
	if m != nil {
		return m.ReplayProtectionPresent
	}
	return nil
}

func (x *MacsecProfile) GetReplayProtection() bool {
	if x, ok := x.GetReplayProtectionPresent().(*MacsecProfile_ReplayProtection); ok {
		return x.ReplayProtection
	}
	return false
}

func (x *MacsecProfile) GetReplayProtectionWindow() uint32 {
	if x != nil {
		return x.ReplayProtectionWindow
	}
	return 0
}

func (x *MacsecProfile) GetKeyRetirementImmediate() bool {
	if x != nil {
		return x.KeyRetirementImmediate
	}
	return false
}

func (x *MacsecProfile) GetIntfIds() []*IntfId {
	if x != nil {
		return x.IntfIds
	}
	return nil
}

type isMacsecProfile_KeyServerPriorityPresent interface {
	isMacsecProfile_KeyServerPriorityPresent()
}

type MacsecProfile_KeyServerPriority struct {
	// Default value is 16.
	KeyServerPriority uint32 `protobuf:"varint,4,opt,name=key_server_priority,json=keyServerPriority,proto3,oneof"`
}

func (*MacsecProfile_KeyServerPriority) isMacsecProfile_KeyServerPriorityPresent() {}

type isMacsecProfile_MkaLifeTimePresent interface {
	isMacsecProfile_MkaLifeTimePresent()
}

type MacsecProfile_MkaLifeTime struct {
	// Default value is 6.
	MkaLifeTime uint32 `protobuf:"varint,6,opt,name=mka_life_time,json=mkaLifeTime,proto3,oneof"`
}

func (*MacsecProfile_MkaLifeTime) isMacsecProfile_MkaLifeTimePresent() {}

type isMacsecProfile_CipherPresent interface {
	isMacsecProfile_CipherPresent()
}

type MacsecProfile_Cipher struct {
	// Default value is GCM_AES_XPN_128.
	Cipher MacsecCipherSuite `protobuf:"varint,7,opt,name=cipher,proto3,enum=eos.remote.MacsecCipherSuite,oneof"`
}

func (*MacsecProfile_Cipher) isMacsecProfile_CipherPresent() {}

type isMacsecProfile_TrafficPolicyPresent interface {
	isMacsecProfile_TrafficPolicyPresent()
}

type MacsecProfile_TrafficPolicy struct {
	// Default value is TRAFFIC_POLICY_ACTIVE_SAK.
	TrafficPolicy MacsecProfileTrafficPolicy `protobuf:"varint,12,opt,name=traffic_policy,json=trafficPolicy,proto3,enum=eos.remote.MacsecProfileTrafficPolicy,oneof"`
}

func (*MacsecProfile_TrafficPolicy) isMacsecProfile_TrafficPolicyPresent() {}

type isMacsecProfile_ReplayProtectionPresent interface {
	isMacsecProfile_ReplayProtectionPresent()
}

type MacsecProfile_ReplayProtection struct {
	// Default value is True.
	ReplayProtection bool `protobuf:"varint,14,opt,name=replay_protection,json=replayProtection,proto3,oneof"`
}

func (*MacsecProfile_ReplayProtection) isMacsecProfile_ReplayProtectionPresent() {}

type MacsecKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cak     string `protobuf:"bytes,1,opt,name=cak,proto3" json:"cak,omitempty"`
	Ckn     string `protobuf:"bytes,2,opt,name=ckn,proto3" json:"ckn,omitempty"`
	Encoded bool   `protobuf:"varint,3,opt,name=encoded,proto3" json:"encoded,omitempty"`
}

func (x *MacsecKey) Reset() {
	*x = MacsecKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecKey) ProtoMessage() {}

func (x *MacsecKey) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecKey.ProtoReflect.Descriptor instead.
func (*MacsecKey) Descriptor() ([]byte, []int) {
	return file_macsec_types_proto_rawDescGZIP(), []int{3}
}

func (x *MacsecKey) GetCak() string {
	if x != nil {
		return x.Cak
	}
	return ""
}

func (x *MacsecKey) GetCkn() string {
	if x != nil {
		return x.Ckn
	}
	return ""
}

func (x *MacsecKey) GetEncoded() bool {
	if x != nil {
		return x.Encoded
	}
	return false
}

var File_macsec_types_proto protoreflect.FileDescriptor

var file_macsec_types_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x1a, 0x10, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x9e, 0x01, 0x0a, 0x10, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x49, 0x6e, 0x74,
	0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x49,
	0x6e, 0x74, 0x66, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x6b, 0x65,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x66, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xfb, 0x01, 0x0a, 0x12, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x49, 0x6e,
	0x74, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x75,
	0x74, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x50, 0x6b, 0x74, 0x73, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6f, 0x75, 0x74, 0x5f,
	0x6f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6f, 0x75, 0x74, 0x4f, 0x63, 0x74, 0x65, 0x74,
	0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e,
	0x5f, 0x70, 0x6b, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x69, 0x6e, 0x50, 0x6b, 0x74, 0x73, 0x44, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x5f, 0x6f, 0x63, 0x74,
	0x65, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x69, 0x6e, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x73, 0x44, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x69, 0x6e, 0x5f, 0x70, 0x6b, 0x74,
	0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x69, 0x6e, 0x50, 0x6b, 0x74, 0x73, 0x4e, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x22, 0xc7, 0x07, 0x0a, 0x0d, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x4b,
	0x65, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x38,
	0x0a, 0x0c, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x66, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x6b, 0x65, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x11, 0x6b, 0x65, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x6b, 0x65, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x72, 0x65, 0x6b, 0x65, 0x79, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x6d, 0x6b, 0x61, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0b, 0x6d, 0x6b, 0x61, 0x4c, 0x69, 0x66, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69,
	0x74, 0x65, 0x48, 0x02, 0x52, 0x06, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x6f, 0x74, 0x31, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x6f, 0x74,
	0x31, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x63,
	0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x53, 0x63, 0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x6c, 0x6c,
	0x64, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73,
	0x4c, 0x6c, 0x64, 0x70, 0x12, 0x44, 0x0a, 0x11, 0x6c, 0x6c, 0x64, 0x70, 0x5f, 0x62, 0x79, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x52, 0x0f, 0x6c, 0x6c, 0x64, 0x70, 0x42,
	0x79, 0x70, 0x61, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x4f, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x03, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x75, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x12, 0x38, 0x0a, 0x18, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x74, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x16, 0x6b, 0x65, 0x79, 0x52, 0x65, 0x74, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66, 0x49,
	0x64, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x73, 0x42, 0x1d, 0x0a, 0x1b, 0x6b, 0x65,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x6d, 0x6b, 0x61,
	0x5f, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x1b,
	0x0a, 0x19, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x22, 0x49, 0x0a, 0x09, 0x4d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x61, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x61, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6b,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6b, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x2a, 0xd4, 0x01, 0x0a, 0x11, 0x4d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x1f,
	0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x55,
	0x49, 0x54, 0x45, 0x5f, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10,
	0x00, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x43, 0x49, 0x50, 0x48,
	0x45, 0x52, 0x5f, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x41, 0x45, 0x53,
	0x5f, 0x31, 0x32, 0x38, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43,
	0x5f, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x47, 0x43,
	0x4d, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x4d,
	0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x49,
	0x54, 0x45, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x58, 0x50, 0x4e, 0x5f, 0x31,
	0x32, 0x38, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x43,
	0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x47, 0x43, 0x4d, 0x5f,
	0x41, 0x45, 0x53, 0x5f, 0x58, 0x50, 0x4e, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x04, 0x2a, 0x64, 0x0a,
	0x0c, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x12, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x42, 0x59, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x4e,
	0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f,
	0x42, 0x59, 0x50, 0x41, 0x53, 0x53, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x42, 0x59,
	0x50, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x02, 0x2a, 0xcc, 0x01, 0x0a, 0x1a, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x4d, 0x41,
	0x43, 0x53, 0x45, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41,
	0x46, 0x46, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x53, 0x41, 0x4b, 0x10, 0x01, 0x12, 0x2d, 0x0a, 0x29, 0x4d, 0x41, 0x43, 0x53,
	0x45, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46,
	0x49, 0x43, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x50, 0x52, 0x4f, 0x54,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x4d, 0x41, 0x43, 0x53, 0x45,
	0x43, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49,
	0x43, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x10, 0x03, 0x2a, 0xf0, 0x01, 0x0a, 0x13, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x49, 0x6e, 0x74,
	0x66, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41,
	0x43, 0x53, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x43, 0x53, 0x45,
	0x43, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x52,
	0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x43, 0x53, 0x45,
	0x43, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x02, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x54, 0x46,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x03, 0x12, 0x1c,
	0x0a, 0x18, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x4b, 0x45,
	0x59, 0x5f, 0x46, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e,
	0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x05,
	0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f,
	0x4b, 0x45, 0x59, 0x5f, 0x46, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x41, 0x43,
	0x48, 0x45, 0x44, 0x10, 0x06, 0x2a, 0xa3, 0x01, 0x0a, 0x17, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x49, 0x6e, 0x74, 0x66, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x54, 0x46,
	0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x54,
	0x46, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x43, 0x53, 0x45, 0x43, 0x5f,
	0x49, 0x4e, 0x54, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x55, 0x4e, 0x50,
	0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41,
	0x43, 0x53, 0x45, 0x43, 0x5f, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49,
	0x43, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x42, 0x12, 0x5a, 0x10, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x45, 0x6f, 0x73, 0x53, 0x64, 0x6b, 0x52, 0x70, 0x63, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_macsec_types_proto_rawDescOnce sync.Once
	file_macsec_types_proto_rawDescData = file_macsec_types_proto_rawDesc
)

func file_macsec_types_proto_rawDescGZIP() []byte {
	file_macsec_types_proto_rawDescOnce.Do(func() {
		file_macsec_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_macsec_types_proto_rawDescData)
	})
	return file_macsec_types_proto_rawDescData
}

var file_macsec_types_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_macsec_types_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_macsec_types_proto_goTypes = []interface{}{
	(MacsecCipherSuite)(0),          // 0: eos.remote.MacsecCipherSuite
	(MacsecBypass)(0),               // 1: eos.remote.MacsecBypass
	(MacsecProfileTrafficPolicy)(0), // 2: eos.remote.MacsecProfileTrafficPolicy
	(MacsecIntfKeyStatus)(0),        // 3: eos.remote.MacsecIntfKeyStatus
	(MacsecIntfTrafficStatus)(0),    // 4: eos.remote.MacsecIntfTrafficStatus
	(*MacsecIntfStatus)(nil),        // 5: eos.remote.MacsecIntfStatus
	(*MacsecIntfCounters)(nil),      // 6: eos.remote.MacsecIntfCounters
	(*MacsecProfile)(nil),           // 7: eos.remote.MacsecProfile
	(*MacsecKey)(nil),               // 8: eos.remote.MacsecKey
	(*IntfId)(nil),                  // 9: eos.remote.IntfId
}
var file_macsec_types_proto_depIdxs = []int32{
	3, // 0: eos.remote.MacsecIntfStatus.key_status:type_name -> eos.remote.MacsecIntfKeyStatus
	4, // 1: eos.remote.MacsecIntfStatus.traffic_status:type_name -> eos.remote.MacsecIntfTrafficStatus
	8, // 2: eos.remote.MacsecProfile.primary_key:type_name -> eos.remote.MacsecKey
	8, // 3: eos.remote.MacsecProfile.fallback_key:type_name -> eos.remote.MacsecKey
	0, // 4: eos.remote.MacsecProfile.cipher:type_name -> eos.remote.MacsecCipherSuite
	1, // 5: eos.remote.MacsecProfile.lldp_bypass_level:type_name -> eos.remote.MacsecBypass
	2, // 6: eos.remote.MacsecProfile.traffic_policy:type_name -> eos.remote.MacsecProfileTrafficPolicy
	9, // 7: eos.remote.MacsecProfile.intf_ids:type_name -> eos.remote.IntfId
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_macsec_types_proto_init() }
func file_macsec_types_proto_init() {
	if File_macsec_types_proto != nil {
		return
	}
	file_intf_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_macsec_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecIntfStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecIntfCounters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_macsec_types_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*MacsecProfile_KeyServerPriority)(nil),
		(*MacsecProfile_MkaLifeTime)(nil),
		(*MacsecProfile_Cipher)(nil),
		(*MacsecProfile_TrafficPolicy)(nil),
		(*MacsecProfile_ReplayProtection)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_macsec_types_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_macsec_types_proto_goTypes,
		DependencyIndexes: file_macsec_types_proto_depIdxs,
		EnumInfos:         file_macsec_types_proto_enumTypes,
		MessageInfos:      file_macsec_types_proto_msgTypes,
	}.Build()
	File_macsec_types_proto = out.File
	file_macsec_types_proto_rawDesc = nil
	file_macsec_types_proto_goTypes = nil
	file_macsec_types_proto_depIdxs = nil
}
