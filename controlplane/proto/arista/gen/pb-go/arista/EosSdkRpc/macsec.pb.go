// Copyright (c) 2021 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: macsec.proto

package EosSdkRpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MacsecWatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Overloads:
	//
	//	*MacsecWatchRequest_AllIntfs
	//	*MacsecWatchRequest_IntfId
	Overloads isMacsecWatchRequest_Overloads `protobuf_oneof:"overloads"`
	Ack       bool                           `protobuf:"varint,3,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (x *MacsecWatchRequest) Reset() {
	*x = MacsecWatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecWatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecWatchRequest) ProtoMessage() {}

func (x *MacsecWatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecWatchRequest.ProtoReflect.Descriptor instead.
func (*MacsecWatchRequest) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{0}
}

func (m *MacsecWatchRequest) GetOverloads() isMacsecWatchRequest_Overloads {
	if m != nil {
		return m.Overloads
	}
	return nil
}

func (x *MacsecWatchRequest) GetAllIntfs() bool {
	if x, ok := x.GetOverloads().(*MacsecWatchRequest_AllIntfs); ok {
		return x.AllIntfs
	}
	return false
}

func (x *MacsecWatchRequest) GetIntfId() *IntfId {
	if x, ok := x.GetOverloads().(*MacsecWatchRequest_IntfId); ok {
		return x.IntfId
	}
	return nil
}

func (x *MacsecWatchRequest) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

type isMacsecWatchRequest_Overloads interface {
	isMacsecWatchRequest_Overloads()
}

type MacsecWatchRequest_AllIntfs struct {
	AllIntfs bool `protobuf:"varint,1,opt,name=all_intfs,json=allIntfs,proto3,oneof"`
}

type MacsecWatchRequest_IntfId struct {
	IntfId *IntfId `protobuf:"bytes,2,opt,name=intf_id,json=intfId,proto3,oneof"`
}

func (*MacsecWatchRequest_AllIntfs) isMacsecWatchRequest_Overloads() {}

func (*MacsecWatchRequest_IntfId) isMacsecWatchRequest_Overloads() {}

type MacsecWatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntfId *IntfId           `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
	Status *MacsecIntfStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Ack    bool              `protobuf:"varint,3,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (x *MacsecWatchResponse) Reset() {
	*x = MacsecWatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecWatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecWatchResponse) ProtoMessage() {}

func (x *MacsecWatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecWatchResponse.ProtoReflect.Descriptor instead.
func (*MacsecWatchResponse) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{1}
}

func (x *MacsecWatchResponse) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

func (x *MacsecWatchResponse) GetStatus() *MacsecIntfStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MacsecWatchResponse) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

type MacsecExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileName string `protobuf:"bytes,1,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
}

func (x *MacsecExistsRequest) Reset() {
	*x = MacsecExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecExistsRequest) ProtoMessage() {}

func (x *MacsecExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecExistsRequest.ProtoReflect.Descriptor instead.
func (*MacsecExistsRequest) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{2}
}

func (x *MacsecExistsRequest) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

type MacsecExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *MacsecExistsResponse) Reset() {
	*x = MacsecExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecExistsResponse) ProtoMessage() {}

func (x *MacsecExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecExistsResponse.ProtoReflect.Descriptor instead.
func (*MacsecExistsResponse) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{3}
}

func (x *MacsecExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type MacsecProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileName string `protobuf:"bytes,1,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
}

func (x *MacsecProfileRequest) Reset() {
	*x = MacsecProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecProfileRequest) ProtoMessage() {}

func (x *MacsecProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecProfileRequest.ProtoReflect.Descriptor instead.
func (*MacsecProfileRequest) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{4}
}

func (x *MacsecProfileRequest) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

type MacsecProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *MacsecProfile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *MacsecProfileResponse) Reset() {
	*x = MacsecProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecProfileResponse) ProtoMessage() {}

func (x *MacsecProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecProfileResponse.ProtoReflect.Descriptor instead.
func (*MacsecProfileResponse) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{5}
}

func (x *MacsecProfileResponse) GetProfile() *MacsecProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

type MacsecProfileSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Profile *MacsecProfile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *MacsecProfileSetRequest) Reset() {
	*x = MacsecProfileSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecProfileSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecProfileSetRequest) ProtoMessage() {}

func (x *MacsecProfileSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecProfileSetRequest.ProtoReflect.Descriptor instead.
func (*MacsecProfileSetRequest) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{6}
}

func (x *MacsecProfileSetRequest) GetProfile() *MacsecProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

type MacsecProfileSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseStatus *RpcResponseStatus `protobuf:"bytes,1,opt,name=response_status,json=responseStatus,proto3" json:"response_status,omitempty"`
}

func (x *MacsecProfileSetResponse) Reset() {
	*x = MacsecProfileSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecProfileSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecProfileSetResponse) ProtoMessage() {}

func (x *MacsecProfileSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecProfileSetResponse.ProtoReflect.Descriptor instead.
func (*MacsecProfileSetResponse) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{7}
}

func (x *MacsecProfileSetResponse) GetResponseStatus() *RpcResponseStatus {
	if x != nil {
		return x.ResponseStatus
	}
	return nil
}

type BulkMacsecProfileSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*MacsecProfileSetRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkMacsecProfileSetRequest) Reset() {
	*x = BulkMacsecProfileSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkMacsecProfileSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkMacsecProfileSetRequest) ProtoMessage() {}

func (x *BulkMacsecProfileSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkMacsecProfileSetRequest.ProtoReflect.Descriptor instead.
func (*BulkMacsecProfileSetRequest) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{8}
}

func (x *BulkMacsecProfileSetRequest) GetRequests() []*MacsecProfileSetRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BulkMacsecProfileSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processed uint64             `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	Status    *RpcResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BulkMacsecProfileSetResponse) Reset() {
	*x = BulkMacsecProfileSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkMacsecProfileSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkMacsecProfileSetResponse) ProtoMessage() {}

func (x *BulkMacsecProfileSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkMacsecProfileSetResponse.ProtoReflect.Descriptor instead.
func (*BulkMacsecProfileSetResponse) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{9}
}

func (x *BulkMacsecProfileSetResponse) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *BulkMacsecProfileSetResponse) GetStatus() *RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type MacsecProfileDelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileName string `protobuf:"bytes,1,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
}

func (x *MacsecProfileDelRequest) Reset() {
	*x = MacsecProfileDelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecProfileDelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecProfileDelRequest) ProtoMessage() {}

func (x *MacsecProfileDelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecProfileDelRequest.ProtoReflect.Descriptor instead.
func (*MacsecProfileDelRequest) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{10}
}

func (x *MacsecProfileDelRequest) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

type MacsecProfileDelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MacsecProfileDelResponse) Reset() {
	*x = MacsecProfileDelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecProfileDelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecProfileDelResponse) ProtoMessage() {}

func (x *MacsecProfileDelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecProfileDelResponse.ProtoReflect.Descriptor instead.
func (*MacsecProfileDelResponse) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{11}
}

type BulkMacsecProfileDelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*MacsecProfileDelRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkMacsecProfileDelRequest) Reset() {
	*x = BulkMacsecProfileDelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkMacsecProfileDelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkMacsecProfileDelRequest) ProtoMessage() {}

func (x *BulkMacsecProfileDelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkMacsecProfileDelRequest.ProtoReflect.Descriptor instead.
func (*BulkMacsecProfileDelRequest) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{12}
}

func (x *BulkMacsecProfileDelRequest) GetRequests() []*MacsecProfileDelRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BulkMacsecProfileDelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processed uint64             `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	Status    *RpcResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BulkMacsecProfileDelResponse) Reset() {
	*x = BulkMacsecProfileDelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkMacsecProfileDelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkMacsecProfileDelResponse) ProtoMessage() {}

func (x *BulkMacsecProfileDelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkMacsecProfileDelResponse.ProtoReflect.Descriptor instead.
func (*BulkMacsecProfileDelResponse) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{13}
}

func (x *BulkMacsecProfileDelResponse) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *BulkMacsecProfileDelResponse) GetStatus() *RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type MacsecIntfProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntfId *IntfId `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
}

func (x *MacsecIntfProfileRequest) Reset() {
	*x = MacsecIntfProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecIntfProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecIntfProfileRequest) ProtoMessage() {}

func (x *MacsecIntfProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecIntfProfileRequest.ProtoReflect.Descriptor instead.
func (*MacsecIntfProfileRequest) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{14}
}

func (x *MacsecIntfProfileRequest) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

type MacsecIntfProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileName string `protobuf:"bytes,1,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
}

func (x *MacsecIntfProfileResponse) Reset() {
	*x = MacsecIntfProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecIntfProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecIntfProfileResponse) ProtoMessage() {}

func (x *MacsecIntfProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecIntfProfileResponse.ProtoReflect.Descriptor instead.
func (*MacsecIntfProfileResponse) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{15}
}

func (x *MacsecIntfProfileResponse) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

type MacsecIntfProfileIsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntfId      *IntfId `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
	ProfileName string  `protobuf:"bytes,2,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`
}

func (x *MacsecIntfProfileIsRequest) Reset() {
	*x = MacsecIntfProfileIsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecIntfProfileIsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecIntfProfileIsRequest) ProtoMessage() {}

func (x *MacsecIntfProfileIsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecIntfProfileIsRequest.ProtoReflect.Descriptor instead.
func (*MacsecIntfProfileIsRequest) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{16}
}

func (x *MacsecIntfProfileIsRequest) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

func (x *MacsecIntfProfileIsRequest) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

type MacsecIntfProfileIsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseStatus *RpcResponseStatus `protobuf:"bytes,1,opt,name=response_status,json=responseStatus,proto3" json:"response_status,omitempty"`
}

func (x *MacsecIntfProfileIsResponse) Reset() {
	*x = MacsecIntfProfileIsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecIntfProfileIsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecIntfProfileIsResponse) ProtoMessage() {}

func (x *MacsecIntfProfileIsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecIntfProfileIsResponse.ProtoReflect.Descriptor instead.
func (*MacsecIntfProfileIsResponse) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{17}
}

func (x *MacsecIntfProfileIsResponse) GetResponseStatus() *RpcResponseStatus {
	if x != nil {
		return x.ResponseStatus
	}
	return nil
}

type BulkMacsecIntfProfileIsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*MacsecIntfProfileIsRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkMacsecIntfProfileIsRequest) Reset() {
	*x = BulkMacsecIntfProfileIsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkMacsecIntfProfileIsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkMacsecIntfProfileIsRequest) ProtoMessage() {}

func (x *BulkMacsecIntfProfileIsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkMacsecIntfProfileIsRequest.ProtoReflect.Descriptor instead.
func (*BulkMacsecIntfProfileIsRequest) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{18}
}

func (x *BulkMacsecIntfProfileIsRequest) GetRequests() []*MacsecIntfProfileIsRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BulkMacsecIntfProfileIsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processed uint64             `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	Status    *RpcResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BulkMacsecIntfProfileIsResponse) Reset() {
	*x = BulkMacsecIntfProfileIsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkMacsecIntfProfileIsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkMacsecIntfProfileIsResponse) ProtoMessage() {}

func (x *BulkMacsecIntfProfileIsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkMacsecIntfProfileIsResponse.ProtoReflect.Descriptor instead.
func (*BulkMacsecIntfProfileIsResponse) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{19}
}

func (x *BulkMacsecIntfProfileIsResponse) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *BulkMacsecIntfProfileIsResponse) GetStatus() *RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type MacsecCapableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntfId *IntfId `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
}

func (x *MacsecCapableRequest) Reset() {
	*x = MacsecCapableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecCapableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecCapableRequest) ProtoMessage() {}

func (x *MacsecCapableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecCapableRequest.ProtoReflect.Descriptor instead.
func (*MacsecCapableRequest) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{20}
}

func (x *MacsecCapableRequest) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

type MacsecCapableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacsecCapable bool `protobuf:"varint,1,opt,name=macsec_capable,json=macsecCapable,proto3" json:"macsec_capable,omitempty"`
}

func (x *MacsecCapableResponse) Reset() {
	*x = MacsecCapableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecCapableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecCapableResponse) ProtoMessage() {}

func (x *MacsecCapableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecCapableResponse.ProtoReflect.Descriptor instead.
func (*MacsecCapableResponse) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{21}
}

func (x *MacsecCapableResponse) GetMacsecCapable() bool {
	if x != nil {
		return x.MacsecCapable
	}
	return false
}

type MacsecIntfStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntfId *IntfId `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
}

func (x *MacsecIntfStatusRequest) Reset() {
	*x = MacsecIntfStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecIntfStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecIntfStatusRequest) ProtoMessage() {}

func (x *MacsecIntfStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecIntfStatusRequest.ProtoReflect.Descriptor instead.
func (*MacsecIntfStatusRequest) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{22}
}

func (x *MacsecIntfStatusRequest) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

type MacsecIntfStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *MacsecIntfStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *MacsecIntfStatusResponse) Reset() {
	*x = MacsecIntfStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecIntfStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecIntfStatusResponse) ProtoMessage() {}

func (x *MacsecIntfStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecIntfStatusResponse.ProtoReflect.Descriptor instead.
func (*MacsecIntfStatusResponse) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{23}
}

func (x *MacsecIntfStatusResponse) GetStatus() *MacsecIntfStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type MacsecIntfCountersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntfId *IntfId `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
}

func (x *MacsecIntfCountersRequest) Reset() {
	*x = MacsecIntfCountersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecIntfCountersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecIntfCountersRequest) ProtoMessage() {}

func (x *MacsecIntfCountersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecIntfCountersRequest.ProtoReflect.Descriptor instead.
func (*MacsecIntfCountersRequest) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{24}
}

func (x *MacsecIntfCountersRequest) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

type MacsecIntfCountersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counters *MacsecIntfCounters `protobuf:"bytes,1,opt,name=counters,proto3" json:"counters,omitempty"`
}

func (x *MacsecIntfCountersResponse) Reset() {
	*x = MacsecIntfCountersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecIntfCountersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecIntfCountersResponse) ProtoMessage() {}

func (x *MacsecIntfCountersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecIntfCountersResponse.ProtoReflect.Descriptor instead.
func (*MacsecIntfCountersResponse) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{25}
}

func (x *MacsecIntfCountersResponse) GetCounters() *MacsecIntfCounters {
	if x != nil {
		return x.Counters
	}
	return nil
}

type MacsecProfilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MacsecProfilesRequest) Reset() {
	*x = MacsecProfilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecProfilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecProfilesRequest) ProtoMessage() {}

func (x *MacsecProfilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecProfilesRequest.ProtoReflect.Descriptor instead.
func (*MacsecProfilesRequest) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{26}
}

type MacsecProfilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MacsecProfilesResponse) Reset() {
	*x = MacsecProfilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecProfilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecProfilesResponse) ProtoMessage() {}

func (x *MacsecProfilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecProfilesResponse.ProtoReflect.Descriptor instead.
func (*MacsecProfilesResponse) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{27}
}

func (x *MacsecProfilesResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MacsecIntfStatusesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MacsecIntfStatusesRequest) Reset() {
	*x = MacsecIntfStatusesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecIntfStatusesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecIntfStatusesRequest) ProtoMessage() {}

func (x *MacsecIntfStatusesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecIntfStatusesRequest.ProtoReflect.Descriptor instead.
func (*MacsecIntfStatusesRequest) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{28}
}

type MacsecIntfStatusesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntfId *IntfId `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
}

func (x *MacsecIntfStatusesResponse) Reset() {
	*x = MacsecIntfStatusesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_macsec_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacsecIntfStatusesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacsecIntfStatusesResponse) ProtoMessage() {}

func (x *MacsecIntfStatusesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_macsec_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacsecIntfStatusesResponse.ProtoReflect.Descriptor instead.
func (*MacsecIntfStatusesResponse) Descriptor() ([]byte, []int) {
	return file_macsec_proto_rawDescGZIP(), []int{29}
}

func (x *MacsecIntfStatusesResponse) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

var File_macsec_proto protoreflect.FileDescriptor

var file_macsec_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x1a, 0x0f, 0x72, 0x70, 0x63, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x69, 0x6e, 0x74,
	0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x81, 0x01, 0x0a, 0x12, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x5f,
	0x69, 0x6e, 0x74, 0x66, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x61,
	0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x66, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x48, 0x00, 0x52, 0x06,
	0x69, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x13, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66,
	0x49, 0x64, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x49, 0x6e,
	0x74, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61,
	0x63, 0x6b, 0x22, 0x38, 0x0a, 0x13, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2e, 0x0a, 0x14,
	0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x39, 0x0a, 0x14,
	0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x15, 0x4d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x4e, 0x0a, 0x17, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x33, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x62, 0x0a, 0x18, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x46, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5e, 0x0a, 0x1b, 0x42, 0x75, 0x6c,
	0x6b, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x73, 0x0a, 0x1c, 0x42, 0x75, 0x6c,
	0x6b, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3c,
	0x0a, 0x17, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1a, 0x0a, 0x18,
	0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x0a, 0x1b, 0x42, 0x75, 0x6c, 0x6b,
	0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x73, 0x0a, 0x1c, 0x42, 0x75, 0x6c, 0x6b,
	0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x47, 0x0a,
	0x18, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x74,
	0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x52, 0x06,
	0x69, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x19, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x49, 0x6e, 0x74, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x1a, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x49, 0x6e, 0x74, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x1b, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x49, 0x6e,
	0x74, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x64, 0x0a, 0x1e, 0x42,
	0x75, 0x6c, 0x6b, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x66, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x22, 0x76, 0x0a, 0x1f, 0x42, 0x75, 0x6c, 0x6b, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x49,
	0x6e, 0x74, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x43, 0x0a, 0x14, 0x4d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x22, 0x3e,
	0x0a, 0x15, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x63, 0x73, 0x65,
	0x63, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x46,
	0x0a, 0x17, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x66, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x74,
	0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x52, 0x06,
	0x69, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x18, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x49, 0x6e, 0x74, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x48, 0x0a, 0x19, 0x4d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x49, 0x6e, 0x74, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66,
	0x49, 0x64, 0x22, 0x58, 0x0a, 0x1a, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x66,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x22, 0x17, 0x0a, 0x15,
	0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2c, 0x0a, 0x16, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x49, 0x6e, 0x74,
	0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x49, 0x0a, 0x1a, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x66, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74,
	0x66, 0x49, 0x64, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x32, 0xa3, 0x0b, 0x0a, 0x10,
	0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x4d, 0x67, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x4c, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1e, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4d,
	0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5a, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x12, 0x23,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x10, 0x62,
	0x75, 0x6c, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x12,
	0x27, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c,
	0x6b, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x64, 0x65, 0x6c, 0x12, 0x23, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x67, 0x0a, 0x10, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x64, 0x65, 0x6c, 0x12, 0x27, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x4d,
	0x61, 0x63, 0x73, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0c, 0x69, 0x6e, 0x74,
	0x66, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x49, 0x6e, 0x74,
	0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x63,
	0x73, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x66,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x73, 0x12, 0x26, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x49,
	0x6e, 0x74, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71,
	0x0a, 0x14, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x69, 0x73, 0x12, 0x2a, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x49, 0x6e,
	0x74, 0x66, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x42, 0x75, 0x6c, 0x6b, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x66, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x57, 0x0a, 0x0e, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x5f, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x43, 0x61, 0x70, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0b, 0x69, 0x6e,
	0x74, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x49, 0x6e, 0x74,
	0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x49, 0x6e, 0x74, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x66, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x49, 0x6e, 0x74, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0f, 0x6d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x69, 0x0a, 0x14, 0x6d, 0x61, 0x63, 0x73, 0x65, 0x63,
	0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x25,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73,
	0x65, 0x63, 0x49, 0x6e, 0x74, 0x66, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x73, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x66, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x42, 0x12, 0x5a, 0x10, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x45, 0x6f, 0x73, 0x53,
	0x64, 0x6b, 0x52, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_macsec_proto_rawDescOnce sync.Once
	file_macsec_proto_rawDescData = file_macsec_proto_rawDesc
)

func file_macsec_proto_rawDescGZIP() []byte {
	file_macsec_proto_rawDescOnce.Do(func() {
		file_macsec_proto_rawDescData = protoimpl.X.CompressGZIP(file_macsec_proto_rawDescData)
	})
	return file_macsec_proto_rawDescData
}

var file_macsec_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_macsec_proto_goTypes = []interface{}{
	(*MacsecWatchRequest)(nil),              // 0: eos.remote.MacsecWatchRequest
	(*MacsecWatchResponse)(nil),             // 1: eos.remote.MacsecWatchResponse
	(*MacsecExistsRequest)(nil),             // 2: eos.remote.MacsecExistsRequest
	(*MacsecExistsResponse)(nil),            // 3: eos.remote.MacsecExistsResponse
	(*MacsecProfileRequest)(nil),            // 4: eos.remote.MacsecProfileRequest
	(*MacsecProfileResponse)(nil),           // 5: eos.remote.MacsecProfileResponse
	(*MacsecProfileSetRequest)(nil),         // 6: eos.remote.MacsecProfileSetRequest
	(*MacsecProfileSetResponse)(nil),        // 7: eos.remote.MacsecProfileSetResponse
	(*BulkMacsecProfileSetRequest)(nil),     // 8: eos.remote.BulkMacsecProfileSetRequest
	(*BulkMacsecProfileSetResponse)(nil),    // 9: eos.remote.BulkMacsecProfileSetResponse
	(*MacsecProfileDelRequest)(nil),         // 10: eos.remote.MacsecProfileDelRequest
	(*MacsecProfileDelResponse)(nil),        // 11: eos.remote.MacsecProfileDelResponse
	(*BulkMacsecProfileDelRequest)(nil),     // 12: eos.remote.BulkMacsecProfileDelRequest
	(*BulkMacsecProfileDelResponse)(nil),    // 13: eos.remote.BulkMacsecProfileDelResponse
	(*MacsecIntfProfileRequest)(nil),        // 14: eos.remote.MacsecIntfProfileRequest
	(*MacsecIntfProfileResponse)(nil),       // 15: eos.remote.MacsecIntfProfileResponse
	(*MacsecIntfProfileIsRequest)(nil),      // 16: eos.remote.MacsecIntfProfileIsRequest
	(*MacsecIntfProfileIsResponse)(nil),     // 17: eos.remote.MacsecIntfProfileIsResponse
	(*BulkMacsecIntfProfileIsRequest)(nil),  // 18: eos.remote.BulkMacsecIntfProfileIsRequest
	(*BulkMacsecIntfProfileIsResponse)(nil), // 19: eos.remote.BulkMacsecIntfProfileIsResponse
	(*MacsecCapableRequest)(nil),            // 20: eos.remote.MacsecCapableRequest
	(*MacsecCapableResponse)(nil),           // 21: eos.remote.MacsecCapableResponse
	(*MacsecIntfStatusRequest)(nil),         // 22: eos.remote.MacsecIntfStatusRequest
	(*MacsecIntfStatusResponse)(nil),        // 23: eos.remote.MacsecIntfStatusResponse
	(*MacsecIntfCountersRequest)(nil),       // 24: eos.remote.MacsecIntfCountersRequest
	(*MacsecIntfCountersResponse)(nil),      // 25: eos.remote.MacsecIntfCountersResponse
	(*MacsecProfilesRequest)(nil),           // 26: eos.remote.MacsecProfilesRequest
	(*MacsecProfilesResponse)(nil),          // 27: eos.remote.MacsecProfilesResponse
	(*MacsecIntfStatusesRequest)(nil),       // 28: eos.remote.MacsecIntfStatusesRequest
	(*MacsecIntfStatusesResponse)(nil),      // 29: eos.remote.MacsecIntfStatusesResponse
	(*IntfId)(nil),                          // 30: eos.remote.IntfId
	(*MacsecIntfStatus)(nil),                // 31: eos.remote.MacsecIntfStatus
	(*MacsecProfile)(nil),                   // 32: eos.remote.MacsecProfile
	(*RpcResponseStatus)(nil),               // 33: eos.remote.RpcResponseStatus
	(*MacsecIntfCounters)(nil),              // 34: eos.remote.MacsecIntfCounters
}
var file_macsec_proto_depIdxs = []int32{
	30, // 0: eos.remote.MacsecWatchRequest.intf_id:type_name -> eos.remote.IntfId
	30, // 1: eos.remote.MacsecWatchResponse.intf_id:type_name -> eos.remote.IntfId
	31, // 2: eos.remote.MacsecWatchResponse.status:type_name -> eos.remote.MacsecIntfStatus
	32, // 3: eos.remote.MacsecProfileResponse.profile:type_name -> eos.remote.MacsecProfile
	32, // 4: eos.remote.MacsecProfileSetRequest.profile:type_name -> eos.remote.MacsecProfile
	33, // 5: eos.remote.MacsecProfileSetResponse.response_status:type_name -> eos.remote.RpcResponseStatus
	6,  // 6: eos.remote.BulkMacsecProfileSetRequest.requests:type_name -> eos.remote.MacsecProfileSetRequest
	33, // 7: eos.remote.BulkMacsecProfileSetResponse.status:type_name -> eos.remote.RpcResponseStatus
	10, // 8: eos.remote.BulkMacsecProfileDelRequest.requests:type_name -> eos.remote.MacsecProfileDelRequest
	33, // 9: eos.remote.BulkMacsecProfileDelResponse.status:type_name -> eos.remote.RpcResponseStatus
	30, // 10: eos.remote.MacsecIntfProfileRequest.intf_id:type_name -> eos.remote.IntfId
	30, // 11: eos.remote.MacsecIntfProfileIsRequest.intf_id:type_name -> eos.remote.IntfId
	33, // 12: eos.remote.MacsecIntfProfileIsResponse.response_status:type_name -> eos.remote.RpcResponseStatus
	16, // 13: eos.remote.BulkMacsecIntfProfileIsRequest.requests:type_name -> eos.remote.MacsecIntfProfileIsRequest
	33, // 14: eos.remote.BulkMacsecIntfProfileIsResponse.status:type_name -> eos.remote.RpcResponseStatus
	30, // 15: eos.remote.MacsecCapableRequest.intf_id:type_name -> eos.remote.IntfId
	30, // 16: eos.remote.MacsecIntfStatusRequest.intf_id:type_name -> eos.remote.IntfId
	31, // 17: eos.remote.MacsecIntfStatusResponse.status:type_name -> eos.remote.MacsecIntfStatus
	30, // 18: eos.remote.MacsecIntfCountersRequest.intf_id:type_name -> eos.remote.IntfId
	34, // 19: eos.remote.MacsecIntfCountersResponse.counters:type_name -> eos.remote.MacsecIntfCounters
	30, // 20: eos.remote.MacsecIntfStatusesResponse.intf_id:type_name -> eos.remote.IntfId
	0,  // 21: eos.remote.MacsecMgrService.watch:input_type -> eos.remote.MacsecWatchRequest
	2,  // 22: eos.remote.MacsecMgrService.exists:input_type -> eos.remote.MacsecExistsRequest
	4,  // 23: eos.remote.MacsecMgrService.profile:input_type -> eos.remote.MacsecProfileRequest
	6,  // 24: eos.remote.MacsecMgrService.profile_set:input_type -> eos.remote.MacsecProfileSetRequest
	8,  // 25: eos.remote.MacsecMgrService.bulk_profile_set:input_type -> eos.remote.BulkMacsecProfileSetRequest
	10, // 26: eos.remote.MacsecMgrService.profile_del:input_type -> eos.remote.MacsecProfileDelRequest
	12, // 27: eos.remote.MacsecMgrService.bulk_profile_del:input_type -> eos.remote.BulkMacsecProfileDelRequest
	14, // 28: eos.remote.MacsecMgrService.intf_profile:input_type -> eos.remote.MacsecIntfProfileRequest
	16, // 29: eos.remote.MacsecMgrService.intf_profile_is:input_type -> eos.remote.MacsecIntfProfileIsRequest
	18, // 30: eos.remote.MacsecMgrService.bulk_intf_profile_is:input_type -> eos.remote.BulkMacsecIntfProfileIsRequest
	20, // 31: eos.remote.MacsecMgrService.macsec_capable:input_type -> eos.remote.MacsecCapableRequest
	22, // 32: eos.remote.MacsecMgrService.intf_status:input_type -> eos.remote.MacsecIntfStatusRequest
	24, // 33: eos.remote.MacsecMgrService.intf_counters:input_type -> eos.remote.MacsecIntfCountersRequest
	26, // 34: eos.remote.MacsecMgrService.macsec_profiles:input_type -> eos.remote.MacsecProfilesRequest
	28, // 35: eos.remote.MacsecMgrService.macsec_intf_statuses:input_type -> eos.remote.MacsecIntfStatusesRequest
	1,  // 36: eos.remote.MacsecMgrService.watch:output_type -> eos.remote.MacsecWatchResponse
	3,  // 37: eos.remote.MacsecMgrService.exists:output_type -> eos.remote.MacsecExistsResponse
	5,  // 38: eos.remote.MacsecMgrService.profile:output_type -> eos.remote.MacsecProfileResponse
	7,  // 39: eos.remote.MacsecMgrService.profile_set:output_type -> eos.remote.MacsecProfileSetResponse
	9,  // 40: eos.remote.MacsecMgrService.bulk_profile_set:output_type -> eos.remote.BulkMacsecProfileSetResponse
	11, // 41: eos.remote.MacsecMgrService.profile_del:output_type -> eos.remote.MacsecProfileDelResponse
	13, // 42: eos.remote.MacsecMgrService.bulk_profile_del:output_type -> eos.remote.BulkMacsecProfileDelResponse
	15, // 43: eos.remote.MacsecMgrService.intf_profile:output_type -> eos.remote.MacsecIntfProfileResponse
	17, // 44: eos.remote.MacsecMgrService.intf_profile_is:output_type -> eos.remote.MacsecIntfProfileIsResponse
	19, // 45: eos.remote.MacsecMgrService.bulk_intf_profile_is:output_type -> eos.remote.BulkMacsecIntfProfileIsResponse
	21, // 46: eos.remote.MacsecMgrService.macsec_capable:output_type -> eos.remote.MacsecCapableResponse
	23, // 47: eos.remote.MacsecMgrService.intf_status:output_type -> eos.remote.MacsecIntfStatusResponse
	25, // 48: eos.remote.MacsecMgrService.intf_counters:output_type -> eos.remote.MacsecIntfCountersResponse
	27, // 49: eos.remote.MacsecMgrService.macsec_profiles:output_type -> eos.remote.MacsecProfilesResponse
	29, // 50: eos.remote.MacsecMgrService.macsec_intf_statuses:output_type -> eos.remote.MacsecIntfStatusesResponse
	36, // [36:51] is the sub-list for method output_type
	21, // [21:36] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_macsec_proto_init() }
func file_macsec_proto_init() {
	if File_macsec_proto != nil {
		return
	}
	file_rpc_types_proto_init()
	file_intf_types_proto_init()
	file_macsec_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_macsec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecWatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecWatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecProfileSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecProfileSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkMacsecProfileSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkMacsecProfileSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecProfileDelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecProfileDelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkMacsecProfileDelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkMacsecProfileDelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecIntfProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecIntfProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecIntfProfileIsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecIntfProfileIsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkMacsecIntfProfileIsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkMacsecIntfProfileIsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecCapableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecCapableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecIntfStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecIntfStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecIntfCountersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecIntfCountersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecProfilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecProfilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecIntfStatusesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_macsec_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacsecIntfStatusesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_macsec_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*MacsecWatchRequest_AllIntfs)(nil),
		(*MacsecWatchRequest_IntfId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_macsec_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_macsec_proto_goTypes,
		DependencyIndexes: file_macsec_proto_depIdxs,
		MessageInfos:      file_macsec_proto_msgTypes,
	}.Build()
	File_macsec_proto = out.File
	file_macsec_proto_rawDesc = nil
	file_macsec_proto_goTypes = nil
	file_macsec_proto_depIdxs = nil
}
