// Copyright (c) 2022 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: mpls_route.proto

package EosSdkRpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MplsRouteWatchedField int32

const (
	MplsRouteWatchedField_MPLS_ROUTE_ALL_FIELDS MplsRouteWatchedField = 0
	MplsRouteWatchedField_MPLS_ROUTE            MplsRouteWatchedField = 1
	MplsRouteWatchedField_MPLS_ROUTE_VIAS       MplsRouteWatchedField = 2
)

// Enum value maps for MplsRouteWatchedField.
var (
	MplsRouteWatchedField_name = map[int32]string{
		0: "MPLS_ROUTE_ALL_FIELDS",
		1: "MPLS_ROUTE",
		2: "MPLS_ROUTE_VIAS",
	}
	MplsRouteWatchedField_value = map[string]int32{
		"MPLS_ROUTE_ALL_FIELDS": 0,
		"MPLS_ROUTE":            1,
		"MPLS_ROUTE_VIAS":       2,
	}
)

func (x MplsRouteWatchedField) Enum() *MplsRouteWatchedField {
	p := new(MplsRouteWatchedField)
	*p = x
	return p
}

func (x MplsRouteWatchedField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MplsRouteWatchedField) Descriptor() protoreflect.EnumDescriptor {
	return file_mpls_route_proto_enumTypes[0].Descriptor()
}

func (MplsRouteWatchedField) Type() protoreflect.EnumType {
	return &file_mpls_route_proto_enumTypes[0]
}

func (x MplsRouteWatchedField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MplsRouteWatchedField.Descriptor instead.
func (MplsRouteWatchedField) EnumDescriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{0}
}

type MplsRouteSetViasAction int32

const (
	// Use this convenience method to create routes and vias in a single RPC call.
	// While primarily designed for route creation, when utilized with an existing
	// route key, any vias present within the MplsRouteSetRequest message will be
	// appended to the existing set of vias for that route. If adding the vias
	// results in a failure, the route shall be deleted.
	MplsRouteSetViasAction_MPLS_ROUTE_SET_VIAS_ADD MplsRouteSetViasAction = 0
	// Choosing this action with an existing route will replace vias in a
	// make-before-break fashion within the RPC server, when possible.
	// Vias that are common between the old set and the new set should
	// remain untouched. If the operation fails, then the original via set
	// is restored.
	MplsRouteSetViasAction_MPLS_ROUTE_SET_VIAS_REPLACE MplsRouteSetViasAction = 1
)

// Enum value maps for MplsRouteSetViasAction.
var (
	MplsRouteSetViasAction_name = map[int32]string{
		0: "MPLS_ROUTE_SET_VIAS_ADD",
		1: "MPLS_ROUTE_SET_VIAS_REPLACE",
	}
	MplsRouteSetViasAction_value = map[string]int32{
		"MPLS_ROUTE_SET_VIAS_ADD":     0,
		"MPLS_ROUTE_SET_VIAS_REPLACE": 1,
	}
)

func (x MplsRouteSetViasAction) Enum() *MplsRouteSetViasAction {
	p := new(MplsRouteSetViasAction)
	*p = x
	return p
}

func (x MplsRouteSetViasAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MplsRouteSetViasAction) Descriptor() protoreflect.EnumDescriptor {
	return file_mpls_route_proto_enumTypes[1].Descriptor()
}

func (MplsRouteSetViasAction) Type() protoreflect.EnumType {
	return &file_mpls_route_proto_enumTypes[1]
}

func (x MplsRouteSetViasAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MplsRouteSetViasAction.Descriptor instead.
func (MplsRouteSetViasAction) EnumDescriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{1}
}

type MplsRouteFieldsControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []MplsRouteWatchedField `protobuf:"varint,1,rep,packed,name=fields,proto3,enum=eos.remote.MplsRouteWatchedField" json:"fields,omitempty"`
}

func (x *MplsRouteFieldsControl) Reset() {
	*x = MplsRouteFieldsControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteFieldsControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteFieldsControl) ProtoMessage() {}

func (x *MplsRouteFieldsControl) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteFieldsControl.ProtoReflect.Descriptor instead.
func (*MplsRouteFieldsControl) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{0}
}

func (x *MplsRouteFieldsControl) GetFields() []MplsRouteWatchedField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type MplsRouteWatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set to true if an immediate acknowledgement is desired.
	Ack bool `protobuf:"varint,1,opt,name=ack,proto3" json:"ack,omitempty"`
	// Types that are assignable to Overload:
	//
	//	*MplsRouteWatchRequest_All
	//	*MplsRouteWatchRequest_RouteKey
	Overload   isMplsRouteWatchRequest_Overload `protobuf_oneof:"overload"`
	DumpFields *MplsRouteFieldsControl          `protobuf:"bytes,4,opt,name=dump_fields,json=dumpFields,proto3" json:"dump_fields,omitempty"`
}

func (x *MplsRouteWatchRequest) Reset() {
	*x = MplsRouteWatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteWatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteWatchRequest) ProtoMessage() {}

func (x *MplsRouteWatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteWatchRequest.ProtoReflect.Descriptor instead.
func (*MplsRouteWatchRequest) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{1}
}

func (x *MplsRouteWatchRequest) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

func (m *MplsRouteWatchRequest) GetOverload() isMplsRouteWatchRequest_Overload {
	if m != nil {
		return m.Overload
	}
	return nil
}

func (x *MplsRouteWatchRequest) GetAll() bool {
	if x, ok := x.GetOverload().(*MplsRouteWatchRequest_All); ok {
		return x.All
	}
	return false
}

func (x *MplsRouteWatchRequest) GetRouteKey() *MplsRouteKey {
	if x, ok := x.GetOverload().(*MplsRouteWatchRequest_RouteKey); ok {
		return x.RouteKey
	}
	return nil
}

func (x *MplsRouteWatchRequest) GetDumpFields() *MplsRouteFieldsControl {
	if x != nil {
		return x.DumpFields
	}
	return nil
}

type isMplsRouteWatchRequest_Overload interface {
	isMplsRouteWatchRequest_Overload()
}

type MplsRouteWatchRequest_All struct {
	// True if all MPLS routes should be watched.
	All bool `protobuf:"varint,2,opt,name=all,proto3,oneof"`
}

type MplsRouteWatchRequest_RouteKey struct {
	// The route key of a particular MPLS route to watch.
	RouteKey *MplsRouteKey `protobuf:"bytes,3,opt,name=route_key,json=routeKey,proto3,oneof"`
}

func (*MplsRouteWatchRequest_All) isMplsRouteWatchRequest_Overload() {}

func (*MplsRouteWatchRequest_RouteKey) isMplsRouteWatchRequest_Overload() {}

// *
// Notification for when an MPLS route is to be programmed into hardware or when it is
// assigned a new FEC ID.
type OnMplsRouteSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The route key of the MPLS route that triggered the event.
	RouteKey *MplsRouteKey `protobuf:"bytes,1,opt,name=route_key,json=routeKey,proto3" json:"route_key,omitempty"`
	// The ID of the MPLS route's associated FEC.
	FecId *MplsFecId `protobuf:"bytes,2,opt,name=fec_id,json=fecId,proto3" json:"fec_id,omitempty"`
}

func (x *OnMplsRouteSet) Reset() {
	*x = OnMplsRouteSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnMplsRouteSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnMplsRouteSet) ProtoMessage() {}

func (x *OnMplsRouteSet) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnMplsRouteSet.ProtoReflect.Descriptor instead.
func (*OnMplsRouteSet) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{2}
}

func (x *OnMplsRouteSet) GetRouteKey() *MplsRouteKey {
	if x != nil {
		return x.RouteKey
	}
	return nil
}

func (x *OnMplsRouteSet) GetFecId() *MplsFecId {
	if x != nil {
		return x.FecId
	}
	return nil
}

// *
// Notification for when an MPLS route is deleted from hardware.
type OnMplsRouteDel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The route key of the MPLS route that triggered the event.
	RouteKey *MplsRouteKey `protobuf:"bytes,1,opt,name=route_key,json=routeKey,proto3" json:"route_key,omitempty"`
}

func (x *OnMplsRouteDel) Reset() {
	*x = OnMplsRouteDel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnMplsRouteDel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnMplsRouteDel) ProtoMessage() {}

func (x *OnMplsRouteDel) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnMplsRouteDel.ProtoReflect.Descriptor instead.
func (*OnMplsRouteDel) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{3}
}

func (x *OnMplsRouteDel) GetRouteKey() *MplsRouteKey {
	if x != nil {
		return x.RouteKey
	}
	return nil
}

// *
// Notification for when an MPLS FEC is created or updated in hardware.
type OnMplsFecSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the FEC which triggered the event.
	FecId *MplsFecId `protobuf:"bytes,1,opt,name=fec_id,json=fecId,proto3" json:"fec_id,omitempty"`
}

func (x *OnMplsFecSet) Reset() {
	*x = OnMplsFecSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnMplsFecSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnMplsFecSet) ProtoMessage() {}

func (x *OnMplsFecSet) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnMplsFecSet.ProtoReflect.Descriptor instead.
func (*OnMplsFecSet) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{4}
}

func (x *OnMplsFecSet) GetFecId() *MplsFecId {
	if x != nil {
		return x.FecId
	}
	return nil
}

// *
// Notification for when an MPLS FEC is removed from hardware.
type OnMplsFecDel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the FEC which triggered the event.
	FecId *MplsFecId `protobuf:"bytes,1,opt,name=fec_id,json=fecId,proto3" json:"fec_id,omitempty"`
}

func (x *OnMplsFecDel) Reset() {
	*x = OnMplsFecDel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnMplsFecDel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnMplsFecDel) ProtoMessage() {}

func (x *OnMplsFecDel) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnMplsFecDel.ProtoReflect.Descriptor instead.
func (*OnMplsFecDel) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{5}
}

func (x *OnMplsFecDel) GetFecId() *MplsFecId {
	if x != nil {
		return x.FecId
	}
	return nil
}

type OnMplsRouteDump struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Route *MplsRoute      `protobuf:"bytes,1,opt,name=route,proto3" json:"route,omitempty"`
	Vias  []*MplsRouteVia `protobuf:"bytes,2,rep,name=vias,proto3" json:"vias,omitempty"`
}

func (x *OnMplsRouteDump) Reset() {
	*x = OnMplsRouteDump{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnMplsRouteDump) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnMplsRouteDump) ProtoMessage() {}

func (x *OnMplsRouteDump) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnMplsRouteDump.ProtoReflect.Descriptor instead.
func (*OnMplsRouteDump) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{6}
}

func (x *OnMplsRouteDump) GetRoute() *MplsRoute {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *OnMplsRouteDump) GetVias() []*MplsRouteVia {
	if x != nil {
		return x.Vias
	}
	return nil
}

type MplsRouteWatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true the agent is now actively watching for events.
	Ack bool `protobuf:"varint,1,opt,name=ack,proto3" json:"ack,omitempty"`
	// Types that are assignable to RouteEvent:
	//
	//	*MplsRouteWatchResponse_OnMplsRouteSet
	//	*MplsRouteWatchResponse_OnMplsRouteDel
	RouteEvent isMplsRouteWatchResponse_RouteEvent `protobuf_oneof:"route_event"`
	// Types that are assignable to FecEvent:
	//
	//	*MplsRouteWatchResponse_OnMplsFecSet
	//	*MplsRouteWatchResponse_OnMplsFecDel
	FecEvent        isMplsRouteWatchResponse_FecEvent `protobuf_oneof:"fec_event"`
	OnMplsRouteDump *OnMplsRouteDump                  `protobuf:"bytes,6,opt,name=on_mpls_route_dump,json=onMplsRouteDump,proto3" json:"on_mpls_route_dump,omitempty"`
}

func (x *MplsRouteWatchResponse) Reset() {
	*x = MplsRouteWatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteWatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteWatchResponse) ProtoMessage() {}

func (x *MplsRouteWatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteWatchResponse.ProtoReflect.Descriptor instead.
func (*MplsRouteWatchResponse) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{7}
}

func (x *MplsRouteWatchResponse) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

func (m *MplsRouteWatchResponse) GetRouteEvent() isMplsRouteWatchResponse_RouteEvent {
	if m != nil {
		return m.RouteEvent
	}
	return nil
}

func (x *MplsRouteWatchResponse) GetOnMplsRouteSet() *OnMplsRouteSet {
	if x, ok := x.GetRouteEvent().(*MplsRouteWatchResponse_OnMplsRouteSet); ok {
		return x.OnMplsRouteSet
	}
	return nil
}

func (x *MplsRouteWatchResponse) GetOnMplsRouteDel() *OnMplsRouteDel {
	if x, ok := x.GetRouteEvent().(*MplsRouteWatchResponse_OnMplsRouteDel); ok {
		return x.OnMplsRouteDel
	}
	return nil
}

func (m *MplsRouteWatchResponse) GetFecEvent() isMplsRouteWatchResponse_FecEvent {
	if m != nil {
		return m.FecEvent
	}
	return nil
}

func (x *MplsRouteWatchResponse) GetOnMplsFecSet() *OnMplsFecSet {
	if x, ok := x.GetFecEvent().(*MplsRouteWatchResponse_OnMplsFecSet); ok {
		return x.OnMplsFecSet
	}
	return nil
}

func (x *MplsRouteWatchResponse) GetOnMplsFecDel() *OnMplsFecDel {
	if x, ok := x.GetFecEvent().(*MplsRouteWatchResponse_OnMplsFecDel); ok {
		return x.OnMplsFecDel
	}
	return nil
}

func (x *MplsRouteWatchResponse) GetOnMplsRouteDump() *OnMplsRouteDump {
	if x != nil {
		return x.OnMplsRouteDump
	}
	return nil
}

type isMplsRouteWatchResponse_RouteEvent interface {
	isMplsRouteWatchResponse_RouteEvent()
}

type MplsRouteWatchResponse_OnMplsRouteSet struct {
	// The specified MPLS route has been programmed to hardware or
	// assigned a new FEC ID.
	OnMplsRouteSet *OnMplsRouteSet `protobuf:"bytes,2,opt,name=on_mpls_route_set,json=onMplsRouteSet,proto3,oneof"`
}

type MplsRouteWatchResponse_OnMplsRouteDel struct {
	// The specified MPLS route has been deleted from hardware.
	OnMplsRouteDel *OnMplsRouteDel `protobuf:"bytes,3,opt,name=on_mpls_route_del,json=onMplsRouteDel,proto3,oneof"`
}

func (*MplsRouteWatchResponse_OnMplsRouteSet) isMplsRouteWatchResponse_RouteEvent() {}

func (*MplsRouteWatchResponse_OnMplsRouteDel) isMplsRouteWatchResponse_RouteEvent() {}

type isMplsRouteWatchResponse_FecEvent interface {
	isMplsRouteWatchResponse_FecEvent()
}

type MplsRouteWatchResponse_OnMplsFecSet struct {
	// The specified MPLS FEC has been created or updated in hardware.
	OnMplsFecSet *OnMplsFecSet `protobuf:"bytes,4,opt,name=on_mpls_fec_set,json=onMplsFecSet,proto3,oneof"`
}

type MplsRouteWatchResponse_OnMplsFecDel struct {
	// The specified MPLS FEC has been removed from hardware.
	OnMplsFecDel *OnMplsFecDel `protobuf:"bytes,5,opt,name=on_mpls_fec_del,json=onMplsFecDel,proto3,oneof"`
}

func (*MplsRouteWatchResponse_OnMplsFecSet) isMplsRouteWatchResponse_FecEvent() {}

func (*MplsRouteWatchResponse_OnMplsFecDel) isMplsRouteWatchResponse_FecEvent() {}

type MplsRouteResyncInitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MplsRouteResyncInitRequest) Reset() {
	*x = MplsRouteResyncInitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteResyncInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteResyncInitRequest) ProtoMessage() {}

func (x *MplsRouteResyncInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteResyncInitRequest.ProtoReflect.Descriptor instead.
func (*MplsRouteResyncInitRequest) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{8}
}

type MplsRouteResyncInitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MplsRouteResyncInitResponse) Reset() {
	*x = MplsRouteResyncInitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteResyncInitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteResyncInitResponse) ProtoMessage() {}

func (x *MplsRouteResyncInitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteResyncInitResponse.ProtoReflect.Descriptor instead.
func (*MplsRouteResyncInitResponse) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{9}
}

type MplsRouteResyncCompleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MplsRouteResyncCompleteRequest) Reset() {
	*x = MplsRouteResyncCompleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteResyncCompleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteResyncCompleteRequest) ProtoMessage() {}

func (x *MplsRouteResyncCompleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteResyncCompleteRequest.ProtoReflect.Descriptor instead.
func (*MplsRouteResyncCompleteRequest) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{10}
}

type MplsRouteResyncCompleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MplsRouteResyncCompleteResponse) Reset() {
	*x = MplsRouteResyncCompleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteResyncCompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteResyncCompleteResponse) ProtoMessage() {}

func (x *MplsRouteResyncCompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteResyncCompleteResponse.ProtoReflect.Descriptor instead.
func (*MplsRouteResyncCompleteResponse) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{11}
}

type MplsRoutesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, the stream response will also include vias for every
	// reported MPLS route key.
	ReportVias bool `protobuf:"varint,1,opt,name=report_vias,json=reportVias,proto3" json:"report_vias,omitempty"`
}

func (x *MplsRoutesRequest) Reset() {
	*x = MplsRoutesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRoutesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRoutesRequest) ProtoMessage() {}

func (x *MplsRoutesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRoutesRequest.ProtoReflect.Descriptor instead.
func (*MplsRoutesRequest) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{12}
}

func (x *MplsRoutesRequest) GetReportVias() bool {
	if x != nil {
		return x.ReportVias
	}
	return false
}

type MplsRoutesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The configured MPLS routes.
	Route *MplsRoute `protobuf:"bytes,1,opt,name=route,proto3" json:"route,omitempty"`
	// VIAs of a configured route.
	Vias []*MplsRouteVia `protobuf:"bytes,2,rep,name=vias,proto3" json:"vias,omitempty"`
}

func (x *MplsRoutesResponse) Reset() {
	*x = MplsRoutesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRoutesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRoutesResponse) ProtoMessage() {}

func (x *MplsRoutesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRoutesResponse.ProtoReflect.Descriptor instead.
func (*MplsRoutesResponse) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{13}
}

func (x *MplsRoutesResponse) GetRoute() *MplsRoute {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *MplsRoutesResponse) GetVias() []*MplsRouteVia {
	if x != nil {
		return x.Vias
	}
	return nil
}

type MplsRouteStatusesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MplsRouteStatusesRequest) Reset() {
	*x = MplsRouteStatusesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteStatusesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteStatusesRequest) ProtoMessage() {}

func (x *MplsRouteStatusesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteStatusesRequest.ProtoReflect.Descriptor instead.
func (*MplsRouteStatusesRequest) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{14}
}

type MplsRouteStatusesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The keys of the MPLS routes in hardware.
	RouteKey *MplsRouteKey `protobuf:"bytes,1,opt,name=route_key,json=routeKey,proto3" json:"route_key,omitempty"`
}

func (x *MplsRouteStatusesResponse) Reset() {
	*x = MplsRouteStatusesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteStatusesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteStatusesResponse) ProtoMessage() {}

func (x *MplsRouteStatusesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteStatusesResponse.ProtoReflect.Descriptor instead.
func (*MplsRouteStatusesResponse) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{15}
}

func (x *MplsRouteStatusesResponse) GetRouteKey() *MplsRouteKey {
	if x != nil {
		return x.RouteKey
	}
	return nil
}

type MplsRouteViasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the route to query.
	RouteKey *MplsRouteKey `protobuf:"bytes,1,opt,name=route_key,json=routeKey,proto3" json:"route_key,omitempty"`
}

func (x *MplsRouteViasRequest) Reset() {
	*x = MplsRouteViasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteViasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteViasRequest) ProtoMessage() {}

func (x *MplsRouteViasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteViasRequest.ProtoReflect.Descriptor instead.
func (*MplsRouteViasRequest) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{16}
}

func (x *MplsRouteViasRequest) GetRouteKey() *MplsRouteKey {
	if x != nil {
		return x.RouteKey
	}
	return nil
}

type MplsRouteViasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vias configured for the route.
	RouteVia *MplsRouteVia `protobuf:"bytes,1,opt,name=route_via,json=routeVia,proto3" json:"route_via,omitempty"`
}

func (x *MplsRouteViasResponse) Reset() {
	*x = MplsRouteViasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteViasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteViasResponse) ProtoMessage() {}

func (x *MplsRouteViasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteViasResponse.ProtoReflect.Descriptor instead.
func (*MplsRouteViasResponse) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{17}
}

func (x *MplsRouteViasResponse) GetRouteVia() *MplsRouteVia {
	if x != nil {
		return x.RouteVia
	}
	return nil
}

type MplsRouteViaStatusesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Overloads:
	//
	//	*MplsRouteViaStatusesRequest_RouteKey
	//	*MplsRouteViaStatusesRequest_FecId
	Overloads isMplsRouteViaStatusesRequest_Overloads `protobuf_oneof:"overloads"`
}

func (x *MplsRouteViaStatusesRequest) Reset() {
	*x = MplsRouteViaStatusesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteViaStatusesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteViaStatusesRequest) ProtoMessage() {}

func (x *MplsRouteViaStatusesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteViaStatusesRequest.ProtoReflect.Descriptor instead.
func (*MplsRouteViaStatusesRequest) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{18}
}

func (m *MplsRouteViaStatusesRequest) GetOverloads() isMplsRouteViaStatusesRequest_Overloads {
	if m != nil {
		return m.Overloads
	}
	return nil
}

func (x *MplsRouteViaStatusesRequest) GetRouteKey() *MplsRouteKey {
	if x, ok := x.GetOverloads().(*MplsRouteViaStatusesRequest_RouteKey); ok {
		return x.RouteKey
	}
	return nil
}

func (x *MplsRouteViaStatusesRequest) GetFecId() *MplsFecId {
	if x, ok := x.GetOverloads().(*MplsRouteViaStatusesRequest_FecId); ok {
		return x.FecId
	}
	return nil
}

type isMplsRouteViaStatusesRequest_Overloads interface {
	isMplsRouteViaStatusesRequest_Overloads()
}

type MplsRouteViaStatusesRequest_RouteKey struct {
	// The key of the route to query.
	RouteKey *MplsRouteKey `protobuf:"bytes,1,opt,name=route_key,json=routeKey,proto3,oneof"`
}

type MplsRouteViaStatusesRequest_FecId struct {
	// The ID of the fec to query.
	FecId *MplsFecId `protobuf:"bytes,2,opt,name=fec_id,json=fecId,proto3,oneof"`
}

func (*MplsRouteViaStatusesRequest_RouteKey) isMplsRouteViaStatusesRequest_Overloads() {}

func (*MplsRouteViaStatusesRequest_FecId) isMplsRouteViaStatusesRequest_Overloads() {}

type MplsRouteViaStatusesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vias in hardware for the MPLS route key or FEC.
	RouteVia *MplsRouteVia `protobuf:"bytes,1,opt,name=route_via,json=routeVia,proto3" json:"route_via,omitempty"`
}

func (x *MplsRouteViaStatusesResponse) Reset() {
	*x = MplsRouteViaStatusesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteViaStatusesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteViaStatusesResponse) ProtoMessage() {}

func (x *MplsRouteViaStatusesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteViaStatusesResponse.ProtoReflect.Descriptor instead.
func (*MplsRouteViaStatusesResponse) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{19}
}

func (x *MplsRouteViaStatusesResponse) GetRouteVia() *MplsRouteVia {
	if x != nil {
		return x.RouteVia
	}
	return nil
}

type MplsRouteExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Overloads:
	//
	//	*MplsRouteExistsRequest_RouteKey
	//	*MplsRouteExistsRequest_RouteVia
	Overloads isMplsRouteExistsRequest_Overloads `protobuf_oneof:"overloads"`
}

func (x *MplsRouteExistsRequest) Reset() {
	*x = MplsRouteExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteExistsRequest) ProtoMessage() {}

func (x *MplsRouteExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteExistsRequest.ProtoReflect.Descriptor instead.
func (*MplsRouteExistsRequest) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{20}
}

func (m *MplsRouteExistsRequest) GetOverloads() isMplsRouteExistsRequest_Overloads {
	if m != nil {
		return m.Overloads
	}
	return nil
}

func (x *MplsRouteExistsRequest) GetRouteKey() *MplsRouteKey {
	if x, ok := x.GetOverloads().(*MplsRouteExistsRequest_RouteKey); ok {
		return x.RouteKey
	}
	return nil
}

func (x *MplsRouteExistsRequest) GetRouteVia() *MplsRouteVia {
	if x, ok := x.GetOverloads().(*MplsRouteExistsRequest_RouteVia); ok {
		return x.RouteVia
	}
	return nil
}

type isMplsRouteExistsRequest_Overloads interface {
	isMplsRouteExistsRequest_Overloads()
}

type MplsRouteExistsRequest_RouteKey struct {
	// The key of the route to query.
	RouteKey *MplsRouteKey `protobuf:"bytes,1,opt,name=route_key,json=routeKey,proto3,oneof"`
}

type MplsRouteExistsRequest_RouteVia struct {
	// The route via to query.
	RouteVia *MplsRouteVia `protobuf:"bytes,2,opt,name=route_via,json=routeVia,proto3,oneof"`
}

func (*MplsRouteExistsRequest_RouteKey) isMplsRouteExistsRequest_Overloads() {}

func (*MplsRouteExistsRequest_RouteVia) isMplsRouteExistsRequest_Overloads() {}

type MplsRouteExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if the route or via exists in the switch config otherwise false.
	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *MplsRouteExistsResponse) Reset() {
	*x = MplsRouteExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteExistsResponse) ProtoMessage() {}

func (x *MplsRouteExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteExistsResponse.ProtoReflect.Descriptor instead.
func (*MplsRouteExistsResponse) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{21}
}

func (x *MplsRouteExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type MplsRouteSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The MPLS route to insert or update.
	Route *MplsRoute `protobuf:"bytes,1,opt,name=route,proto3" json:"route,omitempty"`
	// MPLS vias to be added to the route.
	Vias []*MplsRouteVia `protobuf:"bytes,2,rep,name=vias,proto3" json:"vias,omitempty"`
	// action associated with vias, i.e., ADD or REPLACE.
	ViasAction MplsRouteSetViasAction `protobuf:"varint,3,opt,name=vias_action,json=viasAction,proto3,enum=eos.remote.MplsRouteSetViasAction" json:"vias_action,omitempty"`
}

func (x *MplsRouteSetRequest) Reset() {
	*x = MplsRouteSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteSetRequest) ProtoMessage() {}

func (x *MplsRouteSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteSetRequest.ProtoReflect.Descriptor instead.
func (*MplsRouteSetRequest) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{22}
}

func (x *MplsRouteSetRequest) GetRoute() *MplsRoute {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *MplsRouteSetRequest) GetVias() []*MplsRouteVia {
	if x != nil {
		return x.Vias
	}
	return nil
}

func (x *MplsRouteSetRequest) GetViasAction() MplsRouteSetViasAction {
	if x != nil {
		return x.ViasAction
	}
	return MplsRouteSetViasAction_MPLS_ROUTE_SET_VIAS_ADD
}

type MplsRouteSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MplsRouteSetResponse) Reset() {
	*x = MplsRouteSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteSetResponse) ProtoMessage() {}

func (x *MplsRouteSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteSetResponse.ProtoReflect.Descriptor instead.
func (*MplsRouteSetResponse) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{23}
}

type BulkMplsRouteSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of MplsRouteSetRequests.
	Requests []*MplsRouteSetRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkMplsRouteSetRequest) Reset() {
	*x = BulkMplsRouteSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkMplsRouteSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkMplsRouteSetRequest) ProtoMessage() {}

func (x *BulkMplsRouteSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkMplsRouteSetRequest.ProtoReflect.Descriptor instead.
func (*BulkMplsRouteSetRequest) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{24}
}

func (x *BulkMplsRouteSetRequest) GetRequests() []*MplsRouteSetRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BulkMplsRouteSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of consecutive successful requests.
	Processed uint64 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	// Success or error details in the event of failure.
	Status *RpcResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BulkMplsRouteSetResponse) Reset() {
	*x = BulkMplsRouteSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkMplsRouteSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkMplsRouteSetResponse) ProtoMessage() {}

func (x *BulkMplsRouteSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkMplsRouteSetResponse.ProtoReflect.Descriptor instead.
func (*BulkMplsRouteSetResponse) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{25}
}

func (x *BulkMplsRouteSetResponse) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *BulkMplsRouteSetResponse) GetStatus() *RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type MplsRouteDelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The route key of the route to remove.
	RouteKey *MplsRouteKey `protobuf:"bytes,1,opt,name=route_key,json=routeKey,proto3" json:"route_key,omitempty"`
}

func (x *MplsRouteDelRequest) Reset() {
	*x = MplsRouteDelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteDelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteDelRequest) ProtoMessage() {}

func (x *MplsRouteDelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteDelRequest.ProtoReflect.Descriptor instead.
func (*MplsRouteDelRequest) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{26}
}

func (x *MplsRouteDelRequest) GetRouteKey() *MplsRouteKey {
	if x != nil {
		return x.RouteKey
	}
	return nil
}

type MplsRouteDelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MplsRouteDelResponse) Reset() {
	*x = MplsRouteDelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteDelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteDelResponse) ProtoMessage() {}

func (x *MplsRouteDelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteDelResponse.ProtoReflect.Descriptor instead.
func (*MplsRouteDelResponse) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{27}
}

type BulkMplsRouteDelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of MplsRouteDelRequests.
	Requests []*MplsRouteDelRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkMplsRouteDelRequest) Reset() {
	*x = BulkMplsRouteDelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkMplsRouteDelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkMplsRouteDelRequest) ProtoMessage() {}

func (x *BulkMplsRouteDelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkMplsRouteDelRequest.ProtoReflect.Descriptor instead.
func (*BulkMplsRouteDelRequest) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{28}
}

func (x *BulkMplsRouteDelRequest) GetRequests() []*MplsRouteDelRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BulkMplsRouteDelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of consecutive successful requests.
	Processed uint64 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	// Success or error details in the event of failure.
	Status *RpcResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BulkMplsRouteDelResponse) Reset() {
	*x = BulkMplsRouteDelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkMplsRouteDelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkMplsRouteDelResponse) ProtoMessage() {}

func (x *BulkMplsRouteDelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkMplsRouteDelResponse.ProtoReflect.Descriptor instead.
func (*BulkMplsRouteDelResponse) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{29}
}

func (x *BulkMplsRouteDelResponse) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *BulkMplsRouteDelResponse) GetStatus() *RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type MplsRouteViaSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The via to add to the route.
	RouteVia *MplsRouteVia `protobuf:"bytes,1,opt,name=route_via,json=routeVia,proto3" json:"route_via,omitempty"`
}

func (x *MplsRouteViaSetRequest) Reset() {
	*x = MplsRouteViaSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteViaSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteViaSetRequest) ProtoMessage() {}

func (x *MplsRouteViaSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteViaSetRequest.ProtoReflect.Descriptor instead.
func (*MplsRouteViaSetRequest) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{30}
}

func (x *MplsRouteViaSetRequest) GetRouteVia() *MplsRouteVia {
	if x != nil {
		return x.RouteVia
	}
	return nil
}

type MplsRouteViaSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MplsRouteViaSetResponse) Reset() {
	*x = MplsRouteViaSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteViaSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteViaSetResponse) ProtoMessage() {}

func (x *MplsRouteViaSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteViaSetResponse.ProtoReflect.Descriptor instead.
func (*MplsRouteViaSetResponse) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{31}
}

type BulkMplsRouteViaSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of MplsRouteViaSetRequests.
	Requests []*MplsRouteViaSetRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkMplsRouteViaSetRequest) Reset() {
	*x = BulkMplsRouteViaSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkMplsRouteViaSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkMplsRouteViaSetRequest) ProtoMessage() {}

func (x *BulkMplsRouteViaSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkMplsRouteViaSetRequest.ProtoReflect.Descriptor instead.
func (*BulkMplsRouteViaSetRequest) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{32}
}

func (x *BulkMplsRouteViaSetRequest) GetRequests() []*MplsRouteViaSetRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BulkMplsRouteViaSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of consecutive successful requests.
	Processed uint64 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	// Success or error details in the event of failure.
	Status *RpcResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BulkMplsRouteViaSetResponse) Reset() {
	*x = BulkMplsRouteViaSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkMplsRouteViaSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkMplsRouteViaSetResponse) ProtoMessage() {}

func (x *BulkMplsRouteViaSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkMplsRouteViaSetResponse.ProtoReflect.Descriptor instead.
func (*BulkMplsRouteViaSetResponse) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{33}
}

func (x *BulkMplsRouteViaSetResponse) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *BulkMplsRouteViaSetResponse) GetStatus() *RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type MplsRouteViaDelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The via to remove.
	RouteVia *MplsRouteVia `protobuf:"bytes,1,opt,name=route_via,json=routeVia,proto3" json:"route_via,omitempty"`
}

func (x *MplsRouteViaDelRequest) Reset() {
	*x = MplsRouteViaDelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteViaDelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteViaDelRequest) ProtoMessage() {}

func (x *MplsRouteViaDelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteViaDelRequest.ProtoReflect.Descriptor instead.
func (*MplsRouteViaDelRequest) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{34}
}

func (x *MplsRouteViaDelRequest) GetRouteVia() *MplsRouteVia {
	if x != nil {
		return x.RouteVia
	}
	return nil
}

type MplsRouteViaDelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MplsRouteViaDelResponse) Reset() {
	*x = MplsRouteViaDelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteViaDelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteViaDelResponse) ProtoMessage() {}

func (x *MplsRouteViaDelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteViaDelResponse.ProtoReflect.Descriptor instead.
func (*MplsRouteViaDelResponse) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{35}
}

type BulkMplsRouteViaDelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of MplsRouteViaDelRequests.
	Requests []*MplsRouteViaDelRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkMplsRouteViaDelRequest) Reset() {
	*x = BulkMplsRouteViaDelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkMplsRouteViaDelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkMplsRouteViaDelRequest) ProtoMessage() {}

func (x *BulkMplsRouteViaDelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkMplsRouteViaDelRequest.ProtoReflect.Descriptor instead.
func (*BulkMplsRouteViaDelRequest) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{36}
}

func (x *BulkMplsRouteViaDelRequest) GetRequests() []*MplsRouteViaDelRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BulkMplsRouteViaDelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of consecutive successful requests.
	Processed uint64 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	// Success or error details in the event of failure.
	Status *RpcResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BulkMplsRouteViaDelResponse) Reset() {
	*x = BulkMplsRouteViaDelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkMplsRouteViaDelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkMplsRouteViaDelResponse) ProtoMessage() {}

func (x *BulkMplsRouteViaDelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkMplsRouteViaDelResponse.ProtoReflect.Descriptor instead.
func (*BulkMplsRouteViaDelResponse) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{37}
}

func (x *BulkMplsRouteViaDelResponse) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *BulkMplsRouteViaDelResponse) GetStatus() *RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type MplsRouteFecIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The route key.
	RouteKey *MplsRouteKey `protobuf:"bytes,1,opt,name=route_key,json=routeKey,proto3" json:"route_key,omitempty"`
}

func (x *MplsRouteFecIdRequest) Reset() {
	*x = MplsRouteFecIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteFecIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteFecIdRequest) ProtoMessage() {}

func (x *MplsRouteFecIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteFecIdRequest.ProtoReflect.Descriptor instead.
func (*MplsRouteFecIdRequest) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{38}
}

func (x *MplsRouteFecIdRequest) GetRouteKey() *MplsRouteKey {
	if x != nil {
		return x.RouteKey
	}
	return nil
}

type MplsRouteFecIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The FEC ID if the route key is programmed in hardware otherwise 0.
	FecId *MplsFecId `protobuf:"bytes,1,opt,name=fec_id,json=fecId,proto3" json:"fec_id,omitempty"`
}

func (x *MplsRouteFecIdResponse) Reset() {
	*x = MplsRouteFecIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteFecIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteFecIdResponse) ProtoMessage() {}

func (x *MplsRouteFecIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteFecIdResponse.ProtoReflect.Descriptor instead.
func (*MplsRouteFecIdResponse) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{39}
}

func (x *MplsRouteFecIdResponse) GetFecId() *MplsFecId {
	if x != nil {
		return x.FecId
	}
	return nil
}

type MplsRouteMetricRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The route key to query. Its metric value is not used.
	RouteKey *MplsRouteKey `protobuf:"bytes,1,opt,name=route_key,json=routeKey,proto3" json:"route_key,omitempty"`
}

func (x *MplsRouteMetricRequest) Reset() {
	*x = MplsRouteMetricRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteMetricRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteMetricRequest) ProtoMessage() {}

func (x *MplsRouteMetricRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteMetricRequest.ProtoReflect.Descriptor instead.
func (*MplsRouteMetricRequest) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{40}
}

func (x *MplsRouteMetricRequest) GetRouteKey() *MplsRouteKey {
	if x != nil {
		return x.RouteKey
	}
	return nil
}

type MplsRouteMetricResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The metric being used in hardware to forward traffic for the specified
	// route key or 0 if it does not have any active vias programmed.
	Metric uint32 `protobuf:"varint,1,opt,name=metric,proto3" json:"metric,omitempty"`
}

func (x *MplsRouteMetricResponse) Reset() {
	*x = MplsRouteMetricResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteMetricResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteMetricResponse) ProtoMessage() {}

func (x *MplsRouteMetricResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteMetricResponse.ProtoReflect.Descriptor instead.
func (*MplsRouteMetricResponse) Descriptor() ([]byte, []int) {
	return file_mpls_route_proto_rawDescGZIP(), []int{41}
}

func (x *MplsRouteMetricResponse) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

var File_mpls_route_proto protoreflect.FileDescriptor

var file_mpls_route_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x1a, 0x16,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x53, 0x0a, 0x16, 0x4d, 0x70, 0x6c, 0x73, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x12, 0x39, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d,
	0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xc7, 0x01, 0x0a,
	0x15, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x37, 0x0a, 0x09,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c,
	0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x08, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x0b, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x0a,
	0x64, 0x75, 0x6d, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x6f, 0x76,
	0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x75, 0x0a, 0x0e, 0x4f, 0x6e, 0x4d, 0x70, 0x6c, 0x73,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x06, 0x66, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c,
	0x73, 0x46, 0x65, 0x63, 0x49, 0x64, 0x52, 0x05, 0x66, 0x65, 0x63, 0x49, 0x64, 0x22, 0x47, 0x0a,
	0x0e, 0x4f, 0x6e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x12,
	0x35, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x3c, 0x0a, 0x0c, 0x4f, 0x6e, 0x4d, 0x70, 0x6c, 0x73,
	0x46, 0x65, 0x63, 0x53, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x65, 0x63, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x46, 0x65, 0x63, 0x49, 0x64, 0x52, 0x05, 0x66,
	0x65, 0x63, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x0c, 0x4f, 0x6e, 0x4d, 0x70, 0x6c, 0x73, 0x46, 0x65,
	0x63, 0x44, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x66, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x46, 0x65, 0x63, 0x49, 0x64, 0x52, 0x05, 0x66, 0x65, 0x63,
	0x49, 0x64, 0x22, 0x6c, 0x0a, 0x0f, 0x4f, 0x6e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x44, 0x75, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x76, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70,
	0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x52, 0x04, 0x76, 0x69, 0x61, 0x73,
	0x22, 0xa8, 0x03, 0x0a, 0x16, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x47, 0x0a,
	0x11, 0x6f, 0x6e, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4f, 0x6e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x6e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x53, 0x65, 0x74, 0x12, 0x47, 0x0a, 0x11, 0x6f, 0x6e, 0x5f, 0x6d, 0x70, 0x6c,
	0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4f,
	0x6e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x48, 0x00, 0x52,
	0x0e, 0x6f, 0x6e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x12,
	0x41, 0x0a, 0x0f, 0x6f, 0x6e, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x66, 0x65, 0x63, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4f, 0x6e, 0x4d, 0x70, 0x6c, 0x73, 0x46, 0x65, 0x63, 0x53,
	0x65, 0x74, 0x48, 0x01, 0x52, 0x0c, 0x6f, 0x6e, 0x4d, 0x70, 0x6c, 0x73, 0x46, 0x65, 0x63, 0x53,
	0x65, 0x74, 0x12, 0x41, 0x0a, 0x0f, 0x6f, 0x6e, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x66, 0x65,
	0x63, 0x5f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4f, 0x6e, 0x4d, 0x70, 0x6c, 0x73, 0x46,
	0x65, 0x63, 0x44, 0x65, 0x6c, 0x48, 0x01, 0x52, 0x0c, 0x6f, 0x6e, 0x4d, 0x70, 0x6c, 0x73, 0x46,
	0x65, 0x63, 0x44, 0x65, 0x6c, 0x12, 0x48, 0x0a, 0x12, 0x6f, 0x6e, 0x5f, 0x6d, 0x70, 0x6c, 0x73,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x75, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4f,
	0x6e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x0f,
	0x6f, 0x6e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x75, 0x6d, 0x70, 0x42,
	0x0d, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x66, 0x65, 0x63, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x1c, 0x0a, 0x1a, 0x4d,
	0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x4d, 0x70, 0x6c,
	0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x0a, 0x1e, 0x4d, 0x70, 0x6c, 0x73,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x21, 0x0a, 0x1f, 0x4d, 0x70,
	0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x0a,
	0x11, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x69, 0x61,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56,
	0x69, 0x61, 0x73, 0x22, 0x6f, 0x0a, 0x12, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x76, 0x69, 0x61, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x52, 0x04,
	0x76, 0x69, 0x61, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x52, 0x0a, 0x19, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70,
	0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x22, 0x4d, 0x0a, 0x14, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x56, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x09,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c,
	0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x22, 0x4e, 0x0a, 0x15, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x56, 0x69, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x09,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x69, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c,
	0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x56, 0x69, 0x61, 0x22, 0x93, 0x01, 0x0a, 0x1b, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x56, 0x69, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x48, 0x00, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x06,
	0x66, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x46, 0x65,
	0x63, 0x49, 0x64, 0x48, 0x00, 0x52, 0x05, 0x66, 0x65, 0x63, 0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09,
	0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22, 0x55, 0x0a, 0x1c, 0x4d, 0x70, 0x6c,
	0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x76, 0x69, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61,
	0x22, 0x97, 0x01, 0x0a, 0x16, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x69,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69,
	0x61, 0x48, 0x00, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x42, 0x0b, 0x0a,
	0x09, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22, 0x31, 0x0a, 0x17, 0x4d, 0x70,
	0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0xb5, 0x01,
	0x0a, 0x13, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x76, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70,
	0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x52, 0x04, 0x76, 0x69, 0x61, 0x73,
	0x12, 0x43, 0x0a, 0x0b, 0x76, 0x69, 0x61, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x74, 0x56,
	0x69, 0x61, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x76, 0x69, 0x61, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x16, 0x0a, 0x14, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x0a,
	0x17, 0x42, 0x75, 0x6c, 0x6b, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x6f, 0x0a, 0x18, 0x42, 0x75, 0x6c, 0x6b, 0x4d, 0x70, 0x6c,
	0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12,
	0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x52, 0x70, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4c, 0x0a, 0x13, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a,
	0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70,
	0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x22, 0x16, 0x0a, 0x14, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x0a, 0x17,
	0x42, 0x75, 0x6c, 0x6b, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x22, 0x6f, 0x0a, 0x18, 0x42, 0x75, 0x6c, 0x6b, 0x4d, 0x70, 0x6c, 0x73,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x35,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4f, 0x0a, 0x16, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x56, 0x69, 0x61, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x69, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x52, 0x08, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x22, 0x19, 0x0a, 0x17, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x5c, 0x0a, 0x1a, 0x42, 0x75, 0x6c, 0x6b, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x56, 0x69, 0x61, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d,
	0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22,
	0x72, 0x0a, 0x1b, 0x42, 0x75, 0x6c, 0x6b, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x56, 0x69, 0x61, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x4f, 0x0a, 0x16, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x56, 0x69, 0x61, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a,
	0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x69, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70,
	0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x56, 0x69, 0x61, 0x22, 0x19, 0x0a, 0x17, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x56, 0x69, 0x61, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x5c, 0x0a, 0x1a, 0x42, 0x75, 0x6c, 0x6b, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x56, 0x69, 0x61, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c,
	0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x72, 0x0a,
	0x1b, 0x42, 0x75, 0x6c, 0x6b, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69,
	0x61, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x4e, 0x0a, 0x15, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x46, 0x65,
	0x63, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x22, 0x46, 0x0a, 0x16, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x46, 0x65,
	0x63, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x66,
	0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x46, 0x65, 0x63,
	0x49, 0x64, 0x52, 0x05, 0x66, 0x65, 0x63, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x16, 0x4d, 0x70, 0x6c,
	0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x31, 0x0a, 0x17, 0x4d, 0x70,
	0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2a, 0x57, 0x0a,
	0x15, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x53, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f,
	0x56, 0x49, 0x41, 0x53, 0x10, 0x02, 0x2a, 0x56, 0x0a, 0x16, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x53, 0x65, 0x74, 0x56, 0x69, 0x61, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x56, 0x49, 0x41, 0x53, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x4d, 0x50, 0x4c, 0x53, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f,
	0x56, 0x49, 0x41, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x01, 0x32, 0xd2,
	0x0d, 0x0a, 0x13, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x67, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x21, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c,
	0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x60, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x26, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d,
	0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0f,
	0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x2a, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c,
	0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0b, 0x6d, 0x70,
	0x6c, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x66, 0x0a, 0x13,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x5a, 0x0a, 0x0f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x76, 0x69, 0x61, 0x73, 0x12, 0x20, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69,
	0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x56, 0x69, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x70, 0x0a, 0x17, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x76,
	0x69, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x56, 0x69, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x53, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70,
	0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e, 0x6d, 0x70, 0x6c, 0x73, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62,
	0x0a, 0x13, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x73, 0x65, 0x74, 0x12, 0x23, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x4d, 0x70, 0x6c, 0x73,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x64, 0x65, 0x6c, 0x12, 0x1f, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x13, 0x62, 0x75, 0x6c,
	0x6b, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c,
	0x12, 0x23, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75,
	0x6c, 0x6b, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a,
	0x12, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x69, 0x61, 0x5f,
	0x73, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69,
	0x61, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c,
	0x0a, 0x17, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x76, 0x69, 0x61, 0x5f, 0x73, 0x65, 0x74, 0x12, 0x26, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x4d, 0x70, 0x6c, 0x73, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42,
	0x75, 0x6c, 0x6b, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12,
	0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x69, 0x61, 0x5f, 0x64,
	0x65, 0x6c, 0x12, 0x22, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x44, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61,
	0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a,
	0x17, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x76, 0x69, 0x61, 0x5f, 0x64, 0x65, 0x6c, 0x12, 0x26, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75,
	0x6c, 0x6b, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x44, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x06, 0x66,
	0x65, 0x63, 0x5f, 0x69, 0x64, 0x12, 0x21, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x46, 0x65, 0x63, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x46,
	0x65, 0x63, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x22, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x12, 0x5a, 0x10, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x45, 0x6f,
	0x73, 0x53, 0x64, 0x6b, 0x52, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mpls_route_proto_rawDescOnce sync.Once
	file_mpls_route_proto_rawDescData = file_mpls_route_proto_rawDesc
)

func file_mpls_route_proto_rawDescGZIP() []byte {
	file_mpls_route_proto_rawDescOnce.Do(func() {
		file_mpls_route_proto_rawDescData = protoimpl.X.CompressGZIP(file_mpls_route_proto_rawDescData)
	})
	return file_mpls_route_proto_rawDescData
}

var file_mpls_route_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_mpls_route_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_mpls_route_proto_goTypes = []interface{}{
	(MplsRouteWatchedField)(0),              // 0: eos.remote.MplsRouteWatchedField
	(MplsRouteSetViasAction)(0),             // 1: eos.remote.MplsRouteSetViasAction
	(*MplsRouteFieldsControl)(nil),          // 2: eos.remote.MplsRouteFieldsControl
	(*MplsRouteWatchRequest)(nil),           // 3: eos.remote.MplsRouteWatchRequest
	(*OnMplsRouteSet)(nil),                  // 4: eos.remote.OnMplsRouteSet
	(*OnMplsRouteDel)(nil),                  // 5: eos.remote.OnMplsRouteDel
	(*OnMplsFecSet)(nil),                    // 6: eos.remote.OnMplsFecSet
	(*OnMplsFecDel)(nil),                    // 7: eos.remote.OnMplsFecDel
	(*OnMplsRouteDump)(nil),                 // 8: eos.remote.OnMplsRouteDump
	(*MplsRouteWatchResponse)(nil),          // 9: eos.remote.MplsRouteWatchResponse
	(*MplsRouteResyncInitRequest)(nil),      // 10: eos.remote.MplsRouteResyncInitRequest
	(*MplsRouteResyncInitResponse)(nil),     // 11: eos.remote.MplsRouteResyncInitResponse
	(*MplsRouteResyncCompleteRequest)(nil),  // 12: eos.remote.MplsRouteResyncCompleteRequest
	(*MplsRouteResyncCompleteResponse)(nil), // 13: eos.remote.MplsRouteResyncCompleteResponse
	(*MplsRoutesRequest)(nil),               // 14: eos.remote.MplsRoutesRequest
	(*MplsRoutesResponse)(nil),              // 15: eos.remote.MplsRoutesResponse
	(*MplsRouteStatusesRequest)(nil),        // 16: eos.remote.MplsRouteStatusesRequest
	(*MplsRouteStatusesResponse)(nil),       // 17: eos.remote.MplsRouteStatusesResponse
	(*MplsRouteViasRequest)(nil),            // 18: eos.remote.MplsRouteViasRequest
	(*MplsRouteViasResponse)(nil),           // 19: eos.remote.MplsRouteViasResponse
	(*MplsRouteViaStatusesRequest)(nil),     // 20: eos.remote.MplsRouteViaStatusesRequest
	(*MplsRouteViaStatusesResponse)(nil),    // 21: eos.remote.MplsRouteViaStatusesResponse
	(*MplsRouteExistsRequest)(nil),          // 22: eos.remote.MplsRouteExistsRequest
	(*MplsRouteExistsResponse)(nil),         // 23: eos.remote.MplsRouteExistsResponse
	(*MplsRouteSetRequest)(nil),             // 24: eos.remote.MplsRouteSetRequest
	(*MplsRouteSetResponse)(nil),            // 25: eos.remote.MplsRouteSetResponse
	(*BulkMplsRouteSetRequest)(nil),         // 26: eos.remote.BulkMplsRouteSetRequest
	(*BulkMplsRouteSetResponse)(nil),        // 27: eos.remote.BulkMplsRouteSetResponse
	(*MplsRouteDelRequest)(nil),             // 28: eos.remote.MplsRouteDelRequest
	(*MplsRouteDelResponse)(nil),            // 29: eos.remote.MplsRouteDelResponse
	(*BulkMplsRouteDelRequest)(nil),         // 30: eos.remote.BulkMplsRouteDelRequest
	(*BulkMplsRouteDelResponse)(nil),        // 31: eos.remote.BulkMplsRouteDelResponse
	(*MplsRouteViaSetRequest)(nil),          // 32: eos.remote.MplsRouteViaSetRequest
	(*MplsRouteViaSetResponse)(nil),         // 33: eos.remote.MplsRouteViaSetResponse
	(*BulkMplsRouteViaSetRequest)(nil),      // 34: eos.remote.BulkMplsRouteViaSetRequest
	(*BulkMplsRouteViaSetResponse)(nil),     // 35: eos.remote.BulkMplsRouteViaSetResponse
	(*MplsRouteViaDelRequest)(nil),          // 36: eos.remote.MplsRouteViaDelRequest
	(*MplsRouteViaDelResponse)(nil),         // 37: eos.remote.MplsRouteViaDelResponse
	(*BulkMplsRouteViaDelRequest)(nil),      // 38: eos.remote.BulkMplsRouteViaDelRequest
	(*BulkMplsRouteViaDelResponse)(nil),     // 39: eos.remote.BulkMplsRouteViaDelResponse
	(*MplsRouteFecIdRequest)(nil),           // 40: eos.remote.MplsRouteFecIdRequest
	(*MplsRouteFecIdResponse)(nil),          // 41: eos.remote.MplsRouteFecIdResponse
	(*MplsRouteMetricRequest)(nil),          // 42: eos.remote.MplsRouteMetricRequest
	(*MplsRouteMetricResponse)(nil),         // 43: eos.remote.MplsRouteMetricResponse
	(*MplsRouteKey)(nil),                    // 44: eos.remote.MplsRouteKey
	(*MplsFecId)(nil),                       // 45: eos.remote.MplsFecId
	(*MplsRoute)(nil),                       // 46: eos.remote.MplsRoute
	(*MplsRouteVia)(nil),                    // 47: eos.remote.MplsRouteVia
	(*RpcResponseStatus)(nil),               // 48: eos.remote.RpcResponseStatus
}
var file_mpls_route_proto_depIdxs = []int32{
	0,  // 0: eos.remote.MplsRouteFieldsControl.fields:type_name -> eos.remote.MplsRouteWatchedField
	44, // 1: eos.remote.MplsRouteWatchRequest.route_key:type_name -> eos.remote.MplsRouteKey
	2,  // 2: eos.remote.MplsRouteWatchRequest.dump_fields:type_name -> eos.remote.MplsRouteFieldsControl
	44, // 3: eos.remote.OnMplsRouteSet.route_key:type_name -> eos.remote.MplsRouteKey
	45, // 4: eos.remote.OnMplsRouteSet.fec_id:type_name -> eos.remote.MplsFecId
	44, // 5: eos.remote.OnMplsRouteDel.route_key:type_name -> eos.remote.MplsRouteKey
	45, // 6: eos.remote.OnMplsFecSet.fec_id:type_name -> eos.remote.MplsFecId
	45, // 7: eos.remote.OnMplsFecDel.fec_id:type_name -> eos.remote.MplsFecId
	46, // 8: eos.remote.OnMplsRouteDump.route:type_name -> eos.remote.MplsRoute
	47, // 9: eos.remote.OnMplsRouteDump.vias:type_name -> eos.remote.MplsRouteVia
	4,  // 10: eos.remote.MplsRouteWatchResponse.on_mpls_route_set:type_name -> eos.remote.OnMplsRouteSet
	5,  // 11: eos.remote.MplsRouteWatchResponse.on_mpls_route_del:type_name -> eos.remote.OnMplsRouteDel
	6,  // 12: eos.remote.MplsRouteWatchResponse.on_mpls_fec_set:type_name -> eos.remote.OnMplsFecSet
	7,  // 13: eos.remote.MplsRouteWatchResponse.on_mpls_fec_del:type_name -> eos.remote.OnMplsFecDel
	8,  // 14: eos.remote.MplsRouteWatchResponse.on_mpls_route_dump:type_name -> eos.remote.OnMplsRouteDump
	46, // 15: eos.remote.MplsRoutesResponse.route:type_name -> eos.remote.MplsRoute
	47, // 16: eos.remote.MplsRoutesResponse.vias:type_name -> eos.remote.MplsRouteVia
	44, // 17: eos.remote.MplsRouteStatusesResponse.route_key:type_name -> eos.remote.MplsRouteKey
	44, // 18: eos.remote.MplsRouteViasRequest.route_key:type_name -> eos.remote.MplsRouteKey
	47, // 19: eos.remote.MplsRouteViasResponse.route_via:type_name -> eos.remote.MplsRouteVia
	44, // 20: eos.remote.MplsRouteViaStatusesRequest.route_key:type_name -> eos.remote.MplsRouteKey
	45, // 21: eos.remote.MplsRouteViaStatusesRequest.fec_id:type_name -> eos.remote.MplsFecId
	47, // 22: eos.remote.MplsRouteViaStatusesResponse.route_via:type_name -> eos.remote.MplsRouteVia
	44, // 23: eos.remote.MplsRouteExistsRequest.route_key:type_name -> eos.remote.MplsRouteKey
	47, // 24: eos.remote.MplsRouteExistsRequest.route_via:type_name -> eos.remote.MplsRouteVia
	46, // 25: eos.remote.MplsRouteSetRequest.route:type_name -> eos.remote.MplsRoute
	47, // 26: eos.remote.MplsRouteSetRequest.vias:type_name -> eos.remote.MplsRouteVia
	1,  // 27: eos.remote.MplsRouteSetRequest.vias_action:type_name -> eos.remote.MplsRouteSetViasAction
	24, // 28: eos.remote.BulkMplsRouteSetRequest.requests:type_name -> eos.remote.MplsRouteSetRequest
	48, // 29: eos.remote.BulkMplsRouteSetResponse.status:type_name -> eos.remote.RpcResponseStatus
	44, // 30: eos.remote.MplsRouteDelRequest.route_key:type_name -> eos.remote.MplsRouteKey
	28, // 31: eos.remote.BulkMplsRouteDelRequest.requests:type_name -> eos.remote.MplsRouteDelRequest
	48, // 32: eos.remote.BulkMplsRouteDelResponse.status:type_name -> eos.remote.RpcResponseStatus
	47, // 33: eos.remote.MplsRouteViaSetRequest.route_via:type_name -> eos.remote.MplsRouteVia
	32, // 34: eos.remote.BulkMplsRouteViaSetRequest.requests:type_name -> eos.remote.MplsRouteViaSetRequest
	48, // 35: eos.remote.BulkMplsRouteViaSetResponse.status:type_name -> eos.remote.RpcResponseStatus
	47, // 36: eos.remote.MplsRouteViaDelRequest.route_via:type_name -> eos.remote.MplsRouteVia
	36, // 37: eos.remote.BulkMplsRouteViaDelRequest.requests:type_name -> eos.remote.MplsRouteViaDelRequest
	48, // 38: eos.remote.BulkMplsRouteViaDelResponse.status:type_name -> eos.remote.RpcResponseStatus
	44, // 39: eos.remote.MplsRouteFecIdRequest.route_key:type_name -> eos.remote.MplsRouteKey
	45, // 40: eos.remote.MplsRouteFecIdResponse.fec_id:type_name -> eos.remote.MplsFecId
	44, // 41: eos.remote.MplsRouteMetricRequest.route_key:type_name -> eos.remote.MplsRouteKey
	3,  // 42: eos.remote.MplsRouteMgrService.watch:input_type -> eos.remote.MplsRouteWatchRequest
	10, // 43: eos.remote.MplsRouteMgrService.resync_init:input_type -> eos.remote.MplsRouteResyncInitRequest
	12, // 44: eos.remote.MplsRouteMgrService.resync_complete:input_type -> eos.remote.MplsRouteResyncCompleteRequest
	14, // 45: eos.remote.MplsRouteMgrService.mpls_routes:input_type -> eos.remote.MplsRoutesRequest
	16, // 46: eos.remote.MplsRouteMgrService.mpls_route_statuses:input_type -> eos.remote.MplsRouteStatusesRequest
	18, // 47: eos.remote.MplsRouteMgrService.mpls_route_vias:input_type -> eos.remote.MplsRouteViasRequest
	20, // 48: eos.remote.MplsRouteMgrService.mpls_route_via_statuses:input_type -> eos.remote.MplsRouteViaStatusesRequest
	22, // 49: eos.remote.MplsRouteMgrService.exists:input_type -> eos.remote.MplsRouteExistsRequest
	24, // 50: eos.remote.MplsRouteMgrService.mpls_route_set:input_type -> eos.remote.MplsRouteSetRequest
	26, // 51: eos.remote.MplsRouteMgrService.bulk_mpls_route_set:input_type -> eos.remote.BulkMplsRouteSetRequest
	28, // 52: eos.remote.MplsRouteMgrService.mpls_route_del:input_type -> eos.remote.MplsRouteDelRequest
	30, // 53: eos.remote.MplsRouteMgrService.bulk_mpls_route_del:input_type -> eos.remote.BulkMplsRouteDelRequest
	32, // 54: eos.remote.MplsRouteMgrService.mpls_route_via_set:input_type -> eos.remote.MplsRouteViaSetRequest
	34, // 55: eos.remote.MplsRouteMgrService.bulk_mpls_route_via_set:input_type -> eos.remote.BulkMplsRouteViaSetRequest
	36, // 56: eos.remote.MplsRouteMgrService.mpls_route_via_del:input_type -> eos.remote.MplsRouteViaDelRequest
	38, // 57: eos.remote.MplsRouteMgrService.bulk_mpls_route_via_del:input_type -> eos.remote.BulkMplsRouteViaDelRequest
	40, // 58: eos.remote.MplsRouteMgrService.fec_id:input_type -> eos.remote.MplsRouteFecIdRequest
	42, // 59: eos.remote.MplsRouteMgrService.metric:input_type -> eos.remote.MplsRouteMetricRequest
	9,  // 60: eos.remote.MplsRouteMgrService.watch:output_type -> eos.remote.MplsRouteWatchResponse
	11, // 61: eos.remote.MplsRouteMgrService.resync_init:output_type -> eos.remote.MplsRouteResyncInitResponse
	13, // 62: eos.remote.MplsRouteMgrService.resync_complete:output_type -> eos.remote.MplsRouteResyncCompleteResponse
	15, // 63: eos.remote.MplsRouteMgrService.mpls_routes:output_type -> eos.remote.MplsRoutesResponse
	17, // 64: eos.remote.MplsRouteMgrService.mpls_route_statuses:output_type -> eos.remote.MplsRouteStatusesResponse
	19, // 65: eos.remote.MplsRouteMgrService.mpls_route_vias:output_type -> eos.remote.MplsRouteViasResponse
	21, // 66: eos.remote.MplsRouteMgrService.mpls_route_via_statuses:output_type -> eos.remote.MplsRouteViaStatusesResponse
	23, // 67: eos.remote.MplsRouteMgrService.exists:output_type -> eos.remote.MplsRouteExistsResponse
	25, // 68: eos.remote.MplsRouteMgrService.mpls_route_set:output_type -> eos.remote.MplsRouteSetResponse
	27, // 69: eos.remote.MplsRouteMgrService.bulk_mpls_route_set:output_type -> eos.remote.BulkMplsRouteSetResponse
	29, // 70: eos.remote.MplsRouteMgrService.mpls_route_del:output_type -> eos.remote.MplsRouteDelResponse
	31, // 71: eos.remote.MplsRouteMgrService.bulk_mpls_route_del:output_type -> eos.remote.BulkMplsRouteDelResponse
	33, // 72: eos.remote.MplsRouteMgrService.mpls_route_via_set:output_type -> eos.remote.MplsRouteViaSetResponse
	35, // 73: eos.remote.MplsRouteMgrService.bulk_mpls_route_via_set:output_type -> eos.remote.BulkMplsRouteViaSetResponse
	37, // 74: eos.remote.MplsRouteMgrService.mpls_route_via_del:output_type -> eos.remote.MplsRouteViaDelResponse
	39, // 75: eos.remote.MplsRouteMgrService.bulk_mpls_route_via_del:output_type -> eos.remote.BulkMplsRouteViaDelResponse
	41, // 76: eos.remote.MplsRouteMgrService.fec_id:output_type -> eos.remote.MplsRouteFecIdResponse
	43, // 77: eos.remote.MplsRouteMgrService.metric:output_type -> eos.remote.MplsRouteMetricResponse
	60, // [60:78] is the sub-list for method output_type
	42, // [42:60] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_mpls_route_proto_init() }
func file_mpls_route_proto_init() {
	if File_mpls_route_proto != nil {
		return
	}
	file_mpls_route_types_proto_init()
	file_rpc_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mpls_route_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteFieldsControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteWatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnMplsRouteSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnMplsRouteDel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnMplsFecSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnMplsFecDel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnMplsRouteDump); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteWatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteResyncInitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteResyncInitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteResyncCompleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteResyncCompleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRoutesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRoutesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteStatusesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteStatusesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteViasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteViasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteViaStatusesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteViaStatusesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkMplsRouteSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkMplsRouteSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteDelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteDelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkMplsRouteDelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkMplsRouteDelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteViaSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteViaSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkMplsRouteViaSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkMplsRouteViaSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteViaDelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteViaDelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkMplsRouteViaDelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkMplsRouteViaDelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteFecIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteFecIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteMetricRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteMetricResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mpls_route_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*MplsRouteWatchRequest_All)(nil),
		(*MplsRouteWatchRequest_RouteKey)(nil),
	}
	file_mpls_route_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*MplsRouteWatchResponse_OnMplsRouteSet)(nil),
		(*MplsRouteWatchResponse_OnMplsRouteDel)(nil),
		(*MplsRouteWatchResponse_OnMplsFecSet)(nil),
		(*MplsRouteWatchResponse_OnMplsFecDel)(nil),
	}
	file_mpls_route_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*MplsRouteViaStatusesRequest_RouteKey)(nil),
		(*MplsRouteViaStatusesRequest_FecId)(nil),
	}
	file_mpls_route_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*MplsRouteExistsRequest_RouteKey)(nil),
		(*MplsRouteExistsRequest_RouteVia)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mpls_route_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mpls_route_proto_goTypes,
		DependencyIndexes: file_mpls_route_proto_depIdxs,
		EnumInfos:         file_mpls_route_proto_enumTypes,
		MessageInfos:      file_mpls_route_proto_msgTypes,
	}.Build()
	File_mpls_route_proto = out.File
	file_mpls_route_proto_rawDesc = nil
	file_mpls_route_proto_goTypes = nil
	file_mpls_route_proto_depIdxs = nil
}
