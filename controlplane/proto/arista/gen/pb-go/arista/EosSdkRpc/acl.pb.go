// Copyright (c) 2022 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: acl.proto

package EosSdkRpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AclWatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set to true if an immediate acknowledgment is desired.
	Ack bool `protobuf:"varint,1,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (x *AclWatchRequest) Reset() {
	*x = AclWatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclWatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclWatchRequest) ProtoMessage() {}

func (x *AclWatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclWatchRequest.ProtoReflect.Descriptor instead.
func (*AclWatchRequest) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{0}
}

func (x *AclWatchRequest) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

// *
//
//	Notification for when all pending transactions have been successfully committed
//	to hardware. May be called multiple times for a single transaction or only once
//	for a whole bunch of seperate updates. May also be called due to ACL updates
//	made using the CLI.
type OnAclSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OnAclSync) Reset() {
	*x = OnAclSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnAclSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnAclSync) ProtoMessage() {}

func (x *OnAclSync) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnAclSync.ProtoReflect.Descriptor instead.
func (*OnAclSync) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{1}
}

// *
//
//	Notification for when a problem has stopped ACL configuration from being
//	committed to hardware. The config must be modified in some way to get Sysdb and
//	hardware back in sync. The most common problem is too many ACLs or ACL entries.
//	It is up to the client to find and fix the issue. After committing the
//	required modifications an on_acl_sync notification will be sent if the problem is
//	fixed otherwsie another on_acl_sync_fail notification will be sent to indicate
//	there is still a problem.
//
//	Note: Multiple nofitications may be sent for a single problem and notifications
//	      may be sent due to misconfigurations made using the CLI.
type OnAclSyncFail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The linecard reporting the issue.
	Linecard string `protobuf:"bytes,1,opt,name=linecard,proto3" json:"linecard,omitempty"`
	// An error message describing the problem.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *OnAclSyncFail) Reset() {
	*x = OnAclSyncFail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnAclSyncFail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnAclSyncFail) ProtoMessage() {}

func (x *OnAclSyncFail) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnAclSyncFail.ProtoReflect.Descriptor instead.
func (*OnAclSyncFail) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{2}
}

func (x *OnAclSyncFail) GetLinecard() string {
	if x != nil {
		return x.Linecard
	}
	return ""
}

func (x *OnAclSyncFail) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AclWatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AclEvent:
	//
	//	*AclWatchResponse_Ack
	//	*AclWatchResponse_OnAclSync
	//	*AclWatchResponse_OnAclSyncFail
	AclEvent isAclWatchResponse_AclEvent `protobuf_oneof:"acl_event"`
}

func (x *AclWatchResponse) Reset() {
	*x = AclWatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclWatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclWatchResponse) ProtoMessage() {}

func (x *AclWatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclWatchResponse.ProtoReflect.Descriptor instead.
func (*AclWatchResponse) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{3}
}

func (m *AclWatchResponse) GetAclEvent() isAclWatchResponse_AclEvent {
	if m != nil {
		return m.AclEvent
	}
	return nil
}

func (x *AclWatchResponse) GetAck() bool {
	if x, ok := x.GetAclEvent().(*AclWatchResponse_Ack); ok {
		return x.Ack
	}
	return false
}

func (x *AclWatchResponse) GetOnAclSync() *OnAclSync {
	if x, ok := x.GetAclEvent().(*AclWatchResponse_OnAclSync); ok {
		return x.OnAclSync
	}
	return nil
}

func (x *AclWatchResponse) GetOnAclSyncFail() *OnAclSyncFail {
	if x, ok := x.GetAclEvent().(*AclWatchResponse_OnAclSyncFail); ok {
		return x.OnAclSyncFail
	}
	return nil
}

type isAclWatchResponse_AclEvent interface {
	isAclWatchResponse_AclEvent()
}

type AclWatchResponse_Ack struct {
	// If true the agent is now actively watching for events.
	Ack bool `protobuf:"varint,1,opt,name=ack,proto3,oneof"`
}

type AclWatchResponse_OnAclSync struct {
	// All pending transactions have been successfully committed to hardware.
	OnAclSync *OnAclSync `protobuf:"bytes,2,opt,name=on_acl_sync,json=onAclSync,proto3,oneof"`
}

type AclWatchResponse_OnAclSyncFail struct {
	// A problem has stopped the ACL configuration from being committed to
	// hardware.
	OnAclSyncFail *OnAclSyncFail `protobuf:"bytes,3,opt,name=on_acl_sync_fail,json=onAclSyncFail,proto3,oneof"`
}

func (*AclWatchResponse_Ack) isAclWatchResponse_AclEvent() {}

func (*AclWatchResponse_OnAclSync) isAclWatchResponse_AclEvent() {}

func (*AclWatchResponse_OnAclSyncFail) isAclWatchResponse_AclEvent() {}

type AclsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AclsRequest) Reset() {
	*x = AclsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclsRequest) ProtoMessage() {}

func (x *AclsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclsRequest.ProtoReflect.Descriptor instead.
func (*AclsRequest) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{4}
}

// *
// An acl that was created by this application.
type AclsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *AclKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *AclsResponse) Reset() {
	*x = AclsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclsResponse) ProtoMessage() {}

func (x *AclsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclsResponse.ProtoReflect.Descriptor instead.
func (*AclsResponse) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{5}
}

func (x *AclsResponse) GetKey() *AclKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type AclsAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AclsAllRequest) Reset() {
	*x = AclsAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclsAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclsAllRequest) ProtoMessage() {}

func (x *AclsAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclsAllRequest.ProtoReflect.Descriptor instead.
func (*AclsAllRequest) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{6}
}

// *
// An acl that was created by this application.
type AclsAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *AclKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *AclsAllResponse) Reset() {
	*x = AclsAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclsAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclsAllResponse) ProtoMessage() {}

func (x *AclsAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclsAllResponse.ProtoReflect.Descriptor instead.
func (*AclsAllResponse) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{7}
}

func (x *AclsAllResponse) GetKey() *AclKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type AclRuleIpsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of ACL to get the IP rules for.
	Key *AclKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *AclRuleIpsRequest) Reset() {
	*x = AclRuleIpsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclRuleIpsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclRuleIpsRequest) ProtoMessage() {}

func (x *AclRuleIpsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclRuleIpsRequest.ProtoReflect.Descriptor instead.
func (*AclRuleIpsRequest) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{8}
}

func (x *AclRuleIpsRequest) GetKey() *AclKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type AclRuleIpEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber uint32     `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	IpRule         *AclRuleIp `protobuf:"bytes,2,opt,name=ip_rule,json=ipRule,proto3" json:"ip_rule,omitempty"`
}

func (x *AclRuleIpEntry) Reset() {
	*x = AclRuleIpEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclRuleIpEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclRuleIpEntry) ProtoMessage() {}

func (x *AclRuleIpEntry) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclRuleIpEntry.ProtoReflect.Descriptor instead.
func (*AclRuleIpEntry) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{9}
}

func (x *AclRuleIpEntry) GetSequenceNumber() uint32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *AclRuleIpEntry) GetIpRule() *AclRuleIp {
	if x != nil {
		return x.IpRule
	}
	return nil
}

type AclRuleIpsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpRule *AclRuleIpEntry `protobuf:"bytes,1,opt,name=ip_rule,json=ipRule,proto3" json:"ip_rule,omitempty"`
}

func (x *AclRuleIpsResponse) Reset() {
	*x = AclRuleIpsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclRuleIpsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclRuleIpsResponse) ProtoMessage() {}

func (x *AclRuleIpsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclRuleIpsResponse.ProtoReflect.Descriptor instead.
func (*AclRuleIpsResponse) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{10}
}

func (x *AclRuleIpsResponse) GetIpRule() *AclRuleIpEntry {
	if x != nil {
		return x.IpRule
	}
	return nil
}

type AclAllRuleIpsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of ACL to get the IP rules for.
	Key *AclKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *AclAllRuleIpsRequest) Reset() {
	*x = AclAllRuleIpsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclAllRuleIpsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclAllRuleIpsRequest) ProtoMessage() {}

func (x *AclAllRuleIpsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclAllRuleIpsRequest.ProtoReflect.Descriptor instead.
func (*AclAllRuleIpsRequest) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{11}
}

func (x *AclAllRuleIpsRequest) GetKey() *AclKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type AclAllRuleIpsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpRule *AclRuleIpEntry `protobuf:"bytes,1,opt,name=ip_rule,json=ipRule,proto3" json:"ip_rule,omitempty"`
}

func (x *AclAllRuleIpsResponse) Reset() {
	*x = AclAllRuleIpsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclAllRuleIpsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclAllRuleIpsResponse) ProtoMessage() {}

func (x *AclAllRuleIpsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclAllRuleIpsResponse.ProtoReflect.Descriptor instead.
func (*AclAllRuleIpsResponse) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{12}
}

func (x *AclAllRuleIpsResponse) GetIpRule() *AclRuleIpEntry {
	if x != nil {
		return x.IpRule
	}
	return nil
}

type AclRuleEthsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of ACL to get the ethernet rules for.
	Key *AclKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *AclRuleEthsRequest) Reset() {
	*x = AclRuleEthsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclRuleEthsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclRuleEthsRequest) ProtoMessage() {}

func (x *AclRuleEthsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclRuleEthsRequest.ProtoReflect.Descriptor instead.
func (*AclRuleEthsRequest) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{13}
}

func (x *AclRuleEthsRequest) GetKey() *AclKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type AclRuleEthEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceNumber uint32      `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	EthRule        *AclRuleEth `protobuf:"bytes,2,opt,name=eth_rule,json=ethRule,proto3" json:"eth_rule,omitempty"`
}

func (x *AclRuleEthEntry) Reset() {
	*x = AclRuleEthEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclRuleEthEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclRuleEthEntry) ProtoMessage() {}

func (x *AclRuleEthEntry) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclRuleEthEntry.ProtoReflect.Descriptor instead.
func (*AclRuleEthEntry) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{14}
}

func (x *AclRuleEthEntry) GetSequenceNumber() uint32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *AclRuleEthEntry) GetEthRule() *AclRuleEth {
	if x != nil {
		return x.EthRule
	}
	return nil
}

type AclRuleEthsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EthRule *AclRuleEthEntry `protobuf:"bytes,1,opt,name=eth_rule,json=ethRule,proto3" json:"eth_rule,omitempty"`
}

func (x *AclRuleEthsResponse) Reset() {
	*x = AclRuleEthsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclRuleEthsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclRuleEthsResponse) ProtoMessage() {}

func (x *AclRuleEthsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclRuleEthsResponse.ProtoReflect.Descriptor instead.
func (*AclRuleEthsResponse) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{15}
}

func (x *AclRuleEthsResponse) GetEthRule() *AclRuleEthEntry {
	if x != nil {
		return x.EthRule
	}
	return nil
}

type AclAllRuleEthsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of ACL to get the ethernet rules for.
	Key *AclKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *AclAllRuleEthsRequest) Reset() {
	*x = AclAllRuleEthsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclAllRuleEthsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclAllRuleEthsRequest) ProtoMessage() {}

func (x *AclAllRuleEthsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclAllRuleEthsRequest.ProtoReflect.Descriptor instead.
func (*AclAllRuleEthsRequest) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{16}
}

func (x *AclAllRuleEthsRequest) GetKey() *AclKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type AclAllRuleEthsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EthRule *AclRuleEthEntry `protobuf:"bytes,1,opt,name=eth_rule,json=ethRule,proto3" json:"eth_rule,omitempty"`
}

func (x *AclAllRuleEthsResponse) Reset() {
	*x = AclAllRuleEthsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclAllRuleEthsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclAllRuleEthsResponse) ProtoMessage() {}

func (x *AclAllRuleEthsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclAllRuleEthsResponse.ProtoReflect.Descriptor instead.
func (*AclAllRuleEthsResponse) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{17}
}

func (x *AclAllRuleEthsResponse) GetEthRule() *AclRuleEthEntry {
	if x != nil {
		return x.EthRule
	}
	return nil
}

type AclExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the ACL to query.
	Key *AclKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *AclExistsRequest) Reset() {
	*x = AclExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclExistsRequest) ProtoMessage() {}

func (x *AclExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclExistsRequest.ProtoReflect.Descriptor instead.
func (*AclExistsRequest) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{18}
}

func (x *AclExistsRequest) GetKey() *AclKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type AclExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if the ACL exists in the application's configuration otherwise false.
	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *AclExistsResponse) Reset() {
	*x = AclExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclExistsResponse) ProtoMessage() {}

func (x *AclExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclExistsResponse.ProtoReflect.Descriptor instead.
func (*AclExistsResponse) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{19}
}

func (x *AclExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type AclAllExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the ACL to query.
	Key *AclKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *AclAllExistsRequest) Reset() {
	*x = AclAllExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclAllExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclAllExistsRequest) ProtoMessage() {}

func (x *AclAllExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclAllExistsRequest.ProtoReflect.Descriptor instead.
func (*AclAllExistsRequest) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{20}
}

func (x *AclAllExistsRequest) GetKey() *AclKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type AclAllExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if the ACL exists in any configuration in the device otherwise false.
	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *AclAllExistsResponse) Reset() {
	*x = AclAllExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclAllExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclAllExistsResponse) ProtoMessage() {}

func (x *AclAllExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclAllExistsResponse.ProtoReflect.Descriptor instead.
func (*AclAllExistsResponse) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{21}
}

func (x *AclAllExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type AclRuleSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the ACL to create or modify.
	Key *AclKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The sequence number to add the rule at.
	SequenceNumber uint32 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	// Types that are assignable to AclRule:
	//
	//	*AclRuleSetRequest_IpRule
	//	*AclRuleSetRequest_EthRule
	AclRule isAclRuleSetRequest_AclRule `protobuf_oneof:"acl_rule"`
}

func (x *AclRuleSetRequest) Reset() {
	*x = AclRuleSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclRuleSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclRuleSetRequest) ProtoMessage() {}

func (x *AclRuleSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclRuleSetRequest.ProtoReflect.Descriptor instead.
func (*AclRuleSetRequest) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{22}
}

func (x *AclRuleSetRequest) GetKey() *AclKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AclRuleSetRequest) GetSequenceNumber() uint32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (m *AclRuleSetRequest) GetAclRule() isAclRuleSetRequest_AclRule {
	if m != nil {
		return m.AclRule
	}
	return nil
}

func (x *AclRuleSetRequest) GetIpRule() *AclRuleIp {
	if x, ok := x.GetAclRule().(*AclRuleSetRequest_IpRule); ok {
		return x.IpRule
	}
	return nil
}

func (x *AclRuleSetRequest) GetEthRule() *AclRuleEth {
	if x, ok := x.GetAclRule().(*AclRuleSetRequest_EthRule); ok {
		return x.EthRule
	}
	return nil
}

type isAclRuleSetRequest_AclRule interface {
	isAclRuleSetRequest_AclRule()
}

type AclRuleSetRequest_IpRule struct {
	// IP ACL rule to add to the ACL.
	IpRule *AclRuleIp `protobuf:"bytes,3,opt,name=ip_rule,json=ipRule,proto3,oneof"`
}

type AclRuleSetRequest_EthRule struct {
	// Ethenet ACL rule to add to the ACL.
	EthRule *AclRuleEth `protobuf:"bytes,4,opt,name=eth_rule,json=ethRule,proto3,oneof"`
}

func (*AclRuleSetRequest_IpRule) isAclRuleSetRequest_AclRule() {}

func (*AclRuleSetRequest_EthRule) isAclRuleSetRequest_AclRule() {}

type AclRuleSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AclRuleSetResponse) Reset() {
	*x = AclRuleSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclRuleSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclRuleSetResponse) ProtoMessage() {}

func (x *AclRuleSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclRuleSetResponse.ProtoReflect.Descriptor instead.
func (*AclRuleSetResponse) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{23}
}

type BulkAclRuleSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of AclRuleSetRequests.
	Requests []*AclRuleSetRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkAclRuleSetRequest) Reset() {
	*x = BulkAclRuleSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAclRuleSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAclRuleSetRequest) ProtoMessage() {}

func (x *BulkAclRuleSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAclRuleSetRequest.ProtoReflect.Descriptor instead.
func (*BulkAclRuleSetRequest) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{24}
}

func (x *BulkAclRuleSetRequest) GetRequests() []*AclRuleSetRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BulkAclRuleSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of consecutive successful requests.
	Processed uint64 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	// Success or error details in the event of failure.
	Status *RpcResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BulkAclRuleSetResponse) Reset() {
	*x = BulkAclRuleSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAclRuleSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAclRuleSetResponse) ProtoMessage() {}

func (x *BulkAclRuleSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAclRuleSetResponse.ProtoReflect.Descriptor instead.
func (*BulkAclRuleSetResponse) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{25}
}

func (x *BulkAclRuleSetResponse) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *BulkAclRuleSetResponse) GetStatus() *RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type AclRuleDelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the ACL to modify.
	Key *AclKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The sequence number at which to remove the rule.
	SequenceNumber uint32 `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
}

func (x *AclRuleDelRequest) Reset() {
	*x = AclRuleDelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclRuleDelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclRuleDelRequest) ProtoMessage() {}

func (x *AclRuleDelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclRuleDelRequest.ProtoReflect.Descriptor instead.
func (*AclRuleDelRequest) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{26}
}

func (x *AclRuleDelRequest) GetKey() *AclKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AclRuleDelRequest) GetSequenceNumber() uint32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

type AclRuleDelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AclRuleDelResponse) Reset() {
	*x = AclRuleDelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclRuleDelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclRuleDelResponse) ProtoMessage() {}

func (x *AclRuleDelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclRuleDelResponse.ProtoReflect.Descriptor instead.
func (*AclRuleDelResponse) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{27}
}

type BulkAclRuleDelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of AclRuleDelRequests.
	Requests []*AclRuleDelRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkAclRuleDelRequest) Reset() {
	*x = BulkAclRuleDelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAclRuleDelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAclRuleDelRequest) ProtoMessage() {}

func (x *BulkAclRuleDelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAclRuleDelRequest.ProtoReflect.Descriptor instead.
func (*BulkAclRuleDelRequest) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{28}
}

func (x *BulkAclRuleDelRequest) GetRequests() []*AclRuleDelRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BulkAclRuleDelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of consecutive successful requests.
	Processed uint64 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	// Success or error details in the event of failure.
	Status *RpcResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BulkAclRuleDelResponse) Reset() {
	*x = BulkAclRuleDelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAclRuleDelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAclRuleDelResponse) ProtoMessage() {}

func (x *BulkAclRuleDelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAclRuleDelResponse.ProtoReflect.Descriptor instead.
func (*BulkAclRuleDelResponse) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{29}
}

func (x *BulkAclRuleDelResponse) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *BulkAclRuleDelResponse) GetStatus() *RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type AclCommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AclCommitRequest) Reset() {
	*x = AclCommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclCommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclCommitRequest) ProtoMessage() {}

func (x *AclCommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclCommitRequest.ProtoReflect.Descriptor instead.
func (*AclCommitRequest) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{30}
}

type AclCommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AclCommitResponse) Reset() {
	*x = AclCommitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclCommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclCommitResponse) ProtoMessage() {}

func (x *AclCommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclCommitResponse.ProtoReflect.Descriptor instead.
func (*AclCommitResponse) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{31}
}

type AclDelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the ACL to remove.
	Key *AclKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *AclDelRequest) Reset() {
	*x = AclDelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclDelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclDelRequest) ProtoMessage() {}

func (x *AclDelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclDelRequest.ProtoReflect.Descriptor instead.
func (*AclDelRequest) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{32}
}

func (x *AclDelRequest) GetKey() *AclKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type AclDelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AclDelResponse) Reset() {
	*x = AclDelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclDelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclDelResponse) ProtoMessage() {}

func (x *AclDelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclDelResponse.ProtoReflect.Descriptor instead.
func (*AclDelResponse) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{33}
}

type BulkAclDelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of AclDelRequests.
	Requests []*AclDelRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkAclDelRequest) Reset() {
	*x = BulkAclDelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAclDelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAclDelRequest) ProtoMessage() {}

func (x *BulkAclDelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAclDelRequest.ProtoReflect.Descriptor instead.
func (*BulkAclDelRequest) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{34}
}

func (x *BulkAclDelRequest) GetRequests() []*AclDelRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BulkAclDelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of consecutive successful requests.
	Processed uint64 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	// Success or error details in the event of failure.
	Status *RpcResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BulkAclDelResponse) Reset() {
	*x = BulkAclDelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAclDelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAclDelResponse) ProtoMessage() {}

func (x *BulkAclDelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAclDelResponse.ProtoReflect.Descriptor instead.
func (*BulkAclDelResponse) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{35}
}

func (x *BulkAclDelResponse) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *BulkAclDelResponse) GetStatus() *RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type AclApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the ACL to [un]apply.
	Key *AclKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The inteface ID of the the interface to [un]apply the ACL.
	IntfId *IntfId `protobuf:"bytes,2,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
	// The direction in which to [un]apply the ACL.
	Direction AclDirection `protobuf:"varint,3,opt,name=direction,proto3,enum=eos.remote.AclDirection" json:"direction,omitempty"`
	// True if the ACL should be applied otherwise false if it should be
	// unapplied.
	Apply bool `protobuf:"varint,4,opt,name=apply,proto3" json:"apply,omitempty"`
}

func (x *AclApplyRequest) Reset() {
	*x = AclApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclApplyRequest) ProtoMessage() {}

func (x *AclApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclApplyRequest.ProtoReflect.Descriptor instead.
func (*AclApplyRequest) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{36}
}

func (x *AclApplyRequest) GetKey() *AclKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AclApplyRequest) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

func (x *AclApplyRequest) GetDirection() AclDirection {
	if x != nil {
		return x.Direction
	}
	return AclDirection_ACL_DIRECTION_NULL
}

func (x *AclApplyRequest) GetApply() bool {
	if x != nil {
		return x.Apply
	}
	return false
}

type AclApplyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AclApplyResponse) Reset() {
	*x = AclApplyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclApplyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclApplyResponse) ProtoMessage() {}

func (x *AclApplyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclApplyResponse.ProtoReflect.Descriptor instead.
func (*AclApplyResponse) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{37}
}

type BulkAclApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of AclApplyRequests.
	Requests []*AclApplyRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkAclApplyRequest) Reset() {
	*x = BulkAclApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAclApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAclApplyRequest) ProtoMessage() {}

func (x *BulkAclApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAclApplyRequest.ProtoReflect.Descriptor instead.
func (*BulkAclApplyRequest) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{38}
}

func (x *BulkAclApplyRequest) GetRequests() []*AclApplyRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BulkAclApplyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of consecutive successful requests.
	Processed uint64 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	// Success or error details in the event of failure.
	Status *RpcResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BulkAclApplyResponse) Reset() {
	*x = BulkAclApplyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAclApplyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAclApplyResponse) ProtoMessage() {}

func (x *BulkAclApplyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAclApplyResponse.ProtoReflect.Descriptor instead.
func (*BulkAclApplyResponse) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{39}
}

func (x *BulkAclApplyResponse) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *BulkAclApplyResponse) GetStatus() *RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type AclCountersEnabledSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the ACL to modify.
	Key *AclKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// True if counters should be enabled for the ACL otherwise false if they
	// should be disabled.
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *AclCountersEnabledSetRequest) Reset() {
	*x = AclCountersEnabledSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclCountersEnabledSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclCountersEnabledSetRequest) ProtoMessage() {}

func (x *AclCountersEnabledSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclCountersEnabledSetRequest.ProtoReflect.Descriptor instead.
func (*AclCountersEnabledSetRequest) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{40}
}

func (x *AclCountersEnabledSetRequest) GetKey() *AclKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AclCountersEnabledSetRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type AclCountersEnabledSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AclCountersEnabledSetResponse) Reset() {
	*x = AclCountersEnabledSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclCountersEnabledSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclCountersEnabledSetResponse) ProtoMessage() {}

func (x *AclCountersEnabledSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclCountersEnabledSetResponse.ProtoReflect.Descriptor instead.
func (*AclCountersEnabledSetResponse) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{41}
}

type BulkAclCountersEnabledSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of AclCountersEnabledSetRequests.
	Requests []*AclCountersEnabledSetRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkAclCountersEnabledSetRequest) Reset() {
	*x = BulkAclCountersEnabledSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAclCountersEnabledSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAclCountersEnabledSetRequest) ProtoMessage() {}

func (x *BulkAclCountersEnabledSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAclCountersEnabledSetRequest.ProtoReflect.Descriptor instead.
func (*BulkAclCountersEnabledSetRequest) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{42}
}

func (x *BulkAclCountersEnabledSetRequest) GetRequests() []*AclCountersEnabledSetRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BulkAclCountersEnabledSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of consecutive successful requests.
	Processed uint64 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	// Success or error details in the event of failure.
	Status *RpcResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BulkAclCountersEnabledSetResponse) Reset() {
	*x = BulkAclCountersEnabledSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAclCountersEnabledSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAclCountersEnabledSetResponse) ProtoMessage() {}

func (x *BulkAclCountersEnabledSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAclCountersEnabledSetResponse.ProtoReflect.Descriptor instead.
func (*BulkAclCountersEnabledSetResponse) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{43}
}

func (x *BulkAclCountersEnabledSetResponse) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *BulkAclCountersEnabledSetResponse) GetStatus() *RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type AclFragmentsEnabledSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the ACL to modify.
	Key *AclKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// True if fragments matching should be enabled for the ACL otherwise false
	// if it should be disabled.
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *AclFragmentsEnabledSetRequest) Reset() {
	*x = AclFragmentsEnabledSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclFragmentsEnabledSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclFragmentsEnabledSetRequest) ProtoMessage() {}

func (x *AclFragmentsEnabledSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclFragmentsEnabledSetRequest.ProtoReflect.Descriptor instead.
func (*AclFragmentsEnabledSetRequest) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{44}
}

func (x *AclFragmentsEnabledSetRequest) GetKey() *AclKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AclFragmentsEnabledSetRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type AclFragmentsEnabledSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AclFragmentsEnabledSetResponse) Reset() {
	*x = AclFragmentsEnabledSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclFragmentsEnabledSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclFragmentsEnabledSetResponse) ProtoMessage() {}

func (x *AclFragmentsEnabledSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclFragmentsEnabledSetResponse.ProtoReflect.Descriptor instead.
func (*AclFragmentsEnabledSetResponse) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{45}
}

type BulkAclFragmentsEnabledSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of AclFragmentsEnabledSetRequests.
	Requests []*AclFragmentsEnabledSetRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkAclFragmentsEnabledSetRequest) Reset() {
	*x = BulkAclFragmentsEnabledSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAclFragmentsEnabledSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAclFragmentsEnabledSetRequest) ProtoMessage() {}

func (x *BulkAclFragmentsEnabledSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAclFragmentsEnabledSetRequest.ProtoReflect.Descriptor instead.
func (*BulkAclFragmentsEnabledSetRequest) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{46}
}

func (x *BulkAclFragmentsEnabledSetRequest) GetRequests() []*AclFragmentsEnabledSetRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BulkAclFragmentsEnabledSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of consecutive successful requests.
	Processed uint64 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	// Success or error details in the event of failure.
	Status *RpcResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BulkAclFragmentsEnabledSetResponse) Reset() {
	*x = BulkAclFragmentsEnabledSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkAclFragmentsEnabledSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkAclFragmentsEnabledSetResponse) ProtoMessage() {}

func (x *BulkAclFragmentsEnabledSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkAclFragmentsEnabledSetResponse.ProtoReflect.Descriptor instead.
func (*BulkAclFragmentsEnabledSetResponse) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{47}
}

func (x *BulkAclFragmentsEnabledSetResponse) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *BulkAclFragmentsEnabledSetResponse) GetStatus() *RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type StreamAllowedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The source IP address.
	SourceAddr []byte `protobuf:"bytes,1,opt,name=source_addr,json=sourceAddr,proto3" json:"source_addr,omitempty"`
	// The destination IP address.
	DestAddr []byte `protobuf:"bytes,2,opt,name=dest_addr,json=destAddr,proto3" json:"dest_addr,omitempty"`
	// Optional: The protocol. Must be in range 0 to 255.
	Protocol uint32 `protobuf:"varint,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Optional: The source port. Must be in range 0 to 65535.
	SourcePort uint32 `protobuf:"varint,4,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	// Optional: The desitionation port. Must be in range 0 to 65535.
	DestPort uint32 `protobuf:"varint,5,opt,name=dest_port,json=destPort,proto3" json:"dest_port,omitempty"`
}

func (x *StreamAllowedRequest) Reset() {
	*x = StreamAllowedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamAllowedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAllowedRequest) ProtoMessage() {}

func (x *StreamAllowedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAllowedRequest.ProtoReflect.Descriptor instead.
func (*StreamAllowedRequest) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{48}
}

func (x *StreamAllowedRequest) GetSourceAddr() []byte {
	if x != nil {
		return x.SourceAddr
	}
	return nil
}

func (x *StreamAllowedRequest) GetDestAddr() []byte {
	if x != nil {
		return x.DestAddr
	}
	return nil
}

func (x *StreamAllowedRequest) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *StreamAllowedRequest) GetSourcePort() uint32 {
	if x != nil {
		return x.SourcePort
	}
	return 0
}

func (x *StreamAllowedRequest) GetDestPort() uint32 {
	if x != nil {
		return x.DestPort
	}
	return 0
}

type StreamAllowedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if the connection is allowed otherwise false if it should be dropped.
	StreamAllowed bool `protobuf:"varint,1,opt,name=stream_allowed,json=streamAllowed,proto3" json:"stream_allowed,omitempty"`
}

func (x *StreamAllowedResponse) Reset() {
	*x = StreamAllowedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamAllowedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAllowedResponse) ProtoMessage() {}

func (x *StreamAllowedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAllowedResponse.ProtoReflect.Descriptor instead.
func (*StreamAllowedResponse) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{49}
}

func (x *StreamAllowedResponse) GetStreamAllowed() bool {
	if x != nil {
		return x.StreamAllowed
	}
	return false
}

type DgramAllowedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The source IP address.
	SourceAddr []byte `protobuf:"bytes,1,opt,name=source_addr,json=sourceAddr,proto3" json:"source_addr,omitempty"`
	// The destination IP address.
	DestAddr []byte `protobuf:"bytes,2,opt,name=dest_addr,json=destAddr,proto3" json:"dest_addr,omitempty"`
	// The source port. Must be in range 0 to 65535.
	SourcePort uint32 `protobuf:"varint,3,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	// The desitionation port. Must be in range 0 to 65535.
	DestPort uint32 `protobuf:"varint,4,opt,name=dest_port,json=destPort,proto3" json:"dest_port,omitempty"`
	// Time to live if IPv4 otherwise hop limit if IPv6.
	// Must be in range 0 to 255.
	Ttl uint32 `protobuf:"varint,5,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// Type of service if IPv4 othersiwe traffic class if IPv6.
	// Must be in range 0 to 255
	Tos uint32 `protobuf:"varint,6,opt,name=tos,proto3" json:"tos,omitempty"`
	// Recipient interface.
	RecipientIntf *IntfId `protobuf:"bytes,7,opt,name=recipient_intf,json=recipientIntf,proto3" json:"recipient_intf,omitempty"`
}

func (x *DgramAllowedRequest) Reset() {
	*x = DgramAllowedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DgramAllowedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DgramAllowedRequest) ProtoMessage() {}

func (x *DgramAllowedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DgramAllowedRequest.ProtoReflect.Descriptor instead.
func (*DgramAllowedRequest) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{50}
}

func (x *DgramAllowedRequest) GetSourceAddr() []byte {
	if x != nil {
		return x.SourceAddr
	}
	return nil
}

func (x *DgramAllowedRequest) GetDestAddr() []byte {
	if x != nil {
		return x.DestAddr
	}
	return nil
}

func (x *DgramAllowedRequest) GetSourcePort() uint32 {
	if x != nil {
		return x.SourcePort
	}
	return 0
}

func (x *DgramAllowedRequest) GetDestPort() uint32 {
	if x != nil {
		return x.DestPort
	}
	return 0
}

func (x *DgramAllowedRequest) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *DgramAllowedRequest) GetTos() uint32 {
	if x != nil {
		return x.Tos
	}
	return 0
}

func (x *DgramAllowedRequest) GetRecipientIntf() *IntfId {
	if x != nil {
		return x.RecipientIntf
	}
	return nil
}

type DgramAllowedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if packet is allowed otherwise false if it should be dropped.
	DgramAllowed bool `protobuf:"varint,1,opt,name=dgram_allowed,json=dgramAllowed,proto3" json:"dgram_allowed,omitempty"`
}

func (x *DgramAllowedResponse) Reset() {
	*x = DgramAllowedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DgramAllowedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DgramAllowedResponse) ProtoMessage() {}

func (x *DgramAllowedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_acl_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DgramAllowedResponse.ProtoReflect.Descriptor instead.
func (*DgramAllowedResponse) Descriptor() ([]byte, []int) {
	return file_acl_proto_rawDescGZIP(), []int{51}
}

func (x *DgramAllowedResponse) GetDgramAllowed() bool {
	if x != nil {
		return x.DgramAllowed
	}
	return false
}

var File_acl_proto protoreflect.FileDescriptor

var file_acl_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x1a, 0x0f, 0x61, 0x63, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x72, 0x70, 0x63, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x23, 0x0a, 0x0f, 0x41,
	0x63, 0x6c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x63, 0x6b,
	0x22, 0x0b, 0x0a, 0x09, 0x4f, 0x6e, 0x41, 0x63, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x22, 0x45, 0x0a,
	0x0d, 0x4f, 0x6e, 0x41, 0x63, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x61, 0x69, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x63, 0x61, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xb2, 0x01, 0x0a, 0x10, 0x41, 0x63, 0x6c, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x61, 0x63, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x37, 0x0a,
	0x0b, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x4f, 0x6e, 0x41, 0x63, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x6e, 0x41,
	0x63, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x44, 0x0a, 0x10, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x6c,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4f, 0x6e,
	0x41, 0x63, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x0d, 0x6f,
	0x6e, 0x41, 0x63, 0x6c, 0x53, 0x79, 0x6e, 0x63, 0x46, 0x61, 0x69, 0x6c, 0x42, 0x0b, 0x0a, 0x09,
	0x61, 0x63, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x0d, 0x0a, 0x0b, 0x41, 0x63, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x34, 0x0a, 0x0c, 0x41, 0x63, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x10,
	0x0a, 0x0e, 0x41, 0x63, 0x6c, 0x73, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x37, 0x0a, 0x0f, 0x41, 0x63, 0x6c, 0x73, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63,
	0x6c, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x39, 0x0a, 0x11, 0x41, 0x63, 0x6c,
	0x52, 0x75, 0x6c, 0x65, 0x49, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x4b, 0x65, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0x69, 0x0a, 0x0e, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x49,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63,
	0x6c, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x70, 0x52, 0x06, 0x69, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x22,
	0x49, 0x0a, 0x12, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x69, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x3c, 0x0a, 0x14, 0x41, 0x63,
	0x6c, 0x41, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x4c, 0x0a, 0x15, 0x41, 0x63, 0x6c, 0x41,
	0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x69, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x3a, 0x0a, 0x12, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x45, 0x74, 0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x22, 0x6d, 0x0a, 0x0f, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x74, 0x68,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x31,
	0x0a, 0x08, 0x65, 0x74, 0x68, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63,
	0x6c, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x74, 0x68, 0x52, 0x07, 0x65, 0x74, 0x68, 0x52, 0x75, 0x6c,
	0x65, 0x22, 0x4d, 0x0a, 0x13, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x74, 0x68, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x74, 0x68, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x45,
	0x74, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x74, 0x68, 0x52, 0x75, 0x6c, 0x65,
	0x22, 0x3d, 0x0a, 0x15, 0x41, 0x63, 0x6c, 0x41, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x74,
	0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22,
	0x50, 0x0a, 0x16, 0x41, 0x63, 0x6c, 0x41, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x74, 0x68,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x74, 0x68,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65,
	0x45, 0x74, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x74, 0x68, 0x52, 0x75, 0x6c,
	0x65, 0x22, 0x38, 0x0a, 0x10, 0x41, 0x63, 0x6c, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x41, 0x63, 0x6c, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x2b, 0x0a, 0x11, 0x41,
	0x63, 0x6c, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x3b, 0x0a, 0x13, 0x41, 0x63, 0x6c, 0x41,
	0x6c, 0x6c, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x4b, 0x65, 0x79,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x2e, 0x0a, 0x14, 0x41, 0x63, 0x6c, 0x41, 0x6c, 0x6c, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x69, 0x70,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65,
	0x49, 0x70, 0x48, 0x00, 0x52, 0x06, 0x69, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x08,
	0x65, 0x74, 0x68, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x52,
	0x75, 0x6c, 0x65, 0x45, 0x74, 0x68, 0x48, 0x00, 0x52, 0x07, 0x65, 0x74, 0x68, 0x52, 0x75, 0x6c,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x61, 0x63, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x14, 0x0a,
	0x12, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x52, 0x0a, 0x15, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x63, 0x6c, 0x52, 0x75,
	0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x52,
	0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x6d, 0x0a, 0x16, 0x42, 0x75, 0x6c, 0x6b, 0x41,
	0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12,
	0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x52, 0x70, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x62, 0x0a, 0x11, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x14, 0x0a, 0x12, 0x41, 0x63,
	0x6c, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x52, 0x0a, 0x15, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x44,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65,
	0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x22, 0x6d, 0x0a, 0x16, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x63, 0x6c, 0x52,
	0x75, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x63, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x41, 0x63, 0x6c, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x0a, 0x0d,
	0x41, 0x63, 0x6c, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x4b, 0x65, 0x79, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x22, 0x10, 0x0a, 0x0e, 0x41, 0x63, 0x6c, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x0a, 0x11, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x63, 0x6c,
	0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x44, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x22, 0x69, 0x0a, 0x12, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x63, 0x6c, 0x44, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb2, 0x01, 0x0a,
	0x0f, 0x41, 0x63, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x52, 0x06, 0x69, 0x6e, 0x74,
	0x66, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x22, 0x12, 0x0a, 0x10, 0x41, 0x63, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x0a, 0x13, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x63, 0x6c,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x6b, 0x0a, 0x14, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x63, 0x6c,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x5e, 0x0a, 0x1c, 0x41, 0x63, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x41, 0x63, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x68, 0x0a, 0x20, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x63, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x78, 0x0a,
	0x21, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x63, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x52, 0x70,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5f, 0x0a, 0x1d, 0x41, 0x63, 0x6c, 0x46, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x20, 0x0a, 0x1e, 0x41, 0x63, 0x6c, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x0a, 0x21, 0x42, 0x75,
	0x6c, 0x6b, 0x41, 0x63, 0x6c, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x45, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41,
	0x63, 0x6c, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x79, 0x0a, 0x22, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x63,
	0x6c, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xae, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x64, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x22, 0x3e, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x22, 0xf0, 0x01, 0x0a, 0x13, 0x44, 0x67, 0x72, 0x61, 0x6d, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x64, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73,
	0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65,
	0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6f, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x6f, 0x73, 0x12, 0x39, 0x0a, 0x0e, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x74, 0x66, 0x22, 0x3b, 0x0a, 0x14, 0x44, 0x67, 0x72, 0x61, 0x6d, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x67, 0x72, 0x61, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x32, 0xe6, 0x10, 0x0a, 0x0d, 0x41, 0x63, 0x6c, 0x4d, 0x67, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3d, 0x0a, 0x04,
	0x61, 0x63, 0x6c, 0x73, 0x12, 0x17, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x41, 0x63, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x47, 0x0a, 0x08, 0x61,
	0x63, 0x6c, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x12, 0x1a, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x73, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x41, 0x63, 0x6c, 0x73, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x51, 0x0a, 0x0c, 0x61, 0x63, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x69, 0x70, 0x73, 0x12, 0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5b, 0x0a, 0x10, 0x61, 0x63, 0x6c, 0x5f, 0x61,
	0x6c, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x70, 0x73, 0x12, 0x20, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x6c, 0x6c, 0x52,
	0x75, 0x6c, 0x65, 0x49, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x6c,
	0x6c, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x54, 0x0a, 0x0d, 0x61, 0x63, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x65, 0x74, 0x68, 0x73, 0x12, 0x1e, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x74, 0x68, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x74, 0x68, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5e, 0x0a, 0x11, 0x61, 0x63,
	0x6c, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x65, 0x74, 0x68, 0x73, 0x12,
	0x21, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c,
	0x41, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x74, 0x68, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x41, 0x63, 0x6c, 0x41, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x74, 0x68, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x4b, 0x0a, 0x0a, 0x61, 0x63,
	0x6c, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e, 0x61, 0x63, 0x6c, 0x5f, 0x61,
	0x6c, 0x6c, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x6c, 0x6c, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x6c, 0x6c, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x0c, 0x61, 0x63, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x12, 0x1d,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x52,
	0x75, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x75,
	0x6c, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5c, 0x0a, 0x11, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x73, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a,
	0x0c, 0x61, 0x63, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x12, 0x1d, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x75,
	0x6c, 0x65, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c,
	0x0a, 0x11, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x64, 0x65, 0x6c, 0x12, 0x21, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x44,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0a,
	0x61, 0x63, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x07, 0x61, 0x63, 0x6c,
	0x5f, 0x64, 0x65, 0x6c, 0x12, 0x19, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x41, 0x63, 0x6c, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c,
	0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a,
	0x0c, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x12, 0x1d, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41,
	0x63, 0x6c, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x63,
	0x6c, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48,
	0x0a, 0x09, 0x61, 0x63, 0x6c, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1b, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e, 0x62, 0x75, 0x6c, 0x6b,
	0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1f, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x63, 0x6c, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x63, 0x6c,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x71, 0x0a, 0x18, 0x61, 0x63, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7e, 0x0a, 0x1d, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x74, 0x12, 0x2c, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x63, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42,
	0x75, 0x6c, 0x6b, 0x41, 0x63, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x74, 0x0a, 0x19, 0x61, 0x63, 0x6c, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x12,
	0x29, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c,
	0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x1e, 0x62, 0x75, 0x6c,
	0x6b, 0x5f, 0x61, 0x63, 0x6c, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x12, 0x2d, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x63, 0x6c,
	0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x63, 0x6c, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x20,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0d, 0x64, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1f, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x44, 0x67, 0x72, 0x61, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x44, 0x67, 0x72, 0x61, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x12, 0x5a, 0x10, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x45, 0x6f, 0x73, 0x53, 0x64, 0x6b, 0x52, 0x70, 0x63, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_acl_proto_rawDescOnce sync.Once
	file_acl_proto_rawDescData = file_acl_proto_rawDesc
)

func file_acl_proto_rawDescGZIP() []byte {
	file_acl_proto_rawDescOnce.Do(func() {
		file_acl_proto_rawDescData = protoimpl.X.CompressGZIP(file_acl_proto_rawDescData)
	})
	return file_acl_proto_rawDescData
}

var file_acl_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_acl_proto_goTypes = []interface{}{
	(*AclWatchRequest)(nil),                    // 0: eos.remote.AclWatchRequest
	(*OnAclSync)(nil),                          // 1: eos.remote.OnAclSync
	(*OnAclSyncFail)(nil),                      // 2: eos.remote.OnAclSyncFail
	(*AclWatchResponse)(nil),                   // 3: eos.remote.AclWatchResponse
	(*AclsRequest)(nil),                        // 4: eos.remote.AclsRequest
	(*AclsResponse)(nil),                       // 5: eos.remote.AclsResponse
	(*AclsAllRequest)(nil),                     // 6: eos.remote.AclsAllRequest
	(*AclsAllResponse)(nil),                    // 7: eos.remote.AclsAllResponse
	(*AclRuleIpsRequest)(nil),                  // 8: eos.remote.AclRuleIpsRequest
	(*AclRuleIpEntry)(nil),                     // 9: eos.remote.AclRuleIpEntry
	(*AclRuleIpsResponse)(nil),                 // 10: eos.remote.AclRuleIpsResponse
	(*AclAllRuleIpsRequest)(nil),               // 11: eos.remote.AclAllRuleIpsRequest
	(*AclAllRuleIpsResponse)(nil),              // 12: eos.remote.AclAllRuleIpsResponse
	(*AclRuleEthsRequest)(nil),                 // 13: eos.remote.AclRuleEthsRequest
	(*AclRuleEthEntry)(nil),                    // 14: eos.remote.AclRuleEthEntry
	(*AclRuleEthsResponse)(nil),                // 15: eos.remote.AclRuleEthsResponse
	(*AclAllRuleEthsRequest)(nil),              // 16: eos.remote.AclAllRuleEthsRequest
	(*AclAllRuleEthsResponse)(nil),             // 17: eos.remote.AclAllRuleEthsResponse
	(*AclExistsRequest)(nil),                   // 18: eos.remote.AclExistsRequest
	(*AclExistsResponse)(nil),                  // 19: eos.remote.AclExistsResponse
	(*AclAllExistsRequest)(nil),                // 20: eos.remote.AclAllExistsRequest
	(*AclAllExistsResponse)(nil),               // 21: eos.remote.AclAllExistsResponse
	(*AclRuleSetRequest)(nil),                  // 22: eos.remote.AclRuleSetRequest
	(*AclRuleSetResponse)(nil),                 // 23: eos.remote.AclRuleSetResponse
	(*BulkAclRuleSetRequest)(nil),              // 24: eos.remote.BulkAclRuleSetRequest
	(*BulkAclRuleSetResponse)(nil),             // 25: eos.remote.BulkAclRuleSetResponse
	(*AclRuleDelRequest)(nil),                  // 26: eos.remote.AclRuleDelRequest
	(*AclRuleDelResponse)(nil),                 // 27: eos.remote.AclRuleDelResponse
	(*BulkAclRuleDelRequest)(nil),              // 28: eos.remote.BulkAclRuleDelRequest
	(*BulkAclRuleDelResponse)(nil),             // 29: eos.remote.BulkAclRuleDelResponse
	(*AclCommitRequest)(nil),                   // 30: eos.remote.AclCommitRequest
	(*AclCommitResponse)(nil),                  // 31: eos.remote.AclCommitResponse
	(*AclDelRequest)(nil),                      // 32: eos.remote.AclDelRequest
	(*AclDelResponse)(nil),                     // 33: eos.remote.AclDelResponse
	(*BulkAclDelRequest)(nil),                  // 34: eos.remote.BulkAclDelRequest
	(*BulkAclDelResponse)(nil),                 // 35: eos.remote.BulkAclDelResponse
	(*AclApplyRequest)(nil),                    // 36: eos.remote.AclApplyRequest
	(*AclApplyResponse)(nil),                   // 37: eos.remote.AclApplyResponse
	(*BulkAclApplyRequest)(nil),                // 38: eos.remote.BulkAclApplyRequest
	(*BulkAclApplyResponse)(nil),               // 39: eos.remote.BulkAclApplyResponse
	(*AclCountersEnabledSetRequest)(nil),       // 40: eos.remote.AclCountersEnabledSetRequest
	(*AclCountersEnabledSetResponse)(nil),      // 41: eos.remote.AclCountersEnabledSetResponse
	(*BulkAclCountersEnabledSetRequest)(nil),   // 42: eos.remote.BulkAclCountersEnabledSetRequest
	(*BulkAclCountersEnabledSetResponse)(nil),  // 43: eos.remote.BulkAclCountersEnabledSetResponse
	(*AclFragmentsEnabledSetRequest)(nil),      // 44: eos.remote.AclFragmentsEnabledSetRequest
	(*AclFragmentsEnabledSetResponse)(nil),     // 45: eos.remote.AclFragmentsEnabledSetResponse
	(*BulkAclFragmentsEnabledSetRequest)(nil),  // 46: eos.remote.BulkAclFragmentsEnabledSetRequest
	(*BulkAclFragmentsEnabledSetResponse)(nil), // 47: eos.remote.BulkAclFragmentsEnabledSetResponse
	(*StreamAllowedRequest)(nil),               // 48: eos.remote.StreamAllowedRequest
	(*StreamAllowedResponse)(nil),              // 49: eos.remote.StreamAllowedResponse
	(*DgramAllowedRequest)(nil),                // 50: eos.remote.DgramAllowedRequest
	(*DgramAllowedResponse)(nil),               // 51: eos.remote.DgramAllowedResponse
	(*AclKey)(nil),                             // 52: eos.remote.AclKey
	(*AclRuleIp)(nil),                          // 53: eos.remote.AclRuleIp
	(*AclRuleEth)(nil),                         // 54: eos.remote.AclRuleEth
	(*RpcResponseStatus)(nil),                  // 55: eos.remote.RpcResponseStatus
	(*IntfId)(nil),                             // 56: eos.remote.IntfId
	(AclDirection)(0),                          // 57: eos.remote.AclDirection
}
var file_acl_proto_depIdxs = []int32{
	1,  // 0: eos.remote.AclWatchResponse.on_acl_sync:type_name -> eos.remote.OnAclSync
	2,  // 1: eos.remote.AclWatchResponse.on_acl_sync_fail:type_name -> eos.remote.OnAclSyncFail
	52, // 2: eos.remote.AclsResponse.key:type_name -> eos.remote.AclKey
	52, // 3: eos.remote.AclsAllResponse.key:type_name -> eos.remote.AclKey
	52, // 4: eos.remote.AclRuleIpsRequest.key:type_name -> eos.remote.AclKey
	53, // 5: eos.remote.AclRuleIpEntry.ip_rule:type_name -> eos.remote.AclRuleIp
	9,  // 6: eos.remote.AclRuleIpsResponse.ip_rule:type_name -> eos.remote.AclRuleIpEntry
	52, // 7: eos.remote.AclAllRuleIpsRequest.key:type_name -> eos.remote.AclKey
	9,  // 8: eos.remote.AclAllRuleIpsResponse.ip_rule:type_name -> eos.remote.AclRuleIpEntry
	52, // 9: eos.remote.AclRuleEthsRequest.key:type_name -> eos.remote.AclKey
	54, // 10: eos.remote.AclRuleEthEntry.eth_rule:type_name -> eos.remote.AclRuleEth
	14, // 11: eos.remote.AclRuleEthsResponse.eth_rule:type_name -> eos.remote.AclRuleEthEntry
	52, // 12: eos.remote.AclAllRuleEthsRequest.key:type_name -> eos.remote.AclKey
	14, // 13: eos.remote.AclAllRuleEthsResponse.eth_rule:type_name -> eos.remote.AclRuleEthEntry
	52, // 14: eos.remote.AclExistsRequest.key:type_name -> eos.remote.AclKey
	52, // 15: eos.remote.AclAllExistsRequest.key:type_name -> eos.remote.AclKey
	52, // 16: eos.remote.AclRuleSetRequest.key:type_name -> eos.remote.AclKey
	53, // 17: eos.remote.AclRuleSetRequest.ip_rule:type_name -> eos.remote.AclRuleIp
	54, // 18: eos.remote.AclRuleSetRequest.eth_rule:type_name -> eos.remote.AclRuleEth
	22, // 19: eos.remote.BulkAclRuleSetRequest.requests:type_name -> eos.remote.AclRuleSetRequest
	55, // 20: eos.remote.BulkAclRuleSetResponse.status:type_name -> eos.remote.RpcResponseStatus
	52, // 21: eos.remote.AclRuleDelRequest.key:type_name -> eos.remote.AclKey
	26, // 22: eos.remote.BulkAclRuleDelRequest.requests:type_name -> eos.remote.AclRuleDelRequest
	55, // 23: eos.remote.BulkAclRuleDelResponse.status:type_name -> eos.remote.RpcResponseStatus
	52, // 24: eos.remote.AclDelRequest.key:type_name -> eos.remote.AclKey
	32, // 25: eos.remote.BulkAclDelRequest.requests:type_name -> eos.remote.AclDelRequest
	55, // 26: eos.remote.BulkAclDelResponse.status:type_name -> eos.remote.RpcResponseStatus
	52, // 27: eos.remote.AclApplyRequest.key:type_name -> eos.remote.AclKey
	56, // 28: eos.remote.AclApplyRequest.intf_id:type_name -> eos.remote.IntfId
	57, // 29: eos.remote.AclApplyRequest.direction:type_name -> eos.remote.AclDirection
	36, // 30: eos.remote.BulkAclApplyRequest.requests:type_name -> eos.remote.AclApplyRequest
	55, // 31: eos.remote.BulkAclApplyResponse.status:type_name -> eos.remote.RpcResponseStatus
	52, // 32: eos.remote.AclCountersEnabledSetRequest.key:type_name -> eos.remote.AclKey
	40, // 33: eos.remote.BulkAclCountersEnabledSetRequest.requests:type_name -> eos.remote.AclCountersEnabledSetRequest
	55, // 34: eos.remote.BulkAclCountersEnabledSetResponse.status:type_name -> eos.remote.RpcResponseStatus
	52, // 35: eos.remote.AclFragmentsEnabledSetRequest.key:type_name -> eos.remote.AclKey
	44, // 36: eos.remote.BulkAclFragmentsEnabledSetRequest.requests:type_name -> eos.remote.AclFragmentsEnabledSetRequest
	55, // 37: eos.remote.BulkAclFragmentsEnabledSetResponse.status:type_name -> eos.remote.RpcResponseStatus
	56, // 38: eos.remote.DgramAllowedRequest.recipient_intf:type_name -> eos.remote.IntfId
	0,  // 39: eos.remote.AclMgrService.watch:input_type -> eos.remote.AclWatchRequest
	4,  // 40: eos.remote.AclMgrService.acls:input_type -> eos.remote.AclsRequest
	6,  // 41: eos.remote.AclMgrService.acls_all:input_type -> eos.remote.AclsAllRequest
	8,  // 42: eos.remote.AclMgrService.acl_rule_ips:input_type -> eos.remote.AclRuleIpsRequest
	11, // 43: eos.remote.AclMgrService.acl_all_rule_ips:input_type -> eos.remote.AclAllRuleIpsRequest
	13, // 44: eos.remote.AclMgrService.acl_rule_eths:input_type -> eos.remote.AclRuleEthsRequest
	16, // 45: eos.remote.AclMgrService.acl_all_rule_eths:input_type -> eos.remote.AclAllRuleEthsRequest
	18, // 46: eos.remote.AclMgrService.acl_exists:input_type -> eos.remote.AclExistsRequest
	20, // 47: eos.remote.AclMgrService.acl_all_exists:input_type -> eos.remote.AclAllExistsRequest
	22, // 48: eos.remote.AclMgrService.acl_rule_set:input_type -> eos.remote.AclRuleSetRequest
	24, // 49: eos.remote.AclMgrService.bulk_acl_rule_set:input_type -> eos.remote.BulkAclRuleSetRequest
	26, // 50: eos.remote.AclMgrService.acl_rule_del:input_type -> eos.remote.AclRuleDelRequest
	28, // 51: eos.remote.AclMgrService.bulk_acl_rule_del:input_type -> eos.remote.BulkAclRuleDelRequest
	30, // 52: eos.remote.AclMgrService.acl_commit:input_type -> eos.remote.AclCommitRequest
	32, // 53: eos.remote.AclMgrService.acl_del:input_type -> eos.remote.AclDelRequest
	34, // 54: eos.remote.AclMgrService.bulk_acl_del:input_type -> eos.remote.BulkAclDelRequest
	36, // 55: eos.remote.AclMgrService.acl_apply:input_type -> eos.remote.AclApplyRequest
	38, // 56: eos.remote.AclMgrService.bulk_acl_apply:input_type -> eos.remote.BulkAclApplyRequest
	40, // 57: eos.remote.AclMgrService.acl_counters_enabled_set:input_type -> eos.remote.AclCountersEnabledSetRequest
	42, // 58: eos.remote.AclMgrService.bulk_acl_counters_enabled_set:input_type -> eos.remote.BulkAclCountersEnabledSetRequest
	44, // 59: eos.remote.AclMgrService.acl_fragments_enabled_set:input_type -> eos.remote.AclFragmentsEnabledSetRequest
	46, // 60: eos.remote.AclMgrService.bulk_acl_fragments_enabled_set:input_type -> eos.remote.BulkAclFragmentsEnabledSetRequest
	48, // 61: eos.remote.AclMgrService.stream_allowed:input_type -> eos.remote.StreamAllowedRequest
	50, // 62: eos.remote.AclMgrService.dgram_allowed:input_type -> eos.remote.DgramAllowedRequest
	3,  // 63: eos.remote.AclMgrService.watch:output_type -> eos.remote.AclWatchResponse
	5,  // 64: eos.remote.AclMgrService.acls:output_type -> eos.remote.AclsResponse
	7,  // 65: eos.remote.AclMgrService.acls_all:output_type -> eos.remote.AclsAllResponse
	10, // 66: eos.remote.AclMgrService.acl_rule_ips:output_type -> eos.remote.AclRuleIpsResponse
	12, // 67: eos.remote.AclMgrService.acl_all_rule_ips:output_type -> eos.remote.AclAllRuleIpsResponse
	15, // 68: eos.remote.AclMgrService.acl_rule_eths:output_type -> eos.remote.AclRuleEthsResponse
	17, // 69: eos.remote.AclMgrService.acl_all_rule_eths:output_type -> eos.remote.AclAllRuleEthsResponse
	19, // 70: eos.remote.AclMgrService.acl_exists:output_type -> eos.remote.AclExistsResponse
	21, // 71: eos.remote.AclMgrService.acl_all_exists:output_type -> eos.remote.AclAllExistsResponse
	23, // 72: eos.remote.AclMgrService.acl_rule_set:output_type -> eos.remote.AclRuleSetResponse
	25, // 73: eos.remote.AclMgrService.bulk_acl_rule_set:output_type -> eos.remote.BulkAclRuleSetResponse
	27, // 74: eos.remote.AclMgrService.acl_rule_del:output_type -> eos.remote.AclRuleDelResponse
	29, // 75: eos.remote.AclMgrService.bulk_acl_rule_del:output_type -> eos.remote.BulkAclRuleDelResponse
	31, // 76: eos.remote.AclMgrService.acl_commit:output_type -> eos.remote.AclCommitResponse
	33, // 77: eos.remote.AclMgrService.acl_del:output_type -> eos.remote.AclDelResponse
	35, // 78: eos.remote.AclMgrService.bulk_acl_del:output_type -> eos.remote.BulkAclDelResponse
	37, // 79: eos.remote.AclMgrService.acl_apply:output_type -> eos.remote.AclApplyResponse
	39, // 80: eos.remote.AclMgrService.bulk_acl_apply:output_type -> eos.remote.BulkAclApplyResponse
	41, // 81: eos.remote.AclMgrService.acl_counters_enabled_set:output_type -> eos.remote.AclCountersEnabledSetResponse
	43, // 82: eos.remote.AclMgrService.bulk_acl_counters_enabled_set:output_type -> eos.remote.BulkAclCountersEnabledSetResponse
	45, // 83: eos.remote.AclMgrService.acl_fragments_enabled_set:output_type -> eos.remote.AclFragmentsEnabledSetResponse
	47, // 84: eos.remote.AclMgrService.bulk_acl_fragments_enabled_set:output_type -> eos.remote.BulkAclFragmentsEnabledSetResponse
	49, // 85: eos.remote.AclMgrService.stream_allowed:output_type -> eos.remote.StreamAllowedResponse
	51, // 86: eos.remote.AclMgrService.dgram_allowed:output_type -> eos.remote.DgramAllowedResponse
	63, // [63:87] is the sub-list for method output_type
	39, // [39:63] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_acl_proto_init() }
func file_acl_proto_init() {
	if File_acl_proto != nil {
		return
	}
	file_acl_types_proto_init()
	file_intf_types_proto_init()
	file_rpc_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_acl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclWatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnAclSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnAclSyncFail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclWatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclsAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclsAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclRuleIpsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclRuleIpEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclRuleIpsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclAllRuleIpsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclAllRuleIpsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclRuleEthsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclRuleEthEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclRuleEthsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclAllRuleEthsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclAllRuleEthsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclAllExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclAllExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclRuleSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclRuleSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAclRuleSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAclRuleSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclRuleDelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclRuleDelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAclRuleDelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAclRuleDelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclCommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclCommitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclDelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclDelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAclDelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAclDelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclApplyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAclApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAclApplyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclCountersEnabledSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclCountersEnabledSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAclCountersEnabledSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAclCountersEnabledSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclFragmentsEnabledSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclFragmentsEnabledSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAclFragmentsEnabledSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkAclFragmentsEnabledSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamAllowedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamAllowedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DgramAllowedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DgramAllowedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_acl_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*AclWatchResponse_Ack)(nil),
		(*AclWatchResponse_OnAclSync)(nil),
		(*AclWatchResponse_OnAclSyncFail)(nil),
	}
	file_acl_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*AclRuleSetRequest_IpRule)(nil),
		(*AclRuleSetRequest_EthRule)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_acl_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_acl_proto_goTypes,
		DependencyIndexes: file_acl_proto_depIdxs,
		MessageInfos:      file_acl_proto_msgTypes,
	}.Build()
	File_acl_proto = out.File
	file_acl_proto_rawDesc = nil
	file_acl_proto_goTypes = nil
	file_acl_proto_depIdxs = nil
}
