// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: eapi.proto

package EosSdkRpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EapiMgrServiceClient is the client API for EapiMgrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EapiMgrServiceClient interface {
	// *
	// Queries for the output of a CLI show command.
	//
	// EosSdk reference: eos::eapi_mgr::run_show_cmd
	RunShowCmd(ctx context.Context, in *RunShowCmdRequest, opts ...grpc.CallOption) (*RunShowCmdResponse, error)
	// *
	// Executes one or more configuration commands.
	//
	// EosSdk reference: eos::eapi_mgr::run_config_cmds
	RunConfigCmds(ctx context.Context, in *RunConfigCmdsRequest, opts ...grpc.CallOption) (*RunConfigCmdsResponse, error)
}

type eapiMgrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEapiMgrServiceClient(cc grpc.ClientConnInterface) EapiMgrServiceClient {
	return &eapiMgrServiceClient{cc}
}

func (c *eapiMgrServiceClient) RunShowCmd(ctx context.Context, in *RunShowCmdRequest, opts ...grpc.CallOption) (*RunShowCmdResponse, error) {
	out := new(RunShowCmdResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EapiMgrService/run_show_cmd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eapiMgrServiceClient) RunConfigCmds(ctx context.Context, in *RunConfigCmdsRequest, opts ...grpc.CallOption) (*RunConfigCmdsResponse, error) {
	out := new(RunConfigCmdsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.EapiMgrService/run_config_cmds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EapiMgrServiceServer is the server API for EapiMgrService service.
// All implementations should embed UnimplementedEapiMgrServiceServer
// for forward compatibility
type EapiMgrServiceServer interface {
	// *
	// Queries for the output of a CLI show command.
	//
	// EosSdk reference: eos::eapi_mgr::run_show_cmd
	RunShowCmd(context.Context, *RunShowCmdRequest) (*RunShowCmdResponse, error)
	// *
	// Executes one or more configuration commands.
	//
	// EosSdk reference: eos::eapi_mgr::run_config_cmds
	RunConfigCmds(context.Context, *RunConfigCmdsRequest) (*RunConfigCmdsResponse, error)
}

// UnimplementedEapiMgrServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEapiMgrServiceServer struct {
}

func (UnimplementedEapiMgrServiceServer) RunShowCmd(context.Context, *RunShowCmdRequest) (*RunShowCmdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunShowCmd not implemented")
}
func (UnimplementedEapiMgrServiceServer) RunConfigCmds(context.Context, *RunConfigCmdsRequest) (*RunConfigCmdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunConfigCmds not implemented")
}

// UnsafeEapiMgrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EapiMgrServiceServer will
// result in compilation errors.
type UnsafeEapiMgrServiceServer interface {
	mustEmbedUnimplementedEapiMgrServiceServer()
}

func RegisterEapiMgrServiceServer(s grpc.ServiceRegistrar, srv EapiMgrServiceServer) {
	s.RegisterService(&EapiMgrService_ServiceDesc, srv)
}

func _EapiMgrService_RunShowCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunShowCmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EapiMgrServiceServer).RunShowCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EapiMgrService/run_show_cmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EapiMgrServiceServer).RunShowCmd(ctx, req.(*RunShowCmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EapiMgrService_RunConfigCmds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunConfigCmdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EapiMgrServiceServer).RunConfigCmds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.EapiMgrService/run_config_cmds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EapiMgrServiceServer).RunConfigCmds(ctx, req.(*RunConfigCmdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EapiMgrService_ServiceDesc is the grpc.ServiceDesc for EapiMgrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EapiMgrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eos.remote.EapiMgrService",
	HandlerType: (*EapiMgrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "run_show_cmd",
			Handler:    _EapiMgrService_RunShowCmd_Handler,
		},
		{
			MethodName: "run_config_cmds",
			Handler:    _EapiMgrService_RunConfigCmds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eapi.proto",
}
