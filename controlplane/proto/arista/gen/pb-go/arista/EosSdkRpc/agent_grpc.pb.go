// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: agent.proto

package EosSdkRpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentServiceClient is the client API for AgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentServiceClient interface {
	// *
	// Subscription to monitor changes of the agent. This request
	// stays active until it is cancelled from client side or the server is shut down.
	// Supported events:
	//
	//	eos::agent_handler::on_agent_option:
	//	   Configuration option of the agent has changed.
	//
	// The events on_initialized and on_agent_enabled are out of rpc scope since
	// they imply on creation and destruction of the RPC server itself.
	//
	// EosSdk reference: eos::agent_handler (class)
	Watch(ctx context.Context, in *WatchAgentRequest, opts ...grpc.CallOption) (AgentService_WatchClient, error)
	// *
	// Queries for the unique numeric ID of the given agent.
	//
	// EosSdk reference: eos::agent_mgr::id
	AgentId(ctx context.Context, in *AgentIdRequest, opts ...grpc.CallOption) (*AgentIdResponse, error)
	// *
	// Queries whether the agent is enabled or not.
	//
	// EosSdk reference: eos::agent_mgr::enabled
	Enabled(ctx context.Context, in *AgentEnabledRequest, opts ...grpc.CallOption) (*AgentEnabledResponse, error)
	// *
	// Queries for the configured value of the given agent option.
	//
	// EosSdk reference: eos:agent_mgr::agent_option
	AgentOption(ctx context.Context, in *AgentOptionRequest, opts ...grpc.CallOption) (*AgentOptionResponse, error)
	// *
	// Queries whether the given option exists in the configuration or not.
	//
	// EosSdk reference: eos::agent_mgr::agent_option_exists
	AgentOptionExists(ctx context.Context, in *AgentOptionExistsRequest, opts ...grpc.CallOption) (*AgentOptionExistsResponse, error)
	// *
	// Enumerates all configured agent options.
	//
	// EosSdk reference: eos::agent::agent_option_iter
	AgentOptions(ctx context.Context, in *AgentOptionsRequest, opts ...grpc.CallOption) (AgentService_AgentOptionsClient, error)
	// *
	// Queries for the last set value for the given status name.
	//
	// EosSdk reference: eos::agent::status
	Status(ctx context.Context, in *AgentStatusRequest, opts ...grpc.CallOption) (*AgentStatusResponse, error)
	// *
	// Enumerates all status values set by this agent.
	//
	// EosSdk reference: eos::agent::status_iter
	Statuses(ctx context.Context, in *AgentStatusesRequest, opts ...grpc.CallOption) (AgentService_StatusesClient, error)
	// *
	// Sets a status value for the given status name.
	//
	// EosSdk reference: eos::agent_mgr::status_set
	StatusSet(ctx context.Context, in *AgentStatusSetRequest, opts ...grpc.CallOption) (*AgentStatusSetResponse, error)
	// *
	// Sets multiple status name/value pairs at once for this agent.
	//
	// EosSdk reference: eos::agent_mgr::status_set
	BulkStatusSet(ctx context.Context, in *AgentBulkStatusSetRequest, opts ...grpc.CallOption) (*AgentBulkStatusSetResponse, error)
	// *
	// Deletes the stored agent status for the given status name.
	//
	// EosSdk reference: eos::agent_mgr::status_del
	StatusDel(ctx context.Context, in *AgentStatusDelRequest, opts ...grpc.CallOption) (*AgentStatusDelResponse, error)
	// *
	// Deletes multiple statuses at once for each given status name.
	//
	// EosSdk reference: eos::agent_mgr::status_del
	BulkStatusDel(ctx context.Context, in *AgentBulkStatusDelRequest, opts ...grpc.CallOption) (*AgentBulkStatusDelResponse, error)
	// *
	// Gets the time elapsed since the start of this agent.
	//
	// EosSdk reference: eos::agent_mgr::agent_uptime
	AgentUptime(ctx context.Context, in *AgentUptimeRequest, opts ...grpc.CallOption) (*AgentUptimeResponse, error)
	// *
	// Causes EosSdkRpc agent to echo the payload and verify that the SDK thread is
	// also responsive.
	//
	// This function is specific to RPC and does not match any EOS SDK function.
	Ping(ctx context.Context, in *AgentPingRequest, opts ...grpc.CallOption) (*AgentPingResponse, error)
}

type agentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentServiceClient(cc grpc.ClientConnInterface) AgentServiceClient {
	return &agentServiceClient{cc}
}

func (c *agentServiceClient) Watch(ctx context.Context, in *WatchAgentRequest, opts ...grpc.CallOption) (AgentService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &AgentService_ServiceDesc.Streams[0], "/eos.remote.AgentService/watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgentService_WatchClient interface {
	Recv() (*WatchAgentResponse, error)
	grpc.ClientStream
}

type agentServiceWatchClient struct {
	grpc.ClientStream
}

func (x *agentServiceWatchClient) Recv() (*WatchAgentResponse, error) {
	m := new(WatchAgentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentServiceClient) AgentId(ctx context.Context, in *AgentIdRequest, opts ...grpc.CallOption) (*AgentIdResponse, error) {
	out := new(AgentIdResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.AgentService/agent_id", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) Enabled(ctx context.Context, in *AgentEnabledRequest, opts ...grpc.CallOption) (*AgentEnabledResponse, error) {
	out := new(AgentEnabledResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.AgentService/enabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentOption(ctx context.Context, in *AgentOptionRequest, opts ...grpc.CallOption) (*AgentOptionResponse, error) {
	out := new(AgentOptionResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.AgentService/agent_option", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentOptionExists(ctx context.Context, in *AgentOptionExistsRequest, opts ...grpc.CallOption) (*AgentOptionExistsResponse, error) {
	out := new(AgentOptionExistsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.AgentService/agent_option_exists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentOptions(ctx context.Context, in *AgentOptionsRequest, opts ...grpc.CallOption) (AgentService_AgentOptionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &AgentService_ServiceDesc.Streams[1], "/eos.remote.AgentService/agent_options", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentServiceAgentOptionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgentService_AgentOptionsClient interface {
	Recv() (*AgentOptionsResponse, error)
	grpc.ClientStream
}

type agentServiceAgentOptionsClient struct {
	grpc.ClientStream
}

func (x *agentServiceAgentOptionsClient) Recv() (*AgentOptionsResponse, error) {
	m := new(AgentOptionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentServiceClient) Status(ctx context.Context, in *AgentStatusRequest, opts ...grpc.CallOption) (*AgentStatusResponse, error) {
	out := new(AgentStatusResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.AgentService/status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) Statuses(ctx context.Context, in *AgentStatusesRequest, opts ...grpc.CallOption) (AgentService_StatusesClient, error) {
	stream, err := c.cc.NewStream(ctx, &AgentService_ServiceDesc.Streams[2], "/eos.remote.AgentService/statuses", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentServiceStatusesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AgentService_StatusesClient interface {
	Recv() (*AgentStatusesResponse, error)
	grpc.ClientStream
}

type agentServiceStatusesClient struct {
	grpc.ClientStream
}

func (x *agentServiceStatusesClient) Recv() (*AgentStatusesResponse, error) {
	m := new(AgentStatusesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentServiceClient) StatusSet(ctx context.Context, in *AgentStatusSetRequest, opts ...grpc.CallOption) (*AgentStatusSetResponse, error) {
	out := new(AgentStatusSetResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.AgentService/status_set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) BulkStatusSet(ctx context.Context, in *AgentBulkStatusSetRequest, opts ...grpc.CallOption) (*AgentBulkStatusSetResponse, error) {
	out := new(AgentBulkStatusSetResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.AgentService/bulk_status_set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) StatusDel(ctx context.Context, in *AgentStatusDelRequest, opts ...grpc.CallOption) (*AgentStatusDelResponse, error) {
	out := new(AgentStatusDelResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.AgentService/status_del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) BulkStatusDel(ctx context.Context, in *AgentBulkStatusDelRequest, opts ...grpc.CallOption) (*AgentBulkStatusDelResponse, error) {
	out := new(AgentBulkStatusDelResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.AgentService/bulk_status_del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AgentUptime(ctx context.Context, in *AgentUptimeRequest, opts ...grpc.CallOption) (*AgentUptimeResponse, error) {
	out := new(AgentUptimeResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.AgentService/agent_uptime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) Ping(ctx context.Context, in *AgentPingRequest, opts ...grpc.CallOption) (*AgentPingResponse, error) {
	out := new(AgentPingResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.AgentService/ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServiceServer is the server API for AgentService service.
// All implementations should embed UnimplementedAgentServiceServer
// for forward compatibility
type AgentServiceServer interface {
	// *
	// Subscription to monitor changes of the agent. This request
	// stays active until it is cancelled from client side or the server is shut down.
	// Supported events:
	//
	//	eos::agent_handler::on_agent_option:
	//	   Configuration option of the agent has changed.
	//
	// The events on_initialized and on_agent_enabled are out of rpc scope since
	// they imply on creation and destruction of the RPC server itself.
	//
	// EosSdk reference: eos::agent_handler (class)
	Watch(*WatchAgentRequest, AgentService_WatchServer) error
	// *
	// Queries for the unique numeric ID of the given agent.
	//
	// EosSdk reference: eos::agent_mgr::id
	AgentId(context.Context, *AgentIdRequest) (*AgentIdResponse, error)
	// *
	// Queries whether the agent is enabled or not.
	//
	// EosSdk reference: eos::agent_mgr::enabled
	Enabled(context.Context, *AgentEnabledRequest) (*AgentEnabledResponse, error)
	// *
	// Queries for the configured value of the given agent option.
	//
	// EosSdk reference: eos:agent_mgr::agent_option
	AgentOption(context.Context, *AgentOptionRequest) (*AgentOptionResponse, error)
	// *
	// Queries whether the given option exists in the configuration or not.
	//
	// EosSdk reference: eos::agent_mgr::agent_option_exists
	AgentOptionExists(context.Context, *AgentOptionExistsRequest) (*AgentOptionExistsResponse, error)
	// *
	// Enumerates all configured agent options.
	//
	// EosSdk reference: eos::agent::agent_option_iter
	AgentOptions(*AgentOptionsRequest, AgentService_AgentOptionsServer) error
	// *
	// Queries for the last set value for the given status name.
	//
	// EosSdk reference: eos::agent::status
	Status(context.Context, *AgentStatusRequest) (*AgentStatusResponse, error)
	// *
	// Enumerates all status values set by this agent.
	//
	// EosSdk reference: eos::agent::status_iter
	Statuses(*AgentStatusesRequest, AgentService_StatusesServer) error
	// *
	// Sets a status value for the given status name.
	//
	// EosSdk reference: eos::agent_mgr::status_set
	StatusSet(context.Context, *AgentStatusSetRequest) (*AgentStatusSetResponse, error)
	// *
	// Sets multiple status name/value pairs at once for this agent.
	//
	// EosSdk reference: eos::agent_mgr::status_set
	BulkStatusSet(context.Context, *AgentBulkStatusSetRequest) (*AgentBulkStatusSetResponse, error)
	// *
	// Deletes the stored agent status for the given status name.
	//
	// EosSdk reference: eos::agent_mgr::status_del
	StatusDel(context.Context, *AgentStatusDelRequest) (*AgentStatusDelResponse, error)
	// *
	// Deletes multiple statuses at once for each given status name.
	//
	// EosSdk reference: eos::agent_mgr::status_del
	BulkStatusDel(context.Context, *AgentBulkStatusDelRequest) (*AgentBulkStatusDelResponse, error)
	// *
	// Gets the time elapsed since the start of this agent.
	//
	// EosSdk reference: eos::agent_mgr::agent_uptime
	AgentUptime(context.Context, *AgentUptimeRequest) (*AgentUptimeResponse, error)
	// *
	// Causes EosSdkRpc agent to echo the payload and verify that the SDK thread is
	// also responsive.
	//
	// This function is specific to RPC and does not match any EOS SDK function.
	Ping(context.Context, *AgentPingRequest) (*AgentPingResponse, error)
}

// UnimplementedAgentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAgentServiceServer struct {
}

func (UnimplementedAgentServiceServer) Watch(*WatchAgentRequest, AgentService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedAgentServiceServer) AgentId(context.Context, *AgentIdRequest) (*AgentIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentId not implemented")
}
func (UnimplementedAgentServiceServer) Enabled(context.Context, *AgentEnabledRequest) (*AgentEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enabled not implemented")
}
func (UnimplementedAgentServiceServer) AgentOption(context.Context, *AgentOptionRequest) (*AgentOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentOption not implemented")
}
func (UnimplementedAgentServiceServer) AgentOptionExists(context.Context, *AgentOptionExistsRequest) (*AgentOptionExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentOptionExists not implemented")
}
func (UnimplementedAgentServiceServer) AgentOptions(*AgentOptionsRequest, AgentService_AgentOptionsServer) error {
	return status.Errorf(codes.Unimplemented, "method AgentOptions not implemented")
}
func (UnimplementedAgentServiceServer) Status(context.Context, *AgentStatusRequest) (*AgentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedAgentServiceServer) Statuses(*AgentStatusesRequest, AgentService_StatusesServer) error {
	return status.Errorf(codes.Unimplemented, "method Statuses not implemented")
}
func (UnimplementedAgentServiceServer) StatusSet(context.Context, *AgentStatusSetRequest) (*AgentStatusSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusSet not implemented")
}
func (UnimplementedAgentServiceServer) BulkStatusSet(context.Context, *AgentBulkStatusSetRequest) (*AgentBulkStatusSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkStatusSet not implemented")
}
func (UnimplementedAgentServiceServer) StatusDel(context.Context, *AgentStatusDelRequest) (*AgentStatusDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusDel not implemented")
}
func (UnimplementedAgentServiceServer) BulkStatusDel(context.Context, *AgentBulkStatusDelRequest) (*AgentBulkStatusDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkStatusDel not implemented")
}
func (UnimplementedAgentServiceServer) AgentUptime(context.Context, *AgentUptimeRequest) (*AgentUptimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentUptime not implemented")
}
func (UnimplementedAgentServiceServer) Ping(context.Context, *AgentPingRequest) (*AgentPingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

// UnsafeAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServiceServer will
// result in compilation errors.
type UnsafeAgentServiceServer interface {
	mustEmbedUnimplementedAgentServiceServer()
}

func RegisterAgentServiceServer(s grpc.ServiceRegistrar, srv AgentServiceServer) {
	s.RegisterService(&AgentService_ServiceDesc, srv)
}

func _AgentService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchAgentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServiceServer).Watch(m, &agentServiceWatchServer{stream})
}

type AgentService_WatchServer interface {
	Send(*WatchAgentResponse) error
	grpc.ServerStream
}

type agentServiceWatchServer struct {
	grpc.ServerStream
}

func (x *agentServiceWatchServer) Send(m *WatchAgentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgentService_AgentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AgentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.AgentService/agent_id",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AgentId(ctx, req.(*AgentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_Enabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).Enabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.AgentService/enabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).Enabled(ctx, req.(*AgentEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AgentOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.AgentService/agent_option",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AgentOption(ctx, req.(*AgentOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentOptionExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentOptionExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AgentOptionExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.AgentService/agent_option_exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AgentOptionExists(ctx, req.(*AgentOptionExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentOptions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AgentOptionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServiceServer).AgentOptions(m, &agentServiceAgentOptionsServer{stream})
}

type AgentService_AgentOptionsServer interface {
	Send(*AgentOptionsResponse) error
	grpc.ServerStream
}

type agentServiceAgentOptionsServer struct {
	grpc.ServerStream
}

func (x *agentServiceAgentOptionsServer) Send(m *AgentOptionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgentService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.AgentService/status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).Status(ctx, req.(*AgentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_Statuses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AgentStatusesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServiceServer).Statuses(m, &agentServiceStatusesServer{stream})
}

type AgentService_StatusesServer interface {
	Send(*AgentStatusesResponse) error
	grpc.ServerStream
}

type agentServiceStatusesServer struct {
	grpc.ServerStream
}

func (x *agentServiceStatusesServer) Send(m *AgentStatusesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AgentService_StatusSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentStatusSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).StatusSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.AgentService/status_set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).StatusSet(ctx, req.(*AgentStatusSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_BulkStatusSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentBulkStatusSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).BulkStatusSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.AgentService/bulk_status_set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).BulkStatusSet(ctx, req.(*AgentBulkStatusSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_StatusDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentStatusDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).StatusDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.AgentService/status_del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).StatusDel(ctx, req.(*AgentStatusDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_BulkStatusDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentBulkStatusDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).BulkStatusDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.AgentService/bulk_status_del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).BulkStatusDel(ctx, req.(*AgentBulkStatusDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AgentUptime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentUptimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AgentUptime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.AgentService/agent_uptime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AgentUptime(ctx, req.(*AgentUptimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.AgentService/ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).Ping(ctx, req.(*AgentPingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentService_ServiceDesc is the grpc.ServiceDesc for AgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eos.remote.AgentService",
	HandlerType: (*AgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "agent_id",
			Handler:    _AgentService_AgentId_Handler,
		},
		{
			MethodName: "enabled",
			Handler:    _AgentService_Enabled_Handler,
		},
		{
			MethodName: "agent_option",
			Handler:    _AgentService_AgentOption_Handler,
		},
		{
			MethodName: "agent_option_exists",
			Handler:    _AgentService_AgentOptionExists_Handler,
		},
		{
			MethodName: "status",
			Handler:    _AgentService_Status_Handler,
		},
		{
			MethodName: "status_set",
			Handler:    _AgentService_StatusSet_Handler,
		},
		{
			MethodName: "bulk_status_set",
			Handler:    _AgentService_BulkStatusSet_Handler,
		},
		{
			MethodName: "status_del",
			Handler:    _AgentService_StatusDel_Handler,
		},
		{
			MethodName: "bulk_status_del",
			Handler:    _AgentService_BulkStatusDel_Handler,
		},
		{
			MethodName: "agent_uptime",
			Handler:    _AgentService_AgentUptime_Handler,
		},
		{
			MethodName: "ping",
			Handler:    _AgentService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "watch",
			Handler:       _AgentService_Watch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "agent_options",
			Handler:       _AgentService_AgentOptions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "statuses",
			Handler:       _AgentService_Statuses_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "agent.proto",
}
