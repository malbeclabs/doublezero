// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: agent.proto

package qa

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QAAgentServiceClient is the client API for QAAgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QAAgentServiceClient interface {
	ConnectUnicast(ctx context.Context, in *ConnectUnicastRequest, opts ...grpc.CallOption) (*Result, error)
	CreateMulticastGroup(ctx context.Context, in *CreateMulticastGroupRequest, opts ...grpc.CallOption) (*Result, error)
	DeleteMulticastGroup(ctx context.Context, in *DeleteMulticastGroupRequest, opts ...grpc.CallOption) (*Result, error)
	MulticastAllowListAdd(ctx context.Context, in *MulticastAllowListAddRequest, opts ...grpc.CallOption) (*Result, error)
	ConnectMulticast(ctx context.Context, in *ConnectMulticastRequest, opts ...grpc.CallOption) (*Result, error)
	GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusResponse, error)
	GetPublicIP(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPublicIPResponse, error)
	Disconnect(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Result, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResult, error)
	MulticastJoin(ctx context.Context, in *MulticastJoinRequest, opts ...grpc.CallOption) (*MulticastJoinResult, error)
	MulticastLeave(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MulticastReport(ctx context.Context, in *MulticastReportRequest, opts ...grpc.CallOption) (*MulticastReportResult, error)
	MulticastSend(ctx context.Context, in *MulticastSendRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type qAAgentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQAAgentServiceClient(cc grpc.ClientConnInterface) QAAgentServiceClient {
	return &qAAgentServiceClient{cc}
}

func (c *qAAgentServiceClient) ConnectUnicast(ctx context.Context, in *ConnectUnicastRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/qa.QAAgentService/ConnectUnicast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qAAgentServiceClient) CreateMulticastGroup(ctx context.Context, in *CreateMulticastGroupRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/qa.QAAgentService/CreateMulticastGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qAAgentServiceClient) DeleteMulticastGroup(ctx context.Context, in *DeleteMulticastGroupRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/qa.QAAgentService/DeleteMulticastGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qAAgentServiceClient) MulticastAllowListAdd(ctx context.Context, in *MulticastAllowListAddRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/qa.QAAgentService/MulticastAllowListAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qAAgentServiceClient) ConnectMulticast(ctx context.Context, in *ConnectMulticastRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/qa.QAAgentService/ConnectMulticast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qAAgentServiceClient) GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/qa.QAAgentService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qAAgentServiceClient) GetPublicIP(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPublicIPResponse, error) {
	out := new(GetPublicIPResponse)
	err := c.cc.Invoke(ctx, "/qa.QAAgentService/GetPublicIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qAAgentServiceClient) Disconnect(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/qa.QAAgentService/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qAAgentServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResult, error) {
	out := new(PingResult)
	err := c.cc.Invoke(ctx, "/qa.QAAgentService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qAAgentServiceClient) MulticastJoin(ctx context.Context, in *MulticastJoinRequest, opts ...grpc.CallOption) (*MulticastJoinResult, error) {
	out := new(MulticastJoinResult)
	err := c.cc.Invoke(ctx, "/qa.QAAgentService/MulticastJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qAAgentServiceClient) MulticastLeave(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/qa.QAAgentService/MulticastLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qAAgentServiceClient) MulticastReport(ctx context.Context, in *MulticastReportRequest, opts ...grpc.CallOption) (*MulticastReportResult, error) {
	out := new(MulticastReportResult)
	err := c.cc.Invoke(ctx, "/qa.QAAgentService/MulticastReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qAAgentServiceClient) MulticastSend(ctx context.Context, in *MulticastSendRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/qa.QAAgentService/MulticastSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QAAgentServiceServer is the server API for QAAgentService service.
// All implementations should embed UnimplementedQAAgentServiceServer
// for forward compatibility
type QAAgentServiceServer interface {
	ConnectUnicast(context.Context, *ConnectUnicastRequest) (*Result, error)
	CreateMulticastGroup(context.Context, *CreateMulticastGroupRequest) (*Result, error)
	DeleteMulticastGroup(context.Context, *DeleteMulticastGroupRequest) (*Result, error)
	MulticastAllowListAdd(context.Context, *MulticastAllowListAddRequest) (*Result, error)
	ConnectMulticast(context.Context, *ConnectMulticastRequest) (*Result, error)
	GetStatus(context.Context, *emptypb.Empty) (*StatusResponse, error)
	GetPublicIP(context.Context, *emptypb.Empty) (*GetPublicIPResponse, error)
	Disconnect(context.Context, *emptypb.Empty) (*Result, error)
	Ping(context.Context, *PingRequest) (*PingResult, error)
	MulticastJoin(context.Context, *MulticastJoinRequest) (*MulticastJoinResult, error)
	MulticastLeave(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	MulticastReport(context.Context, *MulticastReportRequest) (*MulticastReportResult, error)
	MulticastSend(context.Context, *MulticastSendRequest) (*emptypb.Empty, error)
}

// UnimplementedQAAgentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedQAAgentServiceServer struct {
}

func (UnimplementedQAAgentServiceServer) ConnectUnicast(context.Context, *ConnectUnicastRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectUnicast not implemented")
}
func (UnimplementedQAAgentServiceServer) CreateMulticastGroup(context.Context, *CreateMulticastGroupRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMulticastGroup not implemented")
}
func (UnimplementedQAAgentServiceServer) DeleteMulticastGroup(context.Context, *DeleteMulticastGroupRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMulticastGroup not implemented")
}
func (UnimplementedQAAgentServiceServer) MulticastAllowListAdd(context.Context, *MulticastAllowListAddRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MulticastAllowListAdd not implemented")
}
func (UnimplementedQAAgentServiceServer) ConnectMulticast(context.Context, *ConnectMulticastRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectMulticast not implemented")
}
func (UnimplementedQAAgentServiceServer) GetStatus(context.Context, *emptypb.Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedQAAgentServiceServer) GetPublicIP(context.Context, *emptypb.Empty) (*GetPublicIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicIP not implemented")
}
func (UnimplementedQAAgentServiceServer) Disconnect(context.Context, *emptypb.Empty) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedQAAgentServiceServer) Ping(context.Context, *PingRequest) (*PingResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedQAAgentServiceServer) MulticastJoin(context.Context, *MulticastJoinRequest) (*MulticastJoinResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MulticastJoin not implemented")
}
func (UnimplementedQAAgentServiceServer) MulticastLeave(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MulticastLeave not implemented")
}
func (UnimplementedQAAgentServiceServer) MulticastReport(context.Context, *MulticastReportRequest) (*MulticastReportResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MulticastReport not implemented")
}
func (UnimplementedQAAgentServiceServer) MulticastSend(context.Context, *MulticastSendRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MulticastSend not implemented")
}

// UnsafeQAAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QAAgentServiceServer will
// result in compilation errors.
type UnsafeQAAgentServiceServer interface {
	mustEmbedUnimplementedQAAgentServiceServer()
}

func RegisterQAAgentServiceServer(s grpc.ServiceRegistrar, srv QAAgentServiceServer) {
	s.RegisterService(&QAAgentService_ServiceDesc, srv)
}

func _QAAgentService_ConnectUnicast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectUnicastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QAAgentServiceServer).ConnectUnicast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qa.QAAgentService/ConnectUnicast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QAAgentServiceServer).ConnectUnicast(ctx, req.(*ConnectUnicastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QAAgentService_CreateMulticastGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMulticastGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QAAgentServiceServer).CreateMulticastGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qa.QAAgentService/CreateMulticastGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QAAgentServiceServer).CreateMulticastGroup(ctx, req.(*CreateMulticastGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QAAgentService_DeleteMulticastGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMulticastGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QAAgentServiceServer).DeleteMulticastGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qa.QAAgentService/DeleteMulticastGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QAAgentServiceServer).DeleteMulticastGroup(ctx, req.(*DeleteMulticastGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QAAgentService_MulticastAllowListAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MulticastAllowListAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QAAgentServiceServer).MulticastAllowListAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qa.QAAgentService/MulticastAllowListAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QAAgentServiceServer).MulticastAllowListAdd(ctx, req.(*MulticastAllowListAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QAAgentService_ConnectMulticast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectMulticastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QAAgentServiceServer).ConnectMulticast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qa.QAAgentService/ConnectMulticast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QAAgentServiceServer).ConnectMulticast(ctx, req.(*ConnectMulticastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QAAgentService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QAAgentServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qa.QAAgentService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QAAgentServiceServer).GetStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QAAgentService_GetPublicIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QAAgentServiceServer).GetPublicIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qa.QAAgentService/GetPublicIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QAAgentServiceServer).GetPublicIP(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QAAgentService_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QAAgentServiceServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qa.QAAgentService/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QAAgentServiceServer).Disconnect(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QAAgentService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QAAgentServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qa.QAAgentService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QAAgentServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QAAgentService_MulticastJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MulticastJoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QAAgentServiceServer).MulticastJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qa.QAAgentService/MulticastJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QAAgentServiceServer).MulticastJoin(ctx, req.(*MulticastJoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QAAgentService_MulticastLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QAAgentServiceServer).MulticastLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qa.QAAgentService/MulticastLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QAAgentServiceServer).MulticastLeave(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QAAgentService_MulticastReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MulticastReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QAAgentServiceServer).MulticastReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qa.QAAgentService/MulticastReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QAAgentServiceServer).MulticastReport(ctx, req.(*MulticastReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QAAgentService_MulticastSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MulticastSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QAAgentServiceServer).MulticastSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qa.QAAgentService/MulticastSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QAAgentServiceServer).MulticastSend(ctx, req.(*MulticastSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QAAgentService_ServiceDesc is the grpc.ServiceDesc for QAAgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QAAgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qa.QAAgentService",
	HandlerType: (*QAAgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConnectUnicast",
			Handler:    _QAAgentService_ConnectUnicast_Handler,
		},
		{
			MethodName: "CreateMulticastGroup",
			Handler:    _QAAgentService_CreateMulticastGroup_Handler,
		},
		{
			MethodName: "DeleteMulticastGroup",
			Handler:    _QAAgentService_DeleteMulticastGroup_Handler,
		},
		{
			MethodName: "MulticastAllowListAdd",
			Handler:    _QAAgentService_MulticastAllowListAdd_Handler,
		},
		{
			MethodName: "ConnectMulticast",
			Handler:    _QAAgentService_ConnectMulticast_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _QAAgentService_GetStatus_Handler,
		},
		{
			MethodName: "GetPublicIP",
			Handler:    _QAAgentService_GetPublicIP_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _QAAgentService_Disconnect_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _QAAgentService_Ping_Handler,
		},
		{
			MethodName: "MulticastJoin",
			Handler:    _QAAgentService_MulticastJoin_Handler,
		},
		{
			MethodName: "MulticastLeave",
			Handler:    _QAAgentService_MulticastLeave_Handler,
		},
		{
			MethodName: "MulticastReport",
			Handler:    _QAAgentService_MulticastReport_Handler,
		},
		{
			MethodName: "MulticastSend",
			Handler:    _QAAgentService_MulticastSend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent.proto",
}
