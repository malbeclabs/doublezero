// Copyright (c) 2021 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: acl_types.proto

package EosSdkRpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// The ACL type.
//
// EosSdk reference: eos::acl_type_t
type AclType int32

const (
	AclType_ACL_TYPE_NULL AclType = 0
	AclType_ACL_TYPE_IPV4 AclType = 1
	AclType_ACL_TYPE_IPV6 AclType = 2
	AclType_ACL_TYPE_ETH  AclType = 3
	AclType_ACL_TYPE_MPLS AclType = 4
)

// Enum value maps for AclType.
var (
	AclType_name = map[int32]string{
		0: "ACL_TYPE_NULL",
		1: "ACL_TYPE_IPV4",
		2: "ACL_TYPE_IPV6",
		3: "ACL_TYPE_ETH",
		4: "ACL_TYPE_MPLS",
	}
	AclType_value = map[string]int32{
		"ACL_TYPE_NULL": 0,
		"ACL_TYPE_IPV4": 1,
		"ACL_TYPE_IPV6": 2,
		"ACL_TYPE_ETH":  3,
		"ACL_TYPE_MPLS": 4,
	}
)

func (x AclType) Enum() *AclType {
	p := new(AclType)
	*p = x
	return p
}

func (x AclType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AclType) Descriptor() protoreflect.EnumDescriptor {
	return file_acl_types_proto_enumTypes[0].Descriptor()
}

func (AclType) Type() protoreflect.EnumType {
	return &file_acl_types_proto_enumTypes[0]
}

func (x AclType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AclType.Descriptor instead.
func (AclType) EnumDescriptor() ([]byte, []int) {
	return file_acl_types_proto_rawDescGZIP(), []int{0}
}

// *
// The direction in which an ACL is applied. Can apply to both directions by
// specifying them in two separate calls.
//
// EosSdk reference: eos::acl_direction_t
type AclDirection int32

const (
	AclDirection_ACL_DIRECTION_NULL AclDirection = 0
	AclDirection_ACL_IN             AclDirection = 1
	AclDirection_ACL_OUT            AclDirection = 2
)

// Enum value maps for AclDirection.
var (
	AclDirection_name = map[int32]string{
		0: "ACL_DIRECTION_NULL",
		1: "ACL_IN",
		2: "ACL_OUT",
	}
	AclDirection_value = map[string]int32{
		"ACL_DIRECTION_NULL": 0,
		"ACL_IN":             1,
		"ACL_OUT":            2,
	}
)

func (x AclDirection) Enum() *AclDirection {
	p := new(AclDirection)
	*p = x
	return p
}

func (x AclDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AclDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_acl_types_proto_enumTypes[1].Descriptor()
}

func (AclDirection) Type() protoreflect.EnumType {
	return &file_acl_types_proto_enumTypes[1]
}

func (x AclDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AclDirection.Descriptor instead.
func (AclDirection) EnumDescriptor() ([]byte, []int) {
	return file_acl_types_proto_rawDescGZIP(), []int{1}
}

// *
// The type of range operator for TTL and port specifications.
//
// EosSdk reference: eos::acl_range_operator_t
type AclRangeOperator int32

const (
	AclRangeOperator_ACL_RANGE_NULL    AclRangeOperator = 0
	AclRangeOperator_ACL_RANGE_ANY     AclRangeOperator = 1
	AclRangeOperator_ACL_RANGE_EQ      AclRangeOperator = 2
	AclRangeOperator_ACL_RANGE_GT      AclRangeOperator = 3
	AclRangeOperator_ACL_RANGE_LT      AclRangeOperator = 4
	AclRangeOperator_ACL_RANGE_NEQ     AclRangeOperator = 5
	AclRangeOperator_ACL_RANGE_BETWEEN AclRangeOperator = 6
)

// Enum value maps for AclRangeOperator.
var (
	AclRangeOperator_name = map[int32]string{
		0: "ACL_RANGE_NULL",
		1: "ACL_RANGE_ANY",
		2: "ACL_RANGE_EQ",
		3: "ACL_RANGE_GT",
		4: "ACL_RANGE_LT",
		5: "ACL_RANGE_NEQ",
		6: "ACL_RANGE_BETWEEN",
	}
	AclRangeOperator_value = map[string]int32{
		"ACL_RANGE_NULL":    0,
		"ACL_RANGE_ANY":     1,
		"ACL_RANGE_EQ":      2,
		"ACL_RANGE_GT":      3,
		"ACL_RANGE_LT":      4,
		"ACL_RANGE_NEQ":     5,
		"ACL_RANGE_BETWEEN": 6,
	}
)

func (x AclRangeOperator) Enum() *AclRangeOperator {
	p := new(AclRangeOperator)
	*p = x
	return p
}

func (x AclRangeOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AclRangeOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_acl_types_proto_enumTypes[2].Descriptor()
}

func (AclRangeOperator) Type() protoreflect.EnumType {
	return &file_acl_types_proto_enumTypes[2]
}

func (x AclRangeOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AclRangeOperator.Descriptor instead.
func (AclRangeOperator) EnumDescriptor() ([]byte, []int) {
	return file_acl_types_proto_rawDescGZIP(), []int{2}
}

// *
// The action to take for an individual ACL rule.
//
// EosSdk reference: eos::acl_action_t
type AclAction int32

const (
	AclAction_ACL_ACTION_NULL AclAction = 0
	AclAction_ACL_PERMIT      AclAction = 1
	AclAction_ACL_DENY        AclAction = 2
)

// Enum value maps for AclAction.
var (
	AclAction_name = map[int32]string{
		0: "ACL_ACTION_NULL",
		1: "ACL_PERMIT",
		2: "ACL_DENY",
	}
	AclAction_value = map[string]int32{
		"ACL_ACTION_NULL": 0,
		"ACL_PERMIT":      1,
		"ACL_DENY":        2,
	}
)

func (x AclAction) Enum() *AclAction {
	p := new(AclAction)
	*p = x
	return p
}

func (x AclAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AclAction) Descriptor() protoreflect.EnumDescriptor {
	return file_acl_types_proto_enumTypes[3].Descriptor()
}

func (AclAction) Type() protoreflect.EnumType {
	return &file_acl_types_proto_enumTypes[3]
}

func (x AclAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AclAction.Descriptor instead.
func (AclAction) EnumDescriptor() ([]byte, []int) {
	return file_acl_types_proto_rawDescGZIP(), []int{3}
}

// *
// TCP flags used in IP rules to specify which TCP flags to match. Shows which bits
// correspond to which flags.
//
// EosSdk reference: eos::acl_tcp_flag_t
type AclTcpFlag int32

const (
	AclTcpFlag_ACL_TCP_NULL AclTcpFlag = 0
	AclTcpFlag_ACL_TCP_FIN  AclTcpFlag = 1
	AclTcpFlag_ACL_TCP_SYN  AclTcpFlag = 2
	AclTcpFlag_ACL_TCP_RST  AclTcpFlag = 4
	AclTcpFlag_ACL_TCP_PSH  AclTcpFlag = 8
	AclTcpFlag_ACL_TCP_ACK  AclTcpFlag = 16
	AclTcpFlag_ACL_TCP_URG  AclTcpFlag = 32
	AclTcpFlag_ACL_TCP_ECE  AclTcpFlag = 64
	AclTcpFlag_ACL_TCP_CWR  AclTcpFlag = 128
)

// Enum value maps for AclTcpFlag.
var (
	AclTcpFlag_name = map[int32]string{
		0:   "ACL_TCP_NULL",
		1:   "ACL_TCP_FIN",
		2:   "ACL_TCP_SYN",
		4:   "ACL_TCP_RST",
		8:   "ACL_TCP_PSH",
		16:  "ACL_TCP_ACK",
		32:  "ACL_TCP_URG",
		64:  "ACL_TCP_ECE",
		128: "ACL_TCP_CWR",
	}
	AclTcpFlag_value = map[string]int32{
		"ACL_TCP_NULL": 0,
		"ACL_TCP_FIN":  1,
		"ACL_TCP_SYN":  2,
		"ACL_TCP_RST":  4,
		"ACL_TCP_PSH":  8,
		"ACL_TCP_ACK":  16,
		"ACL_TCP_URG":  32,
		"ACL_TCP_ECE":  64,
		"ACL_TCP_CWR":  128,
	}
)

func (x AclTcpFlag) Enum() *AclTcpFlag {
	p := new(AclTcpFlag)
	*p = x
	return p
}

func (x AclTcpFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AclTcpFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_acl_types_proto_enumTypes[4].Descriptor()
}

func (AclTcpFlag) Type() protoreflect.EnumType {
	return &file_acl_types_proto_enumTypes[4]
}

func (x AclTcpFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AclTcpFlag.Descriptor instead.
func (AclTcpFlag) EnumDescriptor() ([]byte, []int) {
	return file_acl_types_proto_rawDescGZIP(), []int{4}
}

// *
// IP traffic type to be matched.
//
// EosSdk reference: eos::acl_ip_type_t
type AclIpType int32

const (
	AclIpType_ACL_IP_TYPE_NOT_SET AclIpType = 0
	AclIpType_ACL_IP_TYPE_ANY     AclIpType = 1
	AclIpType_ACL_IP_TYPE_IP      AclIpType = 2
	AclIpType_ACL_IP_TYPE_MPLS    AclIpType = 3
)

// Enum value maps for AclIpType.
var (
	AclIpType_name = map[int32]string{
		0: "ACL_IP_TYPE_NOT_SET",
		1: "ACL_IP_TYPE_ANY",
		2: "ACL_IP_TYPE_IP",
		3: "ACL_IP_TYPE_MPLS",
	}
	AclIpType_value = map[string]int32{
		"ACL_IP_TYPE_NOT_SET": 0,
		"ACL_IP_TYPE_ANY":     1,
		"ACL_IP_TYPE_IP":      2,
		"ACL_IP_TYPE_MPLS":    3,
	}
)

func (x AclIpType) Enum() *AclIpType {
	p := new(AclIpType)
	*p = x
	return p
}

func (x AclIpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AclIpType) Descriptor() protoreflect.EnumDescriptor {
	return file_acl_types_proto_enumTypes[5].Descriptor()
}

func (AclIpType) Type() protoreflect.EnumType {
	return &file_acl_types_proto_enumTypes[5]
}

func (x AclIpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AclIpType.Descriptor instead.
func (AclIpType) EnumDescriptor() ([]byte, []int) {
	return file_acl_types_proto_rawDescGZIP(), []int{5}
}

// *
// An ACL key is the combination of its name and ACL type.
//
// EosSdk reference: eos::acl_key_t
type AclKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AclName string  `protobuf:"bytes,1,opt,name=acl_name,json=aclName,proto3" json:"acl_name,omitempty"`
	AclType AclType `protobuf:"varint,2,opt,name=acl_type,json=aclType,proto3,enum=eos.remote.AclType" json:"acl_type,omitempty"`
}

func (x *AclKey) Reset() {
	*x = AclKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclKey) ProtoMessage() {}

func (x *AclKey) ProtoReflect() protoreflect.Message {
	mi := &file_acl_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclKey.ProtoReflect.Descriptor instead.
func (*AclKey) Descriptor() ([]byte, []int) {
	return file_acl_types_proto_rawDescGZIP(), []int{0}
}

func (x *AclKey) GetAclName() string {
	if x != nil {
		return x.AclName
	}
	return ""
}

func (x *AclKey) GetAclType() AclType {
	if x != nil {
		return x.AclType
	}
	return AclType_ACL_TYPE_NULL
}

// *
// Contains common fields for ACL rules.
//
// EosSdk reference: eos::acl_rule_base_t
type AclRuleBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ActionPresent:
	//
	//	*AclRuleBase_Action
	ActionPresent isAclRuleBase_ActionPresent `protobuf_oneof:"action_present"`
	Log           bool                        `protobuf:"varint,2,opt,name=log,proto3" json:"log,omitempty"`
}

func (x *AclRuleBase) Reset() {
	*x = AclRuleBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclRuleBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclRuleBase) ProtoMessage() {}

func (x *AclRuleBase) ProtoReflect() protoreflect.Message {
	mi := &file_acl_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclRuleBase.ProtoReflect.Descriptor instead.
func (*AclRuleBase) Descriptor() ([]byte, []int) {
	return file_acl_types_proto_rawDescGZIP(), []int{1}
}

func (m *AclRuleBase) GetActionPresent() isAclRuleBase_ActionPresent {
	if m != nil {
		return m.ActionPresent
	}
	return nil
}

func (x *AclRuleBase) GetAction() AclAction {
	if x, ok := x.GetActionPresent().(*AclRuleBase_Action); ok {
		return x.Action
	}
	return AclAction_ACL_ACTION_NULL
}

func (x *AclRuleBase) GetLog() bool {
	if x != nil {
		return x.Log
	}
	return false
}

type isAclRuleBase_ActionPresent interface {
	isAclRuleBase_ActionPresent()
}

type AclRuleBase_Action struct {
	// Default value is ACL_PERMIT.
	Action AclAction `protobuf:"varint,1,opt,name=action,proto3,enum=eos.remote.AclAction,oneof"`
}

func (*AclRuleBase_Action) isAclRuleBase_ActionPresent() {}

// *
// An individual ACL rule for IPv4 or IPv6 ACLs.
//
// EosSdk reference: eos::acl_rule_ip_t
type AclRuleIp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseFields *AclRuleBase `protobuf:"bytes,1,opt,name=base_fields,json=baseFields,proto3" json:"base_fields,omitempty"`
	// Must be in range 0 to 65535.
	Vlan uint32 `protobuf:"varint,2,opt,name=vlan,proto3" json:"vlan,omitempty"`
	// Types that are assignable to VlanMaskPresent:
	//
	//	*AclRuleIp_VlanMask
	VlanMaskPresent isAclRuleIp_VlanMaskPresent `protobuf_oneof:"vlan_mask_present"`
	// Must be in range 0 to 65535.
	InnerVlan uint32 `protobuf:"varint,4,opt,name=inner_vlan,json=innerVlan,proto3" json:"inner_vlan,omitempty"`
	// Types that are assignable to InnerVlanMaskPresent:
	//
	//	*AclRuleIp_InnerVlanMask
	InnerVlanMaskPresent isAclRuleIp_InnerVlanMaskPresent `protobuf_oneof:"inner_vlan_mask_present"`
	// Must be in range 0 to 255.
	IpProtocol      uint32       `protobuf:"varint,6,opt,name=ip_protocol,json=ipProtocol,proto3" json:"ip_protocol,omitempty"`
	Ttl             *AclTtlSpec  `protobuf:"bytes,7,opt,name=ttl,proto3" json:"ttl,omitempty"`
	SourceAddr      *IpAddrMask  `protobuf:"bytes,8,opt,name=source_addr,json=sourceAddr,proto3" json:"source_addr,omitempty"`
	DestinationAddr *IpAddrMask  `protobuf:"bytes,9,opt,name=destination_addr,json=destinationAddr,proto3" json:"destination_addr,omitempty"`
	SourcePort      *AclPortSpec `protobuf:"bytes,10,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	DestinationPort *AclPortSpec `protobuf:"bytes,11,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	NexthopGroup    string       `protobuf:"bytes,12,opt,name=nexthop_group,json=nexthopGroup,proto3" json:"nexthop_group,omitempty"`
	// Bitmask of TCP flags. Bits should match the desired flag values defined in the
	// enum AclTcpFlag. Must be in range 0 to 65535.
	TcpFlags uint32 `protobuf:"varint,13,opt,name=tcp_flags,json=tcpFlags,proto3" json:"tcp_flags,omitempty"`
	// Types that are assignable to IpTypePresent:
	//
	//	*AclRuleIp_IpType
	IpTypePresent isAclRuleIp_IpTypePresent `protobuf_oneof:"ip_type_present"`
	Established   bool                      `protobuf:"varint,15,opt,name=established,proto3" json:"established,omitempty"`
	// Types that are assignable to IcmpTypePresent:
	//
	//	*AclRuleIp_IcmpType
	IcmpTypePresent isAclRuleIp_IcmpTypePresent `protobuf_oneof:"icmp_type_present"`
	// Types that are assignable to IcmpCodePresent:
	//
	//	*AclRuleIp_IcmpCode
	IcmpCodePresent isAclRuleIp_IcmpCodePresent `protobuf_oneof:"icmp_code_present"`
	// Must be in range 0 to 255.
	PriorityValue uint32 `protobuf:"varint,18,opt,name=priority_value,json=priorityValue,proto3" json:"priority_value,omitempty"`
	// Must be in range 0 to 255.
	PriorityMask    uint32 `protobuf:"varint,19,opt,name=priority_mask,json=priorityMask,proto3" json:"priority_mask,omitempty"`
	MatchFragments  bool   `protobuf:"varint,20,opt,name=match_fragments,json=matchFragments,proto3" json:"match_fragments,omitempty"`
	MatchIpPriority bool   `protobuf:"varint,21,opt,name=match_ip_priority,json=matchIpPriority,proto3" json:"match_ip_priority,omitempty"`
}

func (x *AclRuleIp) Reset() {
	*x = AclRuleIp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclRuleIp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclRuleIp) ProtoMessage() {}

func (x *AclRuleIp) ProtoReflect() protoreflect.Message {
	mi := &file_acl_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclRuleIp.ProtoReflect.Descriptor instead.
func (*AclRuleIp) Descriptor() ([]byte, []int) {
	return file_acl_types_proto_rawDescGZIP(), []int{2}
}

func (x *AclRuleIp) GetBaseFields() *AclRuleBase {
	if x != nil {
		return x.BaseFields
	}
	return nil
}

func (x *AclRuleIp) GetVlan() uint32 {
	if x != nil {
		return x.Vlan
	}
	return 0
}

func (m *AclRuleIp) GetVlanMaskPresent() isAclRuleIp_VlanMaskPresent {
	if m != nil {
		return m.VlanMaskPresent
	}
	return nil
}

func (x *AclRuleIp) GetVlanMask() uint32 {
	if x, ok := x.GetVlanMaskPresent().(*AclRuleIp_VlanMask); ok {
		return x.VlanMask
	}
	return 0
}

func (x *AclRuleIp) GetInnerVlan() uint32 {
	if x != nil {
		return x.InnerVlan
	}
	return 0
}

func (m *AclRuleIp) GetInnerVlanMaskPresent() isAclRuleIp_InnerVlanMaskPresent {
	if m != nil {
		return m.InnerVlanMaskPresent
	}
	return nil
}

func (x *AclRuleIp) GetInnerVlanMask() uint32 {
	if x, ok := x.GetInnerVlanMaskPresent().(*AclRuleIp_InnerVlanMask); ok {
		return x.InnerVlanMask
	}
	return 0
}

func (x *AclRuleIp) GetIpProtocol() uint32 {
	if x != nil {
		return x.IpProtocol
	}
	return 0
}

func (x *AclRuleIp) GetTtl() *AclTtlSpec {
	if x != nil {
		return x.Ttl
	}
	return nil
}

func (x *AclRuleIp) GetSourceAddr() *IpAddrMask {
	if x != nil {
		return x.SourceAddr
	}
	return nil
}

func (x *AclRuleIp) GetDestinationAddr() *IpAddrMask {
	if x != nil {
		return x.DestinationAddr
	}
	return nil
}

func (x *AclRuleIp) GetSourcePort() *AclPortSpec {
	if x != nil {
		return x.SourcePort
	}
	return nil
}

func (x *AclRuleIp) GetDestinationPort() *AclPortSpec {
	if x != nil {
		return x.DestinationPort
	}
	return nil
}

func (x *AclRuleIp) GetNexthopGroup() string {
	if x != nil {
		return x.NexthopGroup
	}
	return ""
}

func (x *AclRuleIp) GetTcpFlags() uint32 {
	if x != nil {
		return x.TcpFlags
	}
	return 0
}

func (m *AclRuleIp) GetIpTypePresent() isAclRuleIp_IpTypePresent {
	if m != nil {
		return m.IpTypePresent
	}
	return nil
}

func (x *AclRuleIp) GetIpType() AclIpType {
	if x, ok := x.GetIpTypePresent().(*AclRuleIp_IpType); ok {
		return x.IpType
	}
	return AclIpType_ACL_IP_TYPE_NOT_SET
}

func (x *AclRuleIp) GetEstablished() bool {
	if x != nil {
		return x.Established
	}
	return false
}

func (m *AclRuleIp) GetIcmpTypePresent() isAclRuleIp_IcmpTypePresent {
	if m != nil {
		return m.IcmpTypePresent
	}
	return nil
}

func (x *AclRuleIp) GetIcmpType() uint32 {
	if x, ok := x.GetIcmpTypePresent().(*AclRuleIp_IcmpType); ok {
		return x.IcmpType
	}
	return 0
}

func (m *AclRuleIp) GetIcmpCodePresent() isAclRuleIp_IcmpCodePresent {
	if m != nil {
		return m.IcmpCodePresent
	}
	return nil
}

func (x *AclRuleIp) GetIcmpCode() uint32 {
	if x, ok := x.GetIcmpCodePresent().(*AclRuleIp_IcmpCode); ok {
		return x.IcmpCode
	}
	return 0
}

func (x *AclRuleIp) GetPriorityValue() uint32 {
	if x != nil {
		return x.PriorityValue
	}
	return 0
}

func (x *AclRuleIp) GetPriorityMask() uint32 {
	if x != nil {
		return x.PriorityMask
	}
	return 0
}

func (x *AclRuleIp) GetMatchFragments() bool {
	if x != nil {
		return x.MatchFragments
	}
	return false
}

func (x *AclRuleIp) GetMatchIpPriority() bool {
	if x != nil {
		return x.MatchIpPriority
	}
	return false
}

type isAclRuleIp_VlanMaskPresent interface {
	isAclRuleIp_VlanMaskPresent()
}

type AclRuleIp_VlanMask struct {
	// Must be in range 0 to 65535.
	// Default value is 0xFFF.
	VlanMask uint32 `protobuf:"varint,3,opt,name=vlan_mask,json=vlanMask,proto3,oneof"`
}

func (*AclRuleIp_VlanMask) isAclRuleIp_VlanMaskPresent() {}

type isAclRuleIp_InnerVlanMaskPresent interface {
	isAclRuleIp_InnerVlanMaskPresent()
}

type AclRuleIp_InnerVlanMask struct {
	// Must be in range 0 to 65535.
	// Default value is 0xFFF.
	InnerVlanMask uint32 `protobuf:"varint,5,opt,name=inner_vlan_mask,json=innerVlanMask,proto3,oneof"`
}

func (*AclRuleIp_InnerVlanMask) isAclRuleIp_InnerVlanMaskPresent() {}

type isAclRuleIp_IpTypePresent interface {
	isAclRuleIp_IpTypePresent()
}

type AclRuleIp_IpType struct {
	// Default value is ACL_IP_TYPE_ANY.
	IpType AclIpType `protobuf:"varint,14,opt,name=ip_type,json=ipType,proto3,enum=eos.remote.AclIpType,oneof"`
}

func (*AclRuleIp_IpType) isAclRuleIp_IpTypePresent() {}

type isAclRuleIp_IcmpTypePresent interface {
	isAclRuleIp_IcmpTypePresent()
}

type AclRuleIp_IcmpType struct {
	// Default value is 65535.
	IcmpType uint32 `protobuf:"varint,16,opt,name=icmp_type,json=icmpType,proto3,oneof"`
}

func (*AclRuleIp_IcmpType) isAclRuleIp_IcmpTypePresent() {}

type isAclRuleIp_IcmpCodePresent interface {
	isAclRuleIp_IcmpCodePresent()
}

type AclRuleIp_IcmpCode struct {
	// Must be in range 0 to 65535.
	// Default value is 65535.
	IcmpCode uint32 `protobuf:"varint,17,opt,name=icmp_code,json=icmpCode,proto3,oneof"`
}

func (*AclRuleIp_IcmpCode) isAclRuleIp_IcmpCodePresent() {}

// *
// An Ethernet ACL rule which can be applied to Ethernet, Vlan and MLAG interfaces.
//
// EosSdk reference: eos::acl_rule_eth_t
type AclRuleEth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseFields *AclRuleBase `protobuf:"bytes,1,opt,name=base_fields,json=baseFields,proto3" json:"base_fields,omitempty"`
	// Must be in range 0 to 65535.
	Vlan uint32 `protobuf:"varint,2,opt,name=vlan,proto3" json:"vlan,omitempty"`
	// Types that are assignable to VlanMaskPresent:
	//
	//	*AclRuleEth_VlanMask
	VlanMaskPresent isAclRuleEth_VlanMaskPresent `protobuf_oneof:"vlan_mask_present"`
	// Must be in range 0 to 65535.
	InnerVlan uint32 `protobuf:"varint,4,opt,name=inner_vlan,json=innerVlan,proto3" json:"inner_vlan,omitempty"`
	// Types that are assignable to InnerVlanMaskPresent:
	//
	//	*AclRuleEth_InnerVlanMask
	InnerVlanMaskPresent isAclRuleEth_InnerVlanMaskPresent `protobuf_oneof:"inner_vlan_mask_present"`
	SourceAddr           []byte                            `protobuf:"bytes,6,opt,name=source_addr,json=sourceAddr,proto3" json:"source_addr,omitempty"`
	DestinationAddr      []byte                            `protobuf:"bytes,7,opt,name=destination_addr,json=destinationAddr,proto3" json:"destination_addr,omitempty"`
	SourceMask           []byte                            `protobuf:"bytes,8,opt,name=source_mask,json=sourceMask,proto3" json:"source_mask,omitempty"`
	DestinationMask      []byte                            `protobuf:"bytes,9,opt,name=destination_mask,json=destinationMask,proto3" json:"destination_mask,omitempty"`
	// Types that are assignable to EthProtocolPresent:
	//
	//	*AclRuleEth_EthProtocol
	EthProtocolPresent isAclRuleEth_EthProtocolPresent `protobuf_oneof:"eth_protocol_present"`
}

func (x *AclRuleEth) Reset() {
	*x = AclRuleEth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclRuleEth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclRuleEth) ProtoMessage() {}

func (x *AclRuleEth) ProtoReflect() protoreflect.Message {
	mi := &file_acl_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclRuleEth.ProtoReflect.Descriptor instead.
func (*AclRuleEth) Descriptor() ([]byte, []int) {
	return file_acl_types_proto_rawDescGZIP(), []int{3}
}

func (x *AclRuleEth) GetBaseFields() *AclRuleBase {
	if x != nil {
		return x.BaseFields
	}
	return nil
}

func (x *AclRuleEth) GetVlan() uint32 {
	if x != nil {
		return x.Vlan
	}
	return 0
}

func (m *AclRuleEth) GetVlanMaskPresent() isAclRuleEth_VlanMaskPresent {
	if m != nil {
		return m.VlanMaskPresent
	}
	return nil
}

func (x *AclRuleEth) GetVlanMask() uint32 {
	if x, ok := x.GetVlanMaskPresent().(*AclRuleEth_VlanMask); ok {
		return x.VlanMask
	}
	return 0
}

func (x *AclRuleEth) GetInnerVlan() uint32 {
	if x != nil {
		return x.InnerVlan
	}
	return 0
}

func (m *AclRuleEth) GetInnerVlanMaskPresent() isAclRuleEth_InnerVlanMaskPresent {
	if m != nil {
		return m.InnerVlanMaskPresent
	}
	return nil
}

func (x *AclRuleEth) GetInnerVlanMask() uint32 {
	if x, ok := x.GetInnerVlanMaskPresent().(*AclRuleEth_InnerVlanMask); ok {
		return x.InnerVlanMask
	}
	return 0
}

func (x *AclRuleEth) GetSourceAddr() []byte {
	if x != nil {
		return x.SourceAddr
	}
	return nil
}

func (x *AclRuleEth) GetDestinationAddr() []byte {
	if x != nil {
		return x.DestinationAddr
	}
	return nil
}

func (x *AclRuleEth) GetSourceMask() []byte {
	if x != nil {
		return x.SourceMask
	}
	return nil
}

func (x *AclRuleEth) GetDestinationMask() []byte {
	if x != nil {
		return x.DestinationMask
	}
	return nil
}

func (m *AclRuleEth) GetEthProtocolPresent() isAclRuleEth_EthProtocolPresent {
	if m != nil {
		return m.EthProtocolPresent
	}
	return nil
}

func (x *AclRuleEth) GetEthProtocol() uint32 {
	if x, ok := x.GetEthProtocolPresent().(*AclRuleEth_EthProtocol); ok {
		return x.EthProtocol
	}
	return 0
}

type isAclRuleEth_VlanMaskPresent interface {
	isAclRuleEth_VlanMaskPresent()
}

type AclRuleEth_VlanMask struct {
	// Must be in range 0 to 65535.
	// Default value is 0xFFF.
	VlanMask uint32 `protobuf:"varint,3,opt,name=vlan_mask,json=vlanMask,proto3,oneof"`
}

func (*AclRuleEth_VlanMask) isAclRuleEth_VlanMaskPresent() {}

type isAclRuleEth_InnerVlanMaskPresent interface {
	isAclRuleEth_InnerVlanMaskPresent()
}

type AclRuleEth_InnerVlanMask struct {
	// Must be in range 0 to 65535.
	// Default value is 0xFFF.
	InnerVlanMask uint32 `protobuf:"varint,5,opt,name=inner_vlan_mask,json=innerVlanMask,proto3,oneof"`
}

func (*AclRuleEth_InnerVlanMask) isAclRuleEth_InnerVlanMaskPresent() {}

type isAclRuleEth_EthProtocolPresent interface {
	isAclRuleEth_EthProtocolPresent()
}

type AclRuleEth_EthProtocol struct {
	// Default value is 0xFFFFFFFF.
	EthProtocol uint32 `protobuf:"varint,10,opt,name=eth_protocol,json=ethProtocol,proto3,oneof"`
}

func (*AclRuleEth_EthProtocol) isAclRuleEth_EthProtocolPresent() {}

// *
// A UDP or TCP port specifier.
//
// EosSdk reference: eos::acl_port_spec_t
type AclPortSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OperPresent:
	//
	//	*AclPortSpec_Oper
	OperPresent isAclPortSpec_OperPresent `protobuf_oneof:"oper_present"`
	// Must be in range 0 to 65535.
	Ports []uint32 `protobuf:"varint,2,rep,packed,name=ports,proto3" json:"ports,omitempty"`
}

func (x *AclPortSpec) Reset() {
	*x = AclPortSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclPortSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclPortSpec) ProtoMessage() {}

func (x *AclPortSpec) ProtoReflect() protoreflect.Message {
	mi := &file_acl_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclPortSpec.ProtoReflect.Descriptor instead.
func (*AclPortSpec) Descriptor() ([]byte, []int) {
	return file_acl_types_proto_rawDescGZIP(), []int{4}
}

func (m *AclPortSpec) GetOperPresent() isAclPortSpec_OperPresent {
	if m != nil {
		return m.OperPresent
	}
	return nil
}

func (x *AclPortSpec) GetOper() AclRangeOperator {
	if x, ok := x.GetOperPresent().(*AclPortSpec_Oper); ok {
		return x.Oper
	}
	return AclRangeOperator_ACL_RANGE_NULL
}

func (x *AclPortSpec) GetPorts() []uint32 {
	if x != nil {
		return x.Ports
	}
	return nil
}

type isAclPortSpec_OperPresent interface {
	isAclPortSpec_OperPresent()
}

type AclPortSpec_Oper struct {
	// Default value is ACL_RANGE_ANY.
	Oper AclRangeOperator `protobuf:"varint,1,opt,name=oper,proto3,enum=eos.remote.AclRangeOperator,oneof"`
}

func (*AclPortSpec_Oper) isAclPortSpec_OperPresent() {}

// *
// A TTL specifier, used in an IP ACL rule to define TTLs to match.
//
// EosSdk reference: eos::acl_ttl_spec_t
type AclTtlSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OperPresent:
	//
	//	*AclTtlSpec_Oper
	OperPresent isAclTtlSpec_OperPresent `protobuf_oneof:"oper_present"`
	// Must be in range 0 to 255.
	Ttl uint32 `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *AclTtlSpec) Reset() {
	*x = AclTtlSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_acl_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AclTtlSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AclTtlSpec) ProtoMessage() {}

func (x *AclTtlSpec) ProtoReflect() protoreflect.Message {
	mi := &file_acl_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AclTtlSpec.ProtoReflect.Descriptor instead.
func (*AclTtlSpec) Descriptor() ([]byte, []int) {
	return file_acl_types_proto_rawDescGZIP(), []int{5}
}

func (m *AclTtlSpec) GetOperPresent() isAclTtlSpec_OperPresent {
	if m != nil {
		return m.OperPresent
	}
	return nil
}

func (x *AclTtlSpec) GetOper() AclRangeOperator {
	if x, ok := x.GetOperPresent().(*AclTtlSpec_Oper); ok {
		return x.Oper
	}
	return AclRangeOperator_ACL_RANGE_NULL
}

func (x *AclTtlSpec) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type isAclTtlSpec_OperPresent interface {
	isAclTtlSpec_OperPresent()
}

type AclTtlSpec_Oper struct {
	// Default value is ACL_RANGE_ANY.
	Oper AclRangeOperator `protobuf:"varint,1,opt,name=oper,proto3,enum=eos.remote.AclRangeOperator,oneof"`
}

func (*AclTtlSpec_Oper) isAclTtlSpec_OperPresent() {}

var File_acl_types_proto protoreflect.FileDescriptor

var file_acl_types_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x63, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0a, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x1a, 0x13, 0x69,
	0x70, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x53, 0x0a, 0x06, 0x41, 0x63, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x63, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x63, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x61, 0x63, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x61, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x71, 0x0a, 0x0b, 0x41, 0x63, 0x6c, 0x52, 0x75,
	0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x42, 0x10, 0x0a, 0x0e, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x03, 0x10,
	0x04, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x22, 0xe8, 0x07, 0x0a, 0x09, 0x41,
	0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x70, 0x12, 0x38, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x75,
	0x6c, 0x65, 0x42, 0x61, 0x73, 0x65, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x76, 0x6c, 0x61,
	0x6e, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x76,
	0x6c, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x56, 0x6c, 0x61, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x6c,
	0x61, 0x6e, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52,
	0x0d, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x28, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x54, 0x74, 0x6c,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x37, 0x0a, 0x0b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x41, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x42, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x63, 0x70, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x63, 0x70,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x49, 0x70, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52,
	0x06, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x73, 0x74, 0x61, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x63, 0x6d,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x08,
	0x69, 0x63, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x63, 0x6d, 0x70,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x08, 0x69,
	0x63, 0x6d, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x4d,
	0x61, 0x73, 0x6b, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x70,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x76, 0x6c, 0x61, 0x6e,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x19, 0x0a,
	0x17, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x69, 0x70, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x69,
	0x63, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x42, 0x13, 0x0a, 0x11, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x22, 0xc7, 0x03, 0x0a, 0x0a, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x45, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x76, 0x6c,
	0x61, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e,
	0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0d, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x23, 0x0a, 0x0c, 0x65, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0b, 0x65, 0x74, 0x68, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x42, 0x13, 0x0a, 0x11, 0x76, 0x6c, 0x61, 0x6e, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x19, 0x0a, 0x17,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x65, 0x74, 0x68, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x22,
	0x67, 0x0a, 0x0b, 0x41, 0x63, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x32,
	0x0a, 0x04, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x70,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x22, 0x62, 0x0a, 0x0a, 0x41, 0x63, 0x6c, 0x54,
	0x74, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x12, 0x32, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x41, 0x63, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x42, 0x0e, 0x0a, 0x0c,
	0x6f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x2a, 0x67, 0x0a, 0x07,
	0x41, 0x63, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x41, 0x43, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x02,
	0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x54, 0x48,
	0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x50, 0x4c, 0x53, 0x10, 0x04, 0x2a, 0x3f, 0x0a, 0x0c, 0x41, 0x63, 0x6c, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x4c, 0x5f, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x43, 0x4c, 0x5f, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x43, 0x4c,
	0x5f, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x2a, 0x99, 0x01, 0x0a, 0x10, 0x41, 0x63, 0x6c, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x0e, 0x41,
	0x43, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x41, 0x43, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x4e, 0x59,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x45, 0x51, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x47, 0x54, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x4c, 0x5f, 0x52, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x4c, 0x54, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x4c, 0x5f,
	0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x45, 0x51, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x41,
	0x43, 0x4c, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e,
	0x10, 0x06, 0x2a, 0x3e, 0x0a, 0x09, 0x41, 0x63, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x13, 0x0a, 0x0f, 0x41, 0x43, 0x4c, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x43, 0x4c, 0x5f, 0x50, 0x45, 0x52, 0x4d,
	0x49, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x4c, 0x5f, 0x44, 0x45, 0x4e, 0x59,
	0x10, 0x02, 0x2a, 0xa7, 0x01, 0x0a, 0x0a, 0x41, 0x63, 0x6c, 0x54, 0x63, 0x70, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43, 0x4c, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x4c, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x46,
	0x49, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x4c, 0x5f, 0x54, 0x43, 0x50, 0x5f,
	0x53, 0x59, 0x4e, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x4c, 0x5f, 0x54, 0x43, 0x50,
	0x5f, 0x52, 0x53, 0x54, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x4c, 0x5f, 0x54, 0x43,
	0x50, 0x5f, 0x50, 0x53, 0x48, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x4c, 0x5f, 0x54,
	0x43, 0x50, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x4c, 0x5f,
	0x54, 0x43, 0x50, 0x5f, 0x55, 0x52, 0x47, 0x10, 0x20, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x4c,
	0x5f, 0x54, 0x43, 0x50, 0x5f, 0x45, 0x43, 0x45, 0x10, 0x40, 0x12, 0x10, 0x0a, 0x0b, 0x41, 0x43,
	0x4c, 0x5f, 0x54, 0x43, 0x50, 0x5f, 0x43, 0x57, 0x52, 0x10, 0x80, 0x01, 0x2a, 0x63, 0x0a, 0x09,
	0x41, 0x63, 0x6c, 0x49, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x4c,
	0x5f, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x4c, 0x5f, 0x49,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x41,
	0x43, 0x4c, 0x5f, 0x49, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x10,
	0x03, 0x42, 0x12, 0x5a, 0x10, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x45, 0x6f, 0x73, 0x53,
	0x64, 0x6b, 0x52, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_acl_types_proto_rawDescOnce sync.Once
	file_acl_types_proto_rawDescData = file_acl_types_proto_rawDesc
)

func file_acl_types_proto_rawDescGZIP() []byte {
	file_acl_types_proto_rawDescOnce.Do(func() {
		file_acl_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_acl_types_proto_rawDescData)
	})
	return file_acl_types_proto_rawDescData
}

var file_acl_types_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_acl_types_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_acl_types_proto_goTypes = []interface{}{
	(AclType)(0),          // 0: eos.remote.AclType
	(AclDirection)(0),     // 1: eos.remote.AclDirection
	(AclRangeOperator)(0), // 2: eos.remote.AclRangeOperator
	(AclAction)(0),        // 3: eos.remote.AclAction
	(AclTcpFlag)(0),       // 4: eos.remote.AclTcpFlag
	(AclIpType)(0),        // 5: eos.remote.AclIpType
	(*AclKey)(nil),        // 6: eos.remote.AclKey
	(*AclRuleBase)(nil),   // 7: eos.remote.AclRuleBase
	(*AclRuleIp)(nil),     // 8: eos.remote.AclRuleIp
	(*AclRuleEth)(nil),    // 9: eos.remote.AclRuleEth
	(*AclPortSpec)(nil),   // 10: eos.remote.AclPortSpec
	(*AclTtlSpec)(nil),    // 11: eos.remote.AclTtlSpec
	(*IpAddrMask)(nil),    // 12: eos.remote.IpAddrMask
}
var file_acl_types_proto_depIdxs = []int32{
	0,  // 0: eos.remote.AclKey.acl_type:type_name -> eos.remote.AclType
	3,  // 1: eos.remote.AclRuleBase.action:type_name -> eos.remote.AclAction
	7,  // 2: eos.remote.AclRuleIp.base_fields:type_name -> eos.remote.AclRuleBase
	11, // 3: eos.remote.AclRuleIp.ttl:type_name -> eos.remote.AclTtlSpec
	12, // 4: eos.remote.AclRuleIp.source_addr:type_name -> eos.remote.IpAddrMask
	12, // 5: eos.remote.AclRuleIp.destination_addr:type_name -> eos.remote.IpAddrMask
	10, // 6: eos.remote.AclRuleIp.source_port:type_name -> eos.remote.AclPortSpec
	10, // 7: eos.remote.AclRuleIp.destination_port:type_name -> eos.remote.AclPortSpec
	5,  // 8: eos.remote.AclRuleIp.ip_type:type_name -> eos.remote.AclIpType
	7,  // 9: eos.remote.AclRuleEth.base_fields:type_name -> eos.remote.AclRuleBase
	2,  // 10: eos.remote.AclPortSpec.oper:type_name -> eos.remote.AclRangeOperator
	2,  // 11: eos.remote.AclTtlSpec.oper:type_name -> eos.remote.AclRangeOperator
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_acl_types_proto_init() }
func file_acl_types_proto_init() {
	if File_acl_types_proto != nil {
		return
	}
	file_ip_intf_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_acl_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclRuleBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclRuleIp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclRuleEth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclPortSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_acl_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AclTtlSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_acl_types_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*AclRuleBase_Action)(nil),
	}
	file_acl_types_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*AclRuleIp_VlanMask)(nil),
		(*AclRuleIp_InnerVlanMask)(nil),
		(*AclRuleIp_IpType)(nil),
		(*AclRuleIp_IcmpType)(nil),
		(*AclRuleIp_IcmpCode)(nil),
	}
	file_acl_types_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*AclRuleEth_VlanMask)(nil),
		(*AclRuleEth_InnerVlanMask)(nil),
		(*AclRuleEth_EthProtocol)(nil),
	}
	file_acl_types_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*AclPortSpec_Oper)(nil),
	}
	file_acl_types_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*AclTtlSpec_Oper)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_acl_types_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_acl_types_proto_goTypes,
		DependencyIndexes: file_acl_types_proto_depIdxs,
		EnumInfos:         file_acl_types_proto_enumTypes,
		MessageInfos:      file_acl_types_proto_msgTypes,
	}.Build()
	File_acl_types_proto = out.File
	file_acl_types_proto_rawDesc = nil
	file_acl_types_proto_goTypes = nil
	file_acl_types_proto_depIdxs = nil
}
