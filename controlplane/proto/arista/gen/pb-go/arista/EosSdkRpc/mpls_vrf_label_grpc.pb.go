// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: mpls_vrf_label.proto

package EosSdkRpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MplsVrfLabelMgrServiceClient is the client API for MplsVrfLabelMgrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MplsVrfLabelMgrServiceClient interface {
	// *
	// Initiates an MPLS VRF label resync proccess.
	//
	// EosSdk reference: eos::mpls_vrf_label_mgr::resync_init
	ResyncInit(ctx context.Context, in *MplsVrfLabelResyncInitRequest, opts ...grpc.CallOption) (*MplsVrfLabelResyncInitResponse, error)
	// *
	// Ends the current MPLS VRF label resync process.
	//
	// EosSdk reference: eos::mpls_vrf_label_mgr::resync_complete
	ResyncComplete(ctx context.Context, in *MplsVrfLabelResyncCompleteRequest, opts ...grpc.CallOption) (*MplsVrfLabelResyncCompleteResponse, error)
	// *
	// Returns a list of all the MPLS VRF labels currently configured.
	//
	// EosSdk reference: eos::mpls_vrf_label_mgr::mpls_vrf_label_iter
	MplsVrfLabels(ctx context.Context, in *MplsVrfLabelsRequest, opts ...grpc.CallOption) (MplsVrfLabelMgrService_MplsVrfLabelsClient, error)
	// *
	// Returns the current configuration of an MPLS VRF label.
	//
	// EosSdk reference: eos::mpls_vrf_label_mgr::mpls_vrf_label
	MplsVrfLabel(ctx context.Context, in *MplsVrfLabelRequest, opts ...grpc.CallOption) (*MplsVrfLabelResponse, error)
	// *
	// Inserts or updates an MPLS VRF label in the switch config.
	//
	// EosSdk reference: eos::mpls_vrf_label_mgr::mpls_vrf_label_set
	MplsVrfLabelSet(ctx context.Context, in *MplsVrfLabelSetRequest, opts ...grpc.CallOption) (*MplsVrfLabelSetResponse, error)
	// *
	// Inserts or updates multiple MPLS VRF labels in the switch config in a
	// single call.
	//
	// EosSdk reference: eos::mpls_vrf_label_mgr::mpls_vrf_label_set
	BulkMplsVrfLabelSet(ctx context.Context, in *BulkMplsVrfLabelSetRequest, opts ...grpc.CallOption) (*BulkMplsVrfLabelSetResponse, error)
	// *
	// Removes the MPLS VRF label from configuration.
	//
	// EosSdk reference: eos::mpls_vrf_label_mgr::mpls_vrf_label_del
	MplsVrfLabelDel(ctx context.Context, in *MplsVrfLabelDelRequest, opts ...grpc.CallOption) (*MplsVrfLabelDelResponse, error)
	// *
	// Removes multiple MPLS VRF labels in a single call.
	//
	// EosSdk reference: eos::mpls_vrf_label_mgr::mpls_vrf_label_del
	BulkMplsVrfLabelDel(ctx context.Context, in *BulkMplsVrfLabelDelRequest, opts ...grpc.CallOption) (*BulkMplsVrfLabelDelResponse, error)
}

type mplsVrfLabelMgrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMplsVrfLabelMgrServiceClient(cc grpc.ClientConnInterface) MplsVrfLabelMgrServiceClient {
	return &mplsVrfLabelMgrServiceClient{cc}
}

func (c *mplsVrfLabelMgrServiceClient) ResyncInit(ctx context.Context, in *MplsVrfLabelResyncInitRequest, opts ...grpc.CallOption) (*MplsVrfLabelResyncInitResponse, error) {
	out := new(MplsVrfLabelResyncInitResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.MplsVrfLabelMgrService/resync_init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mplsVrfLabelMgrServiceClient) ResyncComplete(ctx context.Context, in *MplsVrfLabelResyncCompleteRequest, opts ...grpc.CallOption) (*MplsVrfLabelResyncCompleteResponse, error) {
	out := new(MplsVrfLabelResyncCompleteResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.MplsVrfLabelMgrService/resync_complete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mplsVrfLabelMgrServiceClient) MplsVrfLabels(ctx context.Context, in *MplsVrfLabelsRequest, opts ...grpc.CallOption) (MplsVrfLabelMgrService_MplsVrfLabelsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MplsVrfLabelMgrService_ServiceDesc.Streams[0], "/eos.remote.MplsVrfLabelMgrService/mpls_vrf_labels", opts...)
	if err != nil {
		return nil, err
	}
	x := &mplsVrfLabelMgrServiceMplsVrfLabelsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MplsVrfLabelMgrService_MplsVrfLabelsClient interface {
	Recv() (*MplsVrfLabelsResponse, error)
	grpc.ClientStream
}

type mplsVrfLabelMgrServiceMplsVrfLabelsClient struct {
	grpc.ClientStream
}

func (x *mplsVrfLabelMgrServiceMplsVrfLabelsClient) Recv() (*MplsVrfLabelsResponse, error) {
	m := new(MplsVrfLabelsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mplsVrfLabelMgrServiceClient) MplsVrfLabel(ctx context.Context, in *MplsVrfLabelRequest, opts ...grpc.CallOption) (*MplsVrfLabelResponse, error) {
	out := new(MplsVrfLabelResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.MplsVrfLabelMgrService/mpls_vrf_label", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mplsVrfLabelMgrServiceClient) MplsVrfLabelSet(ctx context.Context, in *MplsVrfLabelSetRequest, opts ...grpc.CallOption) (*MplsVrfLabelSetResponse, error) {
	out := new(MplsVrfLabelSetResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.MplsVrfLabelMgrService/mpls_vrf_label_set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mplsVrfLabelMgrServiceClient) BulkMplsVrfLabelSet(ctx context.Context, in *BulkMplsVrfLabelSetRequest, opts ...grpc.CallOption) (*BulkMplsVrfLabelSetResponse, error) {
	out := new(BulkMplsVrfLabelSetResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.MplsVrfLabelMgrService/bulk_mpls_vrf_label_set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mplsVrfLabelMgrServiceClient) MplsVrfLabelDel(ctx context.Context, in *MplsVrfLabelDelRequest, opts ...grpc.CallOption) (*MplsVrfLabelDelResponse, error) {
	out := new(MplsVrfLabelDelResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.MplsVrfLabelMgrService/mpls_vrf_label_del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mplsVrfLabelMgrServiceClient) BulkMplsVrfLabelDel(ctx context.Context, in *BulkMplsVrfLabelDelRequest, opts ...grpc.CallOption) (*BulkMplsVrfLabelDelResponse, error) {
	out := new(BulkMplsVrfLabelDelResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.MplsVrfLabelMgrService/bulk_mpls_vrf_label_del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MplsVrfLabelMgrServiceServer is the server API for MplsVrfLabelMgrService service.
// All implementations should embed UnimplementedMplsVrfLabelMgrServiceServer
// for forward compatibility
type MplsVrfLabelMgrServiceServer interface {
	// *
	// Initiates an MPLS VRF label resync proccess.
	//
	// EosSdk reference: eos::mpls_vrf_label_mgr::resync_init
	ResyncInit(context.Context, *MplsVrfLabelResyncInitRequest) (*MplsVrfLabelResyncInitResponse, error)
	// *
	// Ends the current MPLS VRF label resync process.
	//
	// EosSdk reference: eos::mpls_vrf_label_mgr::resync_complete
	ResyncComplete(context.Context, *MplsVrfLabelResyncCompleteRequest) (*MplsVrfLabelResyncCompleteResponse, error)
	// *
	// Returns a list of all the MPLS VRF labels currently configured.
	//
	// EosSdk reference: eos::mpls_vrf_label_mgr::mpls_vrf_label_iter
	MplsVrfLabels(*MplsVrfLabelsRequest, MplsVrfLabelMgrService_MplsVrfLabelsServer) error
	// *
	// Returns the current configuration of an MPLS VRF label.
	//
	// EosSdk reference: eos::mpls_vrf_label_mgr::mpls_vrf_label
	MplsVrfLabel(context.Context, *MplsVrfLabelRequest) (*MplsVrfLabelResponse, error)
	// *
	// Inserts or updates an MPLS VRF label in the switch config.
	//
	// EosSdk reference: eos::mpls_vrf_label_mgr::mpls_vrf_label_set
	MplsVrfLabelSet(context.Context, *MplsVrfLabelSetRequest) (*MplsVrfLabelSetResponse, error)
	// *
	// Inserts or updates multiple MPLS VRF labels in the switch config in a
	// single call.
	//
	// EosSdk reference: eos::mpls_vrf_label_mgr::mpls_vrf_label_set
	BulkMplsVrfLabelSet(context.Context, *BulkMplsVrfLabelSetRequest) (*BulkMplsVrfLabelSetResponse, error)
	// *
	// Removes the MPLS VRF label from configuration.
	//
	// EosSdk reference: eos::mpls_vrf_label_mgr::mpls_vrf_label_del
	MplsVrfLabelDel(context.Context, *MplsVrfLabelDelRequest) (*MplsVrfLabelDelResponse, error)
	// *
	// Removes multiple MPLS VRF labels in a single call.
	//
	// EosSdk reference: eos::mpls_vrf_label_mgr::mpls_vrf_label_del
	BulkMplsVrfLabelDel(context.Context, *BulkMplsVrfLabelDelRequest) (*BulkMplsVrfLabelDelResponse, error)
}

// UnimplementedMplsVrfLabelMgrServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMplsVrfLabelMgrServiceServer struct {
}

func (UnimplementedMplsVrfLabelMgrServiceServer) ResyncInit(context.Context, *MplsVrfLabelResyncInitRequest) (*MplsVrfLabelResyncInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResyncInit not implemented")
}
func (UnimplementedMplsVrfLabelMgrServiceServer) ResyncComplete(context.Context, *MplsVrfLabelResyncCompleteRequest) (*MplsVrfLabelResyncCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResyncComplete not implemented")
}
func (UnimplementedMplsVrfLabelMgrServiceServer) MplsVrfLabels(*MplsVrfLabelsRequest, MplsVrfLabelMgrService_MplsVrfLabelsServer) error {
	return status.Errorf(codes.Unimplemented, "method MplsVrfLabels not implemented")
}
func (UnimplementedMplsVrfLabelMgrServiceServer) MplsVrfLabel(context.Context, *MplsVrfLabelRequest) (*MplsVrfLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MplsVrfLabel not implemented")
}
func (UnimplementedMplsVrfLabelMgrServiceServer) MplsVrfLabelSet(context.Context, *MplsVrfLabelSetRequest) (*MplsVrfLabelSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MplsVrfLabelSet not implemented")
}
func (UnimplementedMplsVrfLabelMgrServiceServer) BulkMplsVrfLabelSet(context.Context, *BulkMplsVrfLabelSetRequest) (*BulkMplsVrfLabelSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkMplsVrfLabelSet not implemented")
}
func (UnimplementedMplsVrfLabelMgrServiceServer) MplsVrfLabelDel(context.Context, *MplsVrfLabelDelRequest) (*MplsVrfLabelDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MplsVrfLabelDel not implemented")
}
func (UnimplementedMplsVrfLabelMgrServiceServer) BulkMplsVrfLabelDel(context.Context, *BulkMplsVrfLabelDelRequest) (*BulkMplsVrfLabelDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkMplsVrfLabelDel not implemented")
}

// UnsafeMplsVrfLabelMgrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MplsVrfLabelMgrServiceServer will
// result in compilation errors.
type UnsafeMplsVrfLabelMgrServiceServer interface {
	mustEmbedUnimplementedMplsVrfLabelMgrServiceServer()
}

func RegisterMplsVrfLabelMgrServiceServer(s grpc.ServiceRegistrar, srv MplsVrfLabelMgrServiceServer) {
	s.RegisterService(&MplsVrfLabelMgrService_ServiceDesc, srv)
}

func _MplsVrfLabelMgrService_ResyncInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MplsVrfLabelResyncInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MplsVrfLabelMgrServiceServer).ResyncInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.MplsVrfLabelMgrService/resync_init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MplsVrfLabelMgrServiceServer).ResyncInit(ctx, req.(*MplsVrfLabelResyncInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MplsVrfLabelMgrService_ResyncComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MplsVrfLabelResyncCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MplsVrfLabelMgrServiceServer).ResyncComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.MplsVrfLabelMgrService/resync_complete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MplsVrfLabelMgrServiceServer).ResyncComplete(ctx, req.(*MplsVrfLabelResyncCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MplsVrfLabelMgrService_MplsVrfLabels_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MplsVrfLabelsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MplsVrfLabelMgrServiceServer).MplsVrfLabels(m, &mplsVrfLabelMgrServiceMplsVrfLabelsServer{stream})
}

type MplsVrfLabelMgrService_MplsVrfLabelsServer interface {
	Send(*MplsVrfLabelsResponse) error
	grpc.ServerStream
}

type mplsVrfLabelMgrServiceMplsVrfLabelsServer struct {
	grpc.ServerStream
}

func (x *mplsVrfLabelMgrServiceMplsVrfLabelsServer) Send(m *MplsVrfLabelsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MplsVrfLabelMgrService_MplsVrfLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MplsVrfLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MplsVrfLabelMgrServiceServer).MplsVrfLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.MplsVrfLabelMgrService/mpls_vrf_label",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MplsVrfLabelMgrServiceServer).MplsVrfLabel(ctx, req.(*MplsVrfLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MplsVrfLabelMgrService_MplsVrfLabelSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MplsVrfLabelSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MplsVrfLabelMgrServiceServer).MplsVrfLabelSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.MplsVrfLabelMgrService/mpls_vrf_label_set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MplsVrfLabelMgrServiceServer).MplsVrfLabelSet(ctx, req.(*MplsVrfLabelSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MplsVrfLabelMgrService_BulkMplsVrfLabelSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkMplsVrfLabelSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MplsVrfLabelMgrServiceServer).BulkMplsVrfLabelSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.MplsVrfLabelMgrService/bulk_mpls_vrf_label_set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MplsVrfLabelMgrServiceServer).BulkMplsVrfLabelSet(ctx, req.(*BulkMplsVrfLabelSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MplsVrfLabelMgrService_MplsVrfLabelDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MplsVrfLabelDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MplsVrfLabelMgrServiceServer).MplsVrfLabelDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.MplsVrfLabelMgrService/mpls_vrf_label_del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MplsVrfLabelMgrServiceServer).MplsVrfLabelDel(ctx, req.(*MplsVrfLabelDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MplsVrfLabelMgrService_BulkMplsVrfLabelDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkMplsVrfLabelDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MplsVrfLabelMgrServiceServer).BulkMplsVrfLabelDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.MplsVrfLabelMgrService/bulk_mpls_vrf_label_del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MplsVrfLabelMgrServiceServer).BulkMplsVrfLabelDel(ctx, req.(*BulkMplsVrfLabelDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MplsVrfLabelMgrService_ServiceDesc is the grpc.ServiceDesc for MplsVrfLabelMgrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MplsVrfLabelMgrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eos.remote.MplsVrfLabelMgrService",
	HandlerType: (*MplsVrfLabelMgrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "resync_init",
			Handler:    _MplsVrfLabelMgrService_ResyncInit_Handler,
		},
		{
			MethodName: "resync_complete",
			Handler:    _MplsVrfLabelMgrService_ResyncComplete_Handler,
		},
		{
			MethodName: "mpls_vrf_label",
			Handler:    _MplsVrfLabelMgrService_MplsVrfLabel_Handler,
		},
		{
			MethodName: "mpls_vrf_label_set",
			Handler:    _MplsVrfLabelMgrService_MplsVrfLabelSet_Handler,
		},
		{
			MethodName: "bulk_mpls_vrf_label_set",
			Handler:    _MplsVrfLabelMgrService_BulkMplsVrfLabelSet_Handler,
		},
		{
			MethodName: "mpls_vrf_label_del",
			Handler:    _MplsVrfLabelMgrService_MplsVrfLabelDel_Handler,
		},
		{
			MethodName: "bulk_mpls_vrf_label_del",
			Handler:    _MplsVrfLabelMgrService_BulkMplsVrfLabelDel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "mpls_vrf_labels",
			Handler:       _MplsVrfLabelMgrService_MplsVrfLabels_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mpls_vrf_label.proto",
}
