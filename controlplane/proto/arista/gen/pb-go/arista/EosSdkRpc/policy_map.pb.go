// Copyright (c) 2021 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: policy_map.proto

package EosSdkRpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PolicyMapEventType int32

const (
	PolicyMapEventType_POLICY_MAP_EVENT_NULL          PolicyMapEventType = 0
	PolicyMapEventType_POLICY_MAP_EVENT_SYNC          PolicyMapEventType = 1
	PolicyMapEventType_POLICY_MAP_EVENT_CONFIG_SET    PolicyMapEventType = 2
	PolicyMapEventType_POLICY_MAP_EVENT_TP_CONFIG_SET PolicyMapEventType = 3
)

// Enum value maps for PolicyMapEventType.
var (
	PolicyMapEventType_name = map[int32]string{
		0: "POLICY_MAP_EVENT_NULL",
		1: "POLICY_MAP_EVENT_SYNC",
		2: "POLICY_MAP_EVENT_CONFIG_SET",
		3: "POLICY_MAP_EVENT_TP_CONFIG_SET",
	}
	PolicyMapEventType_value = map[string]int32{
		"POLICY_MAP_EVENT_NULL":          0,
		"POLICY_MAP_EVENT_SYNC":          1,
		"POLICY_MAP_EVENT_CONFIG_SET":    2,
		"POLICY_MAP_EVENT_TP_CONFIG_SET": 3,
	}
)

func (x PolicyMapEventType) Enum() *PolicyMapEventType {
	p := new(PolicyMapEventType)
	*p = x
	return p
}

func (x PolicyMapEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyMapEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_policy_map_proto_enumTypes[0].Descriptor()
}

func (PolicyMapEventType) Type() protoreflect.EnumType {
	return &file_policy_map_proto_enumTypes[0]
}

func (x PolicyMapEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyMapEventType.Descriptor instead.
func (PolicyMapEventType) EnumDescriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{0}
}

type PolicyMapWatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Overloads:
	//
	//	*PolicyMapWatchRequest_All
	//	*PolicyMapWatchRequest_Key
	Overloads isPolicyMapWatchRequest_Overloads `protobuf_oneof:"overloads"`
	// Set to true if an immediate acknowledgment is desired.
	Ack bool `protobuf:"varint,4,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (x *PolicyMapWatchRequest) Reset() {
	*x = PolicyMapWatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapWatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapWatchRequest) ProtoMessage() {}

func (x *PolicyMapWatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapWatchRequest.ProtoReflect.Descriptor instead.
func (*PolicyMapWatchRequest) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{0}
}

func (m *PolicyMapWatchRequest) GetOverloads() isPolicyMapWatchRequest_Overloads {
	if m != nil {
		return m.Overloads
	}
	return nil
}

func (x *PolicyMapWatchRequest) GetAll() bool {
	if x, ok := x.GetOverloads().(*PolicyMapWatchRequest_All); ok {
		return x.All
	}
	return false
}

func (x *PolicyMapWatchRequest) GetKey() *PolicyMapKey {
	if x, ok := x.GetOverloads().(*PolicyMapWatchRequest_Key); ok {
		return x.Key
	}
	return nil
}

func (x *PolicyMapWatchRequest) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

type isPolicyMapWatchRequest_Overloads interface {
	isPolicyMapWatchRequest_Overloads()
}

type PolicyMapWatchRequest_All struct {
	// True if all policy maps should be watched.
	All bool `protobuf:"varint,1,opt,name=all,proto3,oneof"`
}

type PolicyMapWatchRequest_Key struct {
	// The key of the policy map to recieve notifications for.
	Key *PolicyMapKey `protobuf:"bytes,2,opt,name=key,proto3,oneof"`
}

func (*PolicyMapWatchRequest_All) isPolicyMapWatchRequest_Overloads() {}

func (*PolicyMapWatchRequest_Key) isPolicyMapWatchRequest_Overloads() {}

type PolicyMapWatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the policy map that triggered the event.
	Key *PolicyMapKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Types that are assignable to PolicyMapEvent:
	//
	//	*PolicyMapWatchResponse_EventType
	//	*PolicyMapWatchResponse_SyncFailMessage
	PolicyMapEvent isPolicyMapWatchResponse_PolicyMapEvent `protobuf_oneof:"policy_map_event"`
	// If true, this is not an event and the fields below are invalid.
	Ack bool `protobuf:"varint,4,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (x *PolicyMapWatchResponse) Reset() {
	*x = PolicyMapWatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapWatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapWatchResponse) ProtoMessage() {}

func (x *PolicyMapWatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapWatchResponse.ProtoReflect.Descriptor instead.
func (*PolicyMapWatchResponse) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{1}
}

func (x *PolicyMapWatchResponse) GetKey() *PolicyMapKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (m *PolicyMapWatchResponse) GetPolicyMapEvent() isPolicyMapWatchResponse_PolicyMapEvent {
	if m != nil {
		return m.PolicyMapEvent
	}
	return nil
}

func (x *PolicyMapWatchResponse) GetEventType() PolicyMapEventType {
	if x, ok := x.GetPolicyMapEvent().(*PolicyMapWatchResponse_EventType); ok {
		return x.EventType
	}
	return PolicyMapEventType_POLICY_MAP_EVENT_NULL
}

func (x *PolicyMapWatchResponse) GetSyncFailMessage() string {
	if x, ok := x.GetPolicyMapEvent().(*PolicyMapWatchResponse_SyncFailMessage); ok {
		return x.SyncFailMessage
	}
	return ""
}

func (x *PolicyMapWatchResponse) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

type isPolicyMapWatchResponse_PolicyMapEvent interface {
	isPolicyMapWatchResponse_PolicyMapEvent()
}

type PolicyMapWatchResponse_EventType struct {
	// The type of event.
	EventType PolicyMapEventType `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=eos.remote.PolicyMapEventType,oneof"`
}

type PolicyMapWatchResponse_SyncFailMessage struct {
	// Provides details when policy map commit or apply operation fails.
	SyncFailMessage string `protobuf:"bytes,3,opt,name=sync_fail_message,json=syncFailMessage,proto3,oneof"`
}

func (*PolicyMapWatchResponse_EventType) isPolicyMapWatchResponse_PolicyMapEvent() {}

func (*PolicyMapWatchResponse_SyncFailMessage) isPolicyMapWatchResponse_PolicyMapEvent() {}

type PolicyMapResyncInitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PolicyMapResyncInitRequest) Reset() {
	*x = PolicyMapResyncInitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapResyncInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapResyncInitRequest) ProtoMessage() {}

func (x *PolicyMapResyncInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapResyncInitRequest.ProtoReflect.Descriptor instead.
func (*PolicyMapResyncInitRequest) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{2}
}

type PolicyMapResyncInitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PolicyMapResyncInitResponse) Reset() {
	*x = PolicyMapResyncInitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapResyncInitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapResyncInitResponse) ProtoMessage() {}

func (x *PolicyMapResyncInitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapResyncInitResponse.ProtoReflect.Descriptor instead.
func (*PolicyMapResyncInitResponse) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{3}
}

type PolicyMapResyncCompleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PolicyMapResyncCompleteRequest) Reset() {
	*x = PolicyMapResyncCompleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapResyncCompleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapResyncCompleteRequest) ProtoMessage() {}

func (x *PolicyMapResyncCompleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapResyncCompleteRequest.ProtoReflect.Descriptor instead.
func (*PolicyMapResyncCompleteRequest) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{4}
}

type PolicyMapResyncCompleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PolicyMapResyncCompleteResponse) Reset() {
	*x = PolicyMapResyncCompleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapResyncCompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapResyncCompleteResponse) ProtoMessage() {}

func (x *PolicyMapResyncCompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapResyncCompleteResponse.ProtoReflect.Descriptor instead.
func (*PolicyMapResyncCompleteResponse) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{5}
}

type PolicyMapExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the policy map to query.
	Key *PolicyMapKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *PolicyMapExistsRequest) Reset() {
	*x = PolicyMapExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapExistsRequest) ProtoMessage() {}

func (x *PolicyMapExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapExistsRequest.ProtoReflect.Descriptor instead.
func (*PolicyMapExistsRequest) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{6}
}

func (x *PolicyMapExistsRequest) GetKey() *PolicyMapKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type PolicyMapExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if the policy map is configured otherwise false.
	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *PolicyMapExistsResponse) Reset() {
	*x = PolicyMapExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapExistsResponse) ProtoMessage() {}

func (x *PolicyMapExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapExistsResponse.ProtoReflect.Descriptor instead.
func (*PolicyMapExistsResponse) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{7}
}

func (x *PolicyMapExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type PolicyMapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the policy map to query.
	Key *PolicyMapKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *PolicyMapRequest) Reset() {
	*x = PolicyMapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapRequest) ProtoMessage() {}

func (x *PolicyMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapRequest.ProtoReflect.Descriptor instead.
func (*PolicyMapRequest) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{8}
}

func (x *PolicyMapRequest) GetKey() *PolicyMapKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type PolicyMapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The policy map corresponding to the key or empty if not found.
	PolicyMap *PolicyMap `protobuf:"bytes,1,opt,name=policy_map,json=policyMap,proto3" json:"policy_map,omitempty"`
}

func (x *PolicyMapResponse) Reset() {
	*x = PolicyMapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapResponse) ProtoMessage() {}

func (x *PolicyMapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapResponse.ProtoReflect.Descriptor instead.
func (*PolicyMapResponse) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{9}
}

func (x *PolicyMapResponse) GetPolicyMap() *PolicyMap {
	if x != nil {
		return x.PolicyMap
	}
	return nil
}

type PolicyMapIsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The policy map to create or update.
	PolicyMap *PolicyMap `protobuf:"bytes,1,opt,name=policy_map,json=policyMap,proto3" json:"policy_map,omitempty"`
}

func (x *PolicyMapIsRequest) Reset() {
	*x = PolicyMapIsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapIsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapIsRequest) ProtoMessage() {}

func (x *PolicyMapIsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapIsRequest.ProtoReflect.Descriptor instead.
func (*PolicyMapIsRequest) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{10}
}

func (x *PolicyMapIsRequest) GetPolicyMap() *PolicyMap {
	if x != nil {
		return x.PolicyMap
	}
	return nil
}

type PolicyMapIsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PolicyMapIsResponse) Reset() {
	*x = PolicyMapIsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapIsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapIsResponse) ProtoMessage() {}

func (x *PolicyMapIsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapIsResponse.ProtoReflect.Descriptor instead.
func (*PolicyMapIsResponse) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{11}
}

type BulkPolicyMapIsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of PolicyMapIsRequests.
	Requests []*PolicyMapIsRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkPolicyMapIsRequest) Reset() {
	*x = BulkPolicyMapIsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkPolicyMapIsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkPolicyMapIsRequest) ProtoMessage() {}

func (x *BulkPolicyMapIsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkPolicyMapIsRequest.ProtoReflect.Descriptor instead.
func (*BulkPolicyMapIsRequest) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{12}
}

func (x *BulkPolicyMapIsRequest) GetRequests() []*PolicyMapIsRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BulkPolicyMapIsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of consecutive successful requests.
	Processed uint64 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	// Success or error details in case of failure.
	Status *RpcResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BulkPolicyMapIsResponse) Reset() {
	*x = BulkPolicyMapIsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkPolicyMapIsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkPolicyMapIsResponse) ProtoMessage() {}

func (x *BulkPolicyMapIsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkPolicyMapIsResponse.ProtoReflect.Descriptor instead.
func (*BulkPolicyMapIsResponse) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{13}
}

func (x *BulkPolicyMapIsResponse) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *BulkPolicyMapIsResponse) GetStatus() *RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type PolicyMapDelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the policy map to delete.
	Key *PolicyMapKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *PolicyMapDelRequest) Reset() {
	*x = PolicyMapDelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapDelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapDelRequest) ProtoMessage() {}

func (x *PolicyMapDelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapDelRequest.ProtoReflect.Descriptor instead.
func (*PolicyMapDelRequest) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{14}
}

func (x *PolicyMapDelRequest) GetKey() *PolicyMapKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type PolicyMapDelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PolicyMapDelResponse) Reset() {
	*x = PolicyMapDelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapDelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapDelResponse) ProtoMessage() {}

func (x *PolicyMapDelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapDelResponse.ProtoReflect.Descriptor instead.
func (*PolicyMapDelResponse) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{15}
}

type BulkPolicyMapDelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of PolicyMapDelRequests.
	Requests []*PolicyMapDelRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkPolicyMapDelRequest) Reset() {
	*x = BulkPolicyMapDelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkPolicyMapDelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkPolicyMapDelRequest) ProtoMessage() {}

func (x *BulkPolicyMapDelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkPolicyMapDelRequest.ProtoReflect.Descriptor instead.
func (*BulkPolicyMapDelRequest) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{16}
}

func (x *BulkPolicyMapDelRequest) GetRequests() []*PolicyMapDelRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BulkPolicyMapDelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of consecutive successful requests.
	Processed uint64 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	// Success or error details in case of failure.
	Status *RpcResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BulkPolicyMapDelResponse) Reset() {
	*x = BulkPolicyMapDelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkPolicyMapDelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkPolicyMapDelResponse) ProtoMessage() {}

func (x *BulkPolicyMapDelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkPolicyMapDelResponse.ProtoReflect.Descriptor instead.
func (*BulkPolicyMapDelResponse) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{17}
}

func (x *BulkPolicyMapDelResponse) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *BulkPolicyMapDelResponse) GetStatus() *RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type PolicyMapsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The policy feature.
	Feature PolicyFeature `protobuf:"varint,1,opt,name=feature,proto3,enum=eos.remote.PolicyFeature" json:"feature,omitempty"`
}

func (x *PolicyMapsRequest) Reset() {
	*x = PolicyMapsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapsRequest) ProtoMessage() {}

func (x *PolicyMapsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapsRequest.ProtoReflect.Descriptor instead.
func (*PolicyMapsRequest) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{18}
}

func (x *PolicyMapsRequest) GetFeature() PolicyFeature {
	if x != nil {
		return x.Feature
	}
	return PolicyFeature_POLICY_FEATURE_NULL
}

type PolicyMapsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the feature's configured policy maps.
	Key *PolicyMapKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *PolicyMapsResponse) Reset() {
	*x = PolicyMapsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapsResponse) ProtoMessage() {}

func (x *PolicyMapsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapsResponse.ProtoReflect.Descriptor instead.
func (*PolicyMapsResponse) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{19}
}

func (x *PolicyMapsResponse) GetKey() *PolicyMapKey {
	if x != nil {
		return x.Key
	}
	return nil
}

// *
// Note: When unapplying a PBR policy map, the specified interface's
// policy map will be unapplied regardless of whether it matches the
// specified policy map name.
type PolicyMapApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the policy map to [un]apply.
	Key *PolicyMapKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The inteface ID of the interface to [un]apply the policy map.
	IntfId *IntfId `protobuf:"bytes,2,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
	// The direction in which to [un]apply the policy map.
	Direction AclDirection `protobuf:"varint,3,opt,name=direction,proto3,enum=eos.remote.AclDirection" json:"direction,omitempty"`
	// True if the policy map should be applied otherwise false if it should
	// be unapplied.
	Apply bool `protobuf:"varint,4,opt,name=apply,proto3" json:"apply,omitempty"`
}

func (x *PolicyMapApplyRequest) Reset() {
	*x = PolicyMapApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapApplyRequest) ProtoMessage() {}

func (x *PolicyMapApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapApplyRequest.ProtoReflect.Descriptor instead.
func (*PolicyMapApplyRequest) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{20}
}

func (x *PolicyMapApplyRequest) GetKey() *PolicyMapKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PolicyMapApplyRequest) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

func (x *PolicyMapApplyRequest) GetDirection() AclDirection {
	if x != nil {
		return x.Direction
	}
	return AclDirection_ACL_DIRECTION_NULL
}

func (x *PolicyMapApplyRequest) GetApply() bool {
	if x != nil {
		return x.Apply
	}
	return false
}

type PolicyMapApplyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PolicyMapApplyResponse) Reset() {
	*x = PolicyMapApplyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapApplyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapApplyResponse) ProtoMessage() {}

func (x *PolicyMapApplyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapApplyResponse.ProtoReflect.Descriptor instead.
func (*PolicyMapApplyResponse) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{21}
}

type BulkPolicyMapApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of PolicyMapApplyRequests.
	Requests []*PolicyMapApplyRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkPolicyMapApplyRequest) Reset() {
	*x = BulkPolicyMapApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkPolicyMapApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkPolicyMapApplyRequest) ProtoMessage() {}

func (x *BulkPolicyMapApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkPolicyMapApplyRequest.ProtoReflect.Descriptor instead.
func (*BulkPolicyMapApplyRequest) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{22}
}

func (x *BulkPolicyMapApplyRequest) GetRequests() []*PolicyMapApplyRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BulkPolicyMapApplyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of consecutive successful requests.
	Processed uint64 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	// Success or error details in case of failure.
	Status *RpcResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BulkPolicyMapApplyResponse) Reset() {
	*x = BulkPolicyMapApplyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkPolicyMapApplyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkPolicyMapApplyResponse) ProtoMessage() {}

func (x *BulkPolicyMapApplyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkPolicyMapApplyResponse.ProtoReflect.Descriptor instead.
func (*BulkPolicyMapApplyResponse) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{23}
}

func (x *BulkPolicyMapApplyResponse) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *BulkPolicyMapApplyResponse) GetStatus() *RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type PolicyMapHwStatusesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The policy feature.
	Feature PolicyFeature `protobuf:"varint,1,opt,name=feature,proto3,enum=eos.remote.PolicyFeature" json:"feature,omitempty"`
}

func (x *PolicyMapHwStatusesRequest) Reset() {
	*x = PolicyMapHwStatusesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapHwStatusesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapHwStatusesRequest) ProtoMessage() {}

func (x *PolicyMapHwStatusesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapHwStatusesRequest.ProtoReflect.Descriptor instead.
func (*PolicyMapHwStatusesRequest) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{24}
}

func (x *PolicyMapHwStatusesRequest) GetFeature() PolicyFeature {
	if x != nil {
		return x.Feature
	}
	return PolicyFeature_POLICY_FEATURE_NULL
}

type PolicyMapHwStatusesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The keys of the policy maps for the feature.
	Key *PolicyMapKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *PolicyMapHwStatusesResponse) Reset() {
	*x = PolicyMapHwStatusesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapHwStatusesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapHwStatusesResponse) ProtoMessage() {}

func (x *PolicyMapHwStatusesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapHwStatusesResponse.ProtoReflect.Descriptor instead.
func (*PolicyMapHwStatusesResponse) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{25}
}

func (x *PolicyMapHwStatusesResponse) GetKey() *PolicyMapKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type PolicyMapHwStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the policy map to get the hardware status for.
	Key *PolicyMapKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *PolicyMapHwStatusRequest) Reset() {
	*x = PolicyMapHwStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapHwStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapHwStatusRequest) ProtoMessage() {}

func (x *PolicyMapHwStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapHwStatusRequest.ProtoReflect.Descriptor instead.
func (*PolicyMapHwStatusRequest) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{26}
}

func (x *PolicyMapHwStatusRequest) GetKey() *PolicyMapKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type PolicyMapHwStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hardware status of the policy map.
	HwStatuses *PolicyMapHwStatuses `protobuf:"bytes,1,opt,name=hw_statuses,json=hwStatuses,proto3" json:"hw_statuses,omitempty"`
}

func (x *PolicyMapHwStatusResponse) Reset() {
	*x = PolicyMapHwStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapHwStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapHwStatusResponse) ProtoMessage() {}

func (x *PolicyMapHwStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapHwStatusResponse.ProtoReflect.Descriptor instead.
func (*PolicyMapHwStatusResponse) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{27}
}

func (x *PolicyMapHwStatusResponse) GetHwStatuses() *PolicyMapHwStatuses {
	if x != nil {
		return x.HwStatuses
	}
	return nil
}

type TrafficPolicyExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the traffic policy to query.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *TrafficPolicyExistsRequest) Reset() {
	*x = TrafficPolicyExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicyExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicyExistsRequest) ProtoMessage() {}

func (x *TrafficPolicyExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicyExistsRequest.ProtoReflect.Descriptor instead.
func (*TrafficPolicyExistsRequest) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{28}
}

func (x *TrafficPolicyExistsRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type TrafficPolicyExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if the traffic policy is configured otherwise false.
	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *TrafficPolicyExistsResponse) Reset() {
	*x = TrafficPolicyExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicyExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicyExistsResponse) ProtoMessage() {}

func (x *TrafficPolicyExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicyExistsResponse.ProtoReflect.Descriptor instead.
func (*TrafficPolicyExistsResponse) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{29}
}

func (x *TrafficPolicyExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type TrafficPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the traffic policy to query.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *TrafficPolicyRequest) Reset() {
	*x = TrafficPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicyRequest) ProtoMessage() {}

func (x *TrafficPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicyRequest.ProtoReflect.Descriptor instead.
func (*TrafficPolicyRequest) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{30}
}

func (x *TrafficPolicyRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type TrafficPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The traffic policy corresponding to the key or empty if not found.
	TrafficPolicy *TrafficPolicy `protobuf:"bytes,1,opt,name=traffic_policy,json=trafficPolicy,proto3" json:"traffic_policy,omitempty"`
}

func (x *TrafficPolicyResponse) Reset() {
	*x = TrafficPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicyResponse) ProtoMessage() {}

func (x *TrafficPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicyResponse.ProtoReflect.Descriptor instead.
func (*TrafficPolicyResponse) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{31}
}

func (x *TrafficPolicyResponse) GetTrafficPolicy() *TrafficPolicy {
	if x != nil {
		return x.TrafficPolicy
	}
	return nil
}

type TrafficPolicyIsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The traffic policy to create or update.
	TrafficPolicy *TrafficPolicy `protobuf:"bytes,1,opt,name=traffic_policy,json=trafficPolicy,proto3" json:"traffic_policy,omitempty"`
}

func (x *TrafficPolicyIsRequest) Reset() {
	*x = TrafficPolicyIsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicyIsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicyIsRequest) ProtoMessage() {}

func (x *TrafficPolicyIsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicyIsRequest.ProtoReflect.Descriptor instead.
func (*TrafficPolicyIsRequest) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{32}
}

func (x *TrafficPolicyIsRequest) GetTrafficPolicy() *TrafficPolicy {
	if x != nil {
		return x.TrafficPolicy
	}
	return nil
}

type TrafficPolicyIsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TrafficPolicyIsResponse) Reset() {
	*x = TrafficPolicyIsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicyIsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicyIsResponse) ProtoMessage() {}

func (x *TrafficPolicyIsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicyIsResponse.ProtoReflect.Descriptor instead.
func (*TrafficPolicyIsResponse) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{33}
}

type BulkTrafficPolicyIsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of TrafficPolicyIsRequests.
	Requests []*TrafficPolicyIsRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkTrafficPolicyIsRequest) Reset() {
	*x = BulkTrafficPolicyIsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkTrafficPolicyIsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkTrafficPolicyIsRequest) ProtoMessage() {}

func (x *BulkTrafficPolicyIsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkTrafficPolicyIsRequest.ProtoReflect.Descriptor instead.
func (*BulkTrafficPolicyIsRequest) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{34}
}

func (x *BulkTrafficPolicyIsRequest) GetRequests() []*TrafficPolicyIsRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BulkTrafficPolicyIsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of consecutive successful requests.
	Processed uint64 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	// Success or error details in case of failure.
	Status *RpcResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BulkTrafficPolicyIsResponse) Reset() {
	*x = BulkTrafficPolicyIsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkTrafficPolicyIsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkTrafficPolicyIsResponse) ProtoMessage() {}

func (x *BulkTrafficPolicyIsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkTrafficPolicyIsResponse.ProtoReflect.Descriptor instead.
func (*BulkTrafficPolicyIsResponse) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{35}
}

func (x *BulkTrafficPolicyIsResponse) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *BulkTrafficPolicyIsResponse) GetStatus() *RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type TrafficPolicyDelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the traffic policy to delete.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *TrafficPolicyDelRequest) Reset() {
	*x = TrafficPolicyDelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicyDelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicyDelRequest) ProtoMessage() {}

func (x *TrafficPolicyDelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicyDelRequest.ProtoReflect.Descriptor instead.
func (*TrafficPolicyDelRequest) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{36}
}

func (x *TrafficPolicyDelRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type TrafficPolicyDelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TrafficPolicyDelResponse) Reset() {
	*x = TrafficPolicyDelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicyDelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicyDelResponse) ProtoMessage() {}

func (x *TrafficPolicyDelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicyDelResponse.ProtoReflect.Descriptor instead.
func (*TrafficPolicyDelResponse) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{37}
}

type BulkTrafficPolicyDelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of TrafficPolicyDelRequests.
	Requests []*TrafficPolicyDelRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkTrafficPolicyDelRequest) Reset() {
	*x = BulkTrafficPolicyDelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkTrafficPolicyDelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkTrafficPolicyDelRequest) ProtoMessage() {}

func (x *BulkTrafficPolicyDelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkTrafficPolicyDelRequest.ProtoReflect.Descriptor instead.
func (*BulkTrafficPolicyDelRequest) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{38}
}

func (x *BulkTrafficPolicyDelRequest) GetRequests() []*TrafficPolicyDelRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BulkTrafficPolicyDelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of consecutive successful requests.
	Processed uint64 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	// Success or error details in case of failure.
	Status *RpcResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BulkTrafficPolicyDelResponse) Reset() {
	*x = BulkTrafficPolicyDelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkTrafficPolicyDelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkTrafficPolicyDelResponse) ProtoMessage() {}

func (x *BulkTrafficPolicyDelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkTrafficPolicyDelResponse.ProtoReflect.Descriptor instead.
func (*BulkTrafficPolicyDelResponse) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{39}
}

func (x *BulkTrafficPolicyDelResponse) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *BulkTrafficPolicyDelResponse) GetStatus() *RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type TrafficPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TrafficPoliciesRequest) Reset() {
	*x = TrafficPoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPoliciesRequest) ProtoMessage() {}

func (x *TrafficPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPoliciesRequest.ProtoReflect.Descriptor instead.
func (*TrafficPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{40}
}

type TrafficPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of one of the feature's configured policy maps.
	Key *PolicyMapKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *TrafficPoliciesResponse) Reset() {
	*x = TrafficPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPoliciesResponse) ProtoMessage() {}

func (x *TrafficPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPoliciesResponse.ProtoReflect.Descriptor instead.
func (*TrafficPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{41}
}

func (x *TrafficPoliciesResponse) GetKey() *PolicyMapKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type TrafficPolicyApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the traffic policy to [un]apply.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The inteface ID of the interface to [un]apply the policy map.
	IntfId *IntfId `protobuf:"bytes,2,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
	// The direction in which to [un]apply the traffic policy.
	Direction TrafficPolicyDirection `protobuf:"varint,3,opt,name=direction,proto3,enum=eos.remote.TrafficPolicyDirection" json:"direction,omitempty"`
	// True if the traffic policy should be applied otherwise false if it should
	// be unapplied.
	Apply bool `protobuf:"varint,4,opt,name=apply,proto3" json:"apply,omitempty"`
}

func (x *TrafficPolicyApplyRequest) Reset() {
	*x = TrafficPolicyApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicyApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicyApplyRequest) ProtoMessage() {}

func (x *TrafficPolicyApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicyApplyRequest.ProtoReflect.Descriptor instead.
func (*TrafficPolicyApplyRequest) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{42}
}

func (x *TrafficPolicyApplyRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TrafficPolicyApplyRequest) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

func (x *TrafficPolicyApplyRequest) GetDirection() TrafficPolicyDirection {
	if x != nil {
		return x.Direction
	}
	return TrafficPolicyDirection_TRAFFIC_POLICY_DIRECTION_NULL
}

func (x *TrafficPolicyApplyRequest) GetApply() bool {
	if x != nil {
		return x.Apply
	}
	return false
}

type TrafficPolicyApplyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TrafficPolicyApplyResponse) Reset() {
	*x = TrafficPolicyApplyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicyApplyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicyApplyResponse) ProtoMessage() {}

func (x *TrafficPolicyApplyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicyApplyResponse.ProtoReflect.Descriptor instead.
func (*TrafficPolicyApplyResponse) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{43}
}

type BulkTrafficPolicyApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of TrafficPolicyApplyRequests.
	Requests []*TrafficPolicyApplyRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkTrafficPolicyApplyRequest) Reset() {
	*x = BulkTrafficPolicyApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkTrafficPolicyApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkTrafficPolicyApplyRequest) ProtoMessage() {}

func (x *BulkTrafficPolicyApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkTrafficPolicyApplyRequest.ProtoReflect.Descriptor instead.
func (*BulkTrafficPolicyApplyRequest) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{44}
}

func (x *BulkTrafficPolicyApplyRequest) GetRequests() []*TrafficPolicyApplyRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BulkTrafficPolicyApplyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of consecutive successful requests.
	Processed uint64 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	// Success or error details in case of failure.
	Status *RpcResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BulkTrafficPolicyApplyResponse) Reset() {
	*x = BulkTrafficPolicyApplyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkTrafficPolicyApplyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkTrafficPolicyApplyResponse) ProtoMessage() {}

func (x *BulkTrafficPolicyApplyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkTrafficPolicyApplyResponse.ProtoReflect.Descriptor instead.
func (*BulkTrafficPolicyApplyResponse) Descriptor() ([]byte, []int) {
	return file_policy_map_proto_rawDescGZIP(), []int{45}
}

func (x *BulkTrafficPolicyApplyResponse) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *BulkTrafficPolicyApplyResponse) GetStatus() *RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_policy_map_proto protoreflect.FileDescriptor

var file_policy_map_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x1a, 0x0f,
	0x61, 0x63, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x10, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x72, 0x70, 0x63, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x78, 0x0a, 0x15, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x2c, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x48, 0x00,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x22, 0xd9, 0x01, 0x0a, 0x16, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d,
	0x61, 0x70, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x79, 0x6e, 0x63, 0x46,
	0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x42, 0x12, 0x0a, 0x10,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0x1c, 0x0a, 0x1a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73,
	0x79, 0x6e, 0x63, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1d,
	0x0a, 0x1b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x79, 0x6e,
	0x63, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x0a,
	0x1e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x21, 0x0a, 0x1f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x79,
	0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x44, 0x0a, 0x16, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x31, 0x0a, 0x17, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x3e, 0x0a, 0x10, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x49, 0x0a, 0x11, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x52, 0x09, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x22, 0x4a, 0x0a, 0x12, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4d, 0x61, 0x70, 0x49, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0a,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d,
	0x61, 0x70, 0x22, 0x15, 0x0a, 0x13, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x49,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x0a, 0x16, 0x42, 0x75, 0x6c,
	0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x49, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x49, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22,
	0x6e, 0x0a, 0x17, 0x42, 0x75, 0x6c, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70,
	0x49, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x41, 0x0a, 0x13, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x44, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x22, 0x16, 0x0a, 0x14, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x44,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x0a, 0x17, 0x42, 0x75,
	0x6c, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x44, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x44, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x22, 0x6f, 0x0a, 0x18, 0x42, 0x75, 0x6c, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4d, 0x61, 0x70, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x48, 0x0a, 0x11, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x40, 0x0a,
	0x12, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22,
	0xbe, 0x01, 0x0a, 0x15, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66,
	0x49, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x41, 0x63, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x22, 0x18, 0x0a, 0x16, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a, 0x0a, 0x19, 0x42, 0x75,
	0x6c, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x71, 0x0a, 0x1a, 0x42, 0x75, 0x6c, 0x6b, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x51, 0x0a, 0x1a, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x48, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x49, 0x0a, 0x1b,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x48, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x4b,
	0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x46, 0x0a, 0x18, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x4d, 0x61, 0x70, 0x48, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22,
	0x5d, 0x0a, 0x19, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x48, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b,
	0x68, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x48, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x52, 0x0a, 0x68, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x22, 0x2e,
	0x0a, 0x1a, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x35,
	0x0a, 0x1b, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x28, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22,
	0x59, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x5a, 0x0a, 0x16, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x19, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x5c, 0x0a, 0x1a, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22,
	0x72, 0x0a, 0x1b, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x49, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x2b, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x22, 0x1a, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x0a, 0x1b,
	0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x73, 0x0a, 0x1c,
	0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x18, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x45, 0x0a, 0x17, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x22, 0xb2, 0x01, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x12,
	0x40, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x22, 0x1c, 0x0a, 0x1a, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x0a, 0x1d, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x75, 0x0a, 0x1e, 0x42, 0x75, 0x6c,
	0x6b, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2a, 0x8f, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4d, 0x41, 0x50,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x01, 0x12, 0x1f, 0x0a,
	0x1b, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x02, 0x12, 0x22,
	0x0a, 0x1e, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x53, 0x45, 0x54,
	0x10, 0x03, 0x32, 0xd4, 0x11, 0x0a, 0x13, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70,
	0x4d, 0x67, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x21, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x60,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x26, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x79,
	0x6e, 0x63, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6c, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53,
	0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4d, 0x61, 0x70, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x61,
	0x70, 0x12, 0x1c, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x52, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69,
	0x73, 0x12, 0x1e, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x49, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x49, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x73, 0x12, 0x22, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4d, 0x61, 0x70, 0x49, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x49, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x6d, 0x61, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x12, 0x1f, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x44, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x44,
	0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x13,
	0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x5f,
	0x64, 0x65, 0x6c, 0x12, 0x23, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x44, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4d, 0x61, 0x70, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x50, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x12,
	0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4d, 0x61, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x5b, 0x0a, 0x10, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x70,
	0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x21, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x68, 0x0a, 0x15, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d,
	0x61, 0x70, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x25, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4d, 0x61, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c,
	0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x16, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x68, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x48, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d,
	0x61, 0x70, 0x48, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5a, 0x0a, 0x09, 0x68, 0x77, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x48, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d,
	0x61, 0x70, 0x48, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x26, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x57, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x20, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x11, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x73, 0x12, 0x22,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x16, 0x62, 0x75, 0x6c,
	0x6b, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x69, 0x73, 0x12, 0x26, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x49, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x12, 0x23, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x17, 0x62, 0x75, 0x6c,
	0x6b, 0x5f, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x64, 0x65, 0x6c, 0x12, 0x27, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x10, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x22, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x67, 0x0a, 0x14, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x12, 0x25, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x19, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x12, 0x29, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75,
	0x6c, 0x6b, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x12, 0x5a, 0x10, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2f, 0x45, 0x6f, 0x73, 0x53, 0x64, 0x6b, 0x52, 0x70, 0x63, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_policy_map_proto_rawDescOnce sync.Once
	file_policy_map_proto_rawDescData = file_policy_map_proto_rawDesc
)

func file_policy_map_proto_rawDescGZIP() []byte {
	file_policy_map_proto_rawDescOnce.Do(func() {
		file_policy_map_proto_rawDescData = protoimpl.X.CompressGZIP(file_policy_map_proto_rawDescData)
	})
	return file_policy_map_proto_rawDescData
}

var file_policy_map_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_policy_map_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_policy_map_proto_goTypes = []interface{}{
	(PolicyMapEventType)(0),                 // 0: eos.remote.PolicyMapEventType
	(*PolicyMapWatchRequest)(nil),           // 1: eos.remote.PolicyMapWatchRequest
	(*PolicyMapWatchResponse)(nil),          // 2: eos.remote.PolicyMapWatchResponse
	(*PolicyMapResyncInitRequest)(nil),      // 3: eos.remote.PolicyMapResyncInitRequest
	(*PolicyMapResyncInitResponse)(nil),     // 4: eos.remote.PolicyMapResyncInitResponse
	(*PolicyMapResyncCompleteRequest)(nil),  // 5: eos.remote.PolicyMapResyncCompleteRequest
	(*PolicyMapResyncCompleteResponse)(nil), // 6: eos.remote.PolicyMapResyncCompleteResponse
	(*PolicyMapExistsRequest)(nil),          // 7: eos.remote.PolicyMapExistsRequest
	(*PolicyMapExistsResponse)(nil),         // 8: eos.remote.PolicyMapExistsResponse
	(*PolicyMapRequest)(nil),                // 9: eos.remote.PolicyMapRequest
	(*PolicyMapResponse)(nil),               // 10: eos.remote.PolicyMapResponse
	(*PolicyMapIsRequest)(nil),              // 11: eos.remote.PolicyMapIsRequest
	(*PolicyMapIsResponse)(nil),             // 12: eos.remote.PolicyMapIsResponse
	(*BulkPolicyMapIsRequest)(nil),          // 13: eos.remote.BulkPolicyMapIsRequest
	(*BulkPolicyMapIsResponse)(nil),         // 14: eos.remote.BulkPolicyMapIsResponse
	(*PolicyMapDelRequest)(nil),             // 15: eos.remote.PolicyMapDelRequest
	(*PolicyMapDelResponse)(nil),            // 16: eos.remote.PolicyMapDelResponse
	(*BulkPolicyMapDelRequest)(nil),         // 17: eos.remote.BulkPolicyMapDelRequest
	(*BulkPolicyMapDelResponse)(nil),        // 18: eos.remote.BulkPolicyMapDelResponse
	(*PolicyMapsRequest)(nil),               // 19: eos.remote.PolicyMapsRequest
	(*PolicyMapsResponse)(nil),              // 20: eos.remote.PolicyMapsResponse
	(*PolicyMapApplyRequest)(nil),           // 21: eos.remote.PolicyMapApplyRequest
	(*PolicyMapApplyResponse)(nil),          // 22: eos.remote.PolicyMapApplyResponse
	(*BulkPolicyMapApplyRequest)(nil),       // 23: eos.remote.BulkPolicyMapApplyRequest
	(*BulkPolicyMapApplyResponse)(nil),      // 24: eos.remote.BulkPolicyMapApplyResponse
	(*PolicyMapHwStatusesRequest)(nil),      // 25: eos.remote.PolicyMapHwStatusesRequest
	(*PolicyMapHwStatusesResponse)(nil),     // 26: eos.remote.PolicyMapHwStatusesResponse
	(*PolicyMapHwStatusRequest)(nil),        // 27: eos.remote.PolicyMapHwStatusRequest
	(*PolicyMapHwStatusResponse)(nil),       // 28: eos.remote.PolicyMapHwStatusResponse
	(*TrafficPolicyExistsRequest)(nil),      // 29: eos.remote.TrafficPolicyExistsRequest
	(*TrafficPolicyExistsResponse)(nil),     // 30: eos.remote.TrafficPolicyExistsResponse
	(*TrafficPolicyRequest)(nil),            // 31: eos.remote.TrafficPolicyRequest
	(*TrafficPolicyResponse)(nil),           // 32: eos.remote.TrafficPolicyResponse
	(*TrafficPolicyIsRequest)(nil),          // 33: eos.remote.TrafficPolicyIsRequest
	(*TrafficPolicyIsResponse)(nil),         // 34: eos.remote.TrafficPolicyIsResponse
	(*BulkTrafficPolicyIsRequest)(nil),      // 35: eos.remote.BulkTrafficPolicyIsRequest
	(*BulkTrafficPolicyIsResponse)(nil),     // 36: eos.remote.BulkTrafficPolicyIsResponse
	(*TrafficPolicyDelRequest)(nil),         // 37: eos.remote.TrafficPolicyDelRequest
	(*TrafficPolicyDelResponse)(nil),        // 38: eos.remote.TrafficPolicyDelResponse
	(*BulkTrafficPolicyDelRequest)(nil),     // 39: eos.remote.BulkTrafficPolicyDelRequest
	(*BulkTrafficPolicyDelResponse)(nil),    // 40: eos.remote.BulkTrafficPolicyDelResponse
	(*TrafficPoliciesRequest)(nil),          // 41: eos.remote.TrafficPoliciesRequest
	(*TrafficPoliciesResponse)(nil),         // 42: eos.remote.TrafficPoliciesResponse
	(*TrafficPolicyApplyRequest)(nil),       // 43: eos.remote.TrafficPolicyApplyRequest
	(*TrafficPolicyApplyResponse)(nil),      // 44: eos.remote.TrafficPolicyApplyResponse
	(*BulkTrafficPolicyApplyRequest)(nil),   // 45: eos.remote.BulkTrafficPolicyApplyRequest
	(*BulkTrafficPolicyApplyResponse)(nil),  // 46: eos.remote.BulkTrafficPolicyApplyResponse
	(*PolicyMapKey)(nil),                    // 47: eos.remote.PolicyMapKey
	(*PolicyMap)(nil),                       // 48: eos.remote.PolicyMap
	(*RpcResponseStatus)(nil),               // 49: eos.remote.RpcResponseStatus
	(PolicyFeature)(0),                      // 50: eos.remote.PolicyFeature
	(*IntfId)(nil),                          // 51: eos.remote.IntfId
	(AclDirection)(0),                       // 52: eos.remote.AclDirection
	(*PolicyMapHwStatuses)(nil),             // 53: eos.remote.PolicyMapHwStatuses
	(*TrafficPolicy)(nil),                   // 54: eos.remote.TrafficPolicy
	(TrafficPolicyDirection)(0),             // 55: eos.remote.TrafficPolicyDirection
}
var file_policy_map_proto_depIdxs = []int32{
	47, // 0: eos.remote.PolicyMapWatchRequest.key:type_name -> eos.remote.PolicyMapKey
	47, // 1: eos.remote.PolicyMapWatchResponse.key:type_name -> eos.remote.PolicyMapKey
	0,  // 2: eos.remote.PolicyMapWatchResponse.event_type:type_name -> eos.remote.PolicyMapEventType
	47, // 3: eos.remote.PolicyMapExistsRequest.key:type_name -> eos.remote.PolicyMapKey
	47, // 4: eos.remote.PolicyMapRequest.key:type_name -> eos.remote.PolicyMapKey
	48, // 5: eos.remote.PolicyMapResponse.policy_map:type_name -> eos.remote.PolicyMap
	48, // 6: eos.remote.PolicyMapIsRequest.policy_map:type_name -> eos.remote.PolicyMap
	11, // 7: eos.remote.BulkPolicyMapIsRequest.requests:type_name -> eos.remote.PolicyMapIsRequest
	49, // 8: eos.remote.BulkPolicyMapIsResponse.status:type_name -> eos.remote.RpcResponseStatus
	47, // 9: eos.remote.PolicyMapDelRequest.key:type_name -> eos.remote.PolicyMapKey
	15, // 10: eos.remote.BulkPolicyMapDelRequest.requests:type_name -> eos.remote.PolicyMapDelRequest
	49, // 11: eos.remote.BulkPolicyMapDelResponse.status:type_name -> eos.remote.RpcResponseStatus
	50, // 12: eos.remote.PolicyMapsRequest.feature:type_name -> eos.remote.PolicyFeature
	47, // 13: eos.remote.PolicyMapsResponse.key:type_name -> eos.remote.PolicyMapKey
	47, // 14: eos.remote.PolicyMapApplyRequest.key:type_name -> eos.remote.PolicyMapKey
	51, // 15: eos.remote.PolicyMapApplyRequest.intf_id:type_name -> eos.remote.IntfId
	52, // 16: eos.remote.PolicyMapApplyRequest.direction:type_name -> eos.remote.AclDirection
	21, // 17: eos.remote.BulkPolicyMapApplyRequest.requests:type_name -> eos.remote.PolicyMapApplyRequest
	49, // 18: eos.remote.BulkPolicyMapApplyResponse.status:type_name -> eos.remote.RpcResponseStatus
	50, // 19: eos.remote.PolicyMapHwStatusesRequest.feature:type_name -> eos.remote.PolicyFeature
	47, // 20: eos.remote.PolicyMapHwStatusesResponse.key:type_name -> eos.remote.PolicyMapKey
	47, // 21: eos.remote.PolicyMapHwStatusRequest.key:type_name -> eos.remote.PolicyMapKey
	53, // 22: eos.remote.PolicyMapHwStatusResponse.hw_statuses:type_name -> eos.remote.PolicyMapHwStatuses
	54, // 23: eos.remote.TrafficPolicyResponse.traffic_policy:type_name -> eos.remote.TrafficPolicy
	54, // 24: eos.remote.TrafficPolicyIsRequest.traffic_policy:type_name -> eos.remote.TrafficPolicy
	33, // 25: eos.remote.BulkTrafficPolicyIsRequest.requests:type_name -> eos.remote.TrafficPolicyIsRequest
	49, // 26: eos.remote.BulkTrafficPolicyIsResponse.status:type_name -> eos.remote.RpcResponseStatus
	37, // 27: eos.remote.BulkTrafficPolicyDelRequest.requests:type_name -> eos.remote.TrafficPolicyDelRequest
	49, // 28: eos.remote.BulkTrafficPolicyDelResponse.status:type_name -> eos.remote.RpcResponseStatus
	47, // 29: eos.remote.TrafficPoliciesResponse.key:type_name -> eos.remote.PolicyMapKey
	51, // 30: eos.remote.TrafficPolicyApplyRequest.intf_id:type_name -> eos.remote.IntfId
	55, // 31: eos.remote.TrafficPolicyApplyRequest.direction:type_name -> eos.remote.TrafficPolicyDirection
	43, // 32: eos.remote.BulkTrafficPolicyApplyRequest.requests:type_name -> eos.remote.TrafficPolicyApplyRequest
	49, // 33: eos.remote.BulkTrafficPolicyApplyResponse.status:type_name -> eos.remote.RpcResponseStatus
	1,  // 34: eos.remote.PolicyMapMgrService.watch:input_type -> eos.remote.PolicyMapWatchRequest
	3,  // 35: eos.remote.PolicyMapMgrService.resync_init:input_type -> eos.remote.PolicyMapResyncInitRequest
	5,  // 36: eos.remote.PolicyMapMgrService.resync_complete:input_type -> eos.remote.PolicyMapResyncCompleteRequest
	7,  // 37: eos.remote.PolicyMapMgrService.exists:input_type -> eos.remote.PolicyMapExistsRequest
	9,  // 38: eos.remote.PolicyMapMgrService.policy_map:input_type -> eos.remote.PolicyMapRequest
	11, // 39: eos.remote.PolicyMapMgrService.policy_map_is:input_type -> eos.remote.PolicyMapIsRequest
	13, // 40: eos.remote.PolicyMapMgrService.bulk_policy_map_is:input_type -> eos.remote.BulkPolicyMapIsRequest
	15, // 41: eos.remote.PolicyMapMgrService.policy_map_del:input_type -> eos.remote.PolicyMapDelRequest
	17, // 42: eos.remote.PolicyMapMgrService.bulk_policy_map_del:input_type -> eos.remote.BulkPolicyMapDelRequest
	19, // 43: eos.remote.PolicyMapMgrService.policy_maps:input_type -> eos.remote.PolicyMapsRequest
	21, // 44: eos.remote.PolicyMapMgrService.policy_map_apply:input_type -> eos.remote.PolicyMapApplyRequest
	23, // 45: eos.remote.PolicyMapMgrService.bulk_policy_map_apply:input_type -> eos.remote.BulkPolicyMapApplyRequest
	25, // 46: eos.remote.PolicyMapMgrService.policy_map_hw_statuses:input_type -> eos.remote.PolicyMapHwStatusesRequest
	27, // 47: eos.remote.PolicyMapMgrService.hw_status:input_type -> eos.remote.PolicyMapHwStatusRequest
	29, // 48: eos.remote.PolicyMapMgrService.traffic_policy_exists:input_type -> eos.remote.TrafficPolicyExistsRequest
	31, // 49: eos.remote.PolicyMapMgrService.traffic_policy:input_type -> eos.remote.TrafficPolicyRequest
	33, // 50: eos.remote.PolicyMapMgrService.traffic_policy_is:input_type -> eos.remote.TrafficPolicyIsRequest
	35, // 51: eos.remote.PolicyMapMgrService.bulk_traffic_policy_is:input_type -> eos.remote.BulkTrafficPolicyIsRequest
	37, // 52: eos.remote.PolicyMapMgrService.traffic_policy_del:input_type -> eos.remote.TrafficPolicyDelRequest
	39, // 53: eos.remote.PolicyMapMgrService.bulk_traffic_policy_del:input_type -> eos.remote.BulkTrafficPolicyDelRequest
	41, // 54: eos.remote.PolicyMapMgrService.traffic_policies:input_type -> eos.remote.TrafficPoliciesRequest
	43, // 55: eos.remote.PolicyMapMgrService.traffic_policy_apply:input_type -> eos.remote.TrafficPolicyApplyRequest
	45, // 56: eos.remote.PolicyMapMgrService.bulk_traffic_policy_apply:input_type -> eos.remote.BulkTrafficPolicyApplyRequest
	2,  // 57: eos.remote.PolicyMapMgrService.watch:output_type -> eos.remote.PolicyMapWatchResponse
	4,  // 58: eos.remote.PolicyMapMgrService.resync_init:output_type -> eos.remote.PolicyMapResyncInitResponse
	6,  // 59: eos.remote.PolicyMapMgrService.resync_complete:output_type -> eos.remote.PolicyMapResyncCompleteResponse
	8,  // 60: eos.remote.PolicyMapMgrService.exists:output_type -> eos.remote.PolicyMapExistsResponse
	10, // 61: eos.remote.PolicyMapMgrService.policy_map:output_type -> eos.remote.PolicyMapResponse
	12, // 62: eos.remote.PolicyMapMgrService.policy_map_is:output_type -> eos.remote.PolicyMapIsResponse
	14, // 63: eos.remote.PolicyMapMgrService.bulk_policy_map_is:output_type -> eos.remote.BulkPolicyMapIsResponse
	16, // 64: eos.remote.PolicyMapMgrService.policy_map_del:output_type -> eos.remote.PolicyMapDelResponse
	18, // 65: eos.remote.PolicyMapMgrService.bulk_policy_map_del:output_type -> eos.remote.BulkPolicyMapDelResponse
	20, // 66: eos.remote.PolicyMapMgrService.policy_maps:output_type -> eos.remote.PolicyMapsResponse
	22, // 67: eos.remote.PolicyMapMgrService.policy_map_apply:output_type -> eos.remote.PolicyMapApplyResponse
	24, // 68: eos.remote.PolicyMapMgrService.bulk_policy_map_apply:output_type -> eos.remote.BulkPolicyMapApplyResponse
	26, // 69: eos.remote.PolicyMapMgrService.policy_map_hw_statuses:output_type -> eos.remote.PolicyMapHwStatusesResponse
	28, // 70: eos.remote.PolicyMapMgrService.hw_status:output_type -> eos.remote.PolicyMapHwStatusResponse
	30, // 71: eos.remote.PolicyMapMgrService.traffic_policy_exists:output_type -> eos.remote.TrafficPolicyExistsResponse
	32, // 72: eos.remote.PolicyMapMgrService.traffic_policy:output_type -> eos.remote.TrafficPolicyResponse
	34, // 73: eos.remote.PolicyMapMgrService.traffic_policy_is:output_type -> eos.remote.TrafficPolicyIsResponse
	36, // 74: eos.remote.PolicyMapMgrService.bulk_traffic_policy_is:output_type -> eos.remote.BulkTrafficPolicyIsResponse
	38, // 75: eos.remote.PolicyMapMgrService.traffic_policy_del:output_type -> eos.remote.TrafficPolicyDelResponse
	40, // 76: eos.remote.PolicyMapMgrService.bulk_traffic_policy_del:output_type -> eos.remote.BulkTrafficPolicyDelResponse
	42, // 77: eos.remote.PolicyMapMgrService.traffic_policies:output_type -> eos.remote.TrafficPoliciesResponse
	44, // 78: eos.remote.PolicyMapMgrService.traffic_policy_apply:output_type -> eos.remote.TrafficPolicyApplyResponse
	46, // 79: eos.remote.PolicyMapMgrService.bulk_traffic_policy_apply:output_type -> eos.remote.BulkTrafficPolicyApplyResponse
	57, // [57:80] is the sub-list for method output_type
	34, // [34:57] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_policy_map_proto_init() }
func file_policy_map_proto_init() {
	if File_policy_map_proto != nil {
		return
	}
	file_acl_types_proto_init()
	file_intf_types_proto_init()
	file_policy_map_types_proto_init()
	file_rpc_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_policy_map_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapWatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapWatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapResyncInitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapResyncInitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapResyncCompleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapResyncCompleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapIsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapIsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkPolicyMapIsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkPolicyMapIsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapDelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapDelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkPolicyMapDelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkPolicyMapDelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapApplyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkPolicyMapApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkPolicyMapApplyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapHwStatusesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapHwStatusesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapHwStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapHwStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicyExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicyExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicyIsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicyIsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkTrafficPolicyIsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkTrafficPolicyIsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicyDelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicyDelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkTrafficPolicyDelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkTrafficPolicyDelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicyApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicyApplyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkTrafficPolicyApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkTrafficPolicyApplyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_policy_map_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*PolicyMapWatchRequest_All)(nil),
		(*PolicyMapWatchRequest_Key)(nil),
	}
	file_policy_map_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*PolicyMapWatchResponse_EventType)(nil),
		(*PolicyMapWatchResponse_SyncFailMessage)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_policy_map_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_policy_map_proto_goTypes,
		DependencyIndexes: file_policy_map_proto_depIdxs,
		EnumInfos:         file_policy_map_proto_enumTypes,
		MessageInfos:      file_policy_map_proto_msgTypes,
	}.Build()
	File_policy_map_proto = out.File
	file_policy_map_proto_rawDesc = nil
	file_policy_map_proto_goTypes = nil
	file_policy_map_proto_depIdxs = nil
}
