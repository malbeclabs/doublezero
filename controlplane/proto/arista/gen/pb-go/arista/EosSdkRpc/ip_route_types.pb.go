// Copyright (c) 2021 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: ip_route_types.proto

package EosSdkRpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IpRouteActions int32

const (
	IpRouteActions_IP_ROUTE_ACTION_NULL          IpRouteActions = 0
	IpRouteActions_IP_ROUTE_ACTION_FORWARD       IpRouteActions = 1
	IpRouteActions_IP_ROUTE_ACTION_DROP          IpRouteActions = 2
	IpRouteActions_IP_ROUTE_ACTION_NEXTHOP_GROUP IpRouteActions = 3
)

// Enum value maps for IpRouteActions.
var (
	IpRouteActions_name = map[int32]string{
		0: "IP_ROUTE_ACTION_NULL",
		1: "IP_ROUTE_ACTION_FORWARD",
		2: "IP_ROUTE_ACTION_DROP",
		3: "IP_ROUTE_ACTION_NEXTHOP_GROUP",
	}
	IpRouteActions_value = map[string]int32{
		"IP_ROUTE_ACTION_NULL":          0,
		"IP_ROUTE_ACTION_FORWARD":       1,
		"IP_ROUTE_ACTION_DROP":          2,
		"IP_ROUTE_ACTION_NEXTHOP_GROUP": 3,
	}
)

func (x IpRouteActions) Enum() *IpRouteActions {
	p := new(IpRouteActions)
	*p = x
	return p
}

func (x IpRouteActions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpRouteActions) Descriptor() protoreflect.EnumDescriptor {
	return file_ip_route_types_proto_enumTypes[0].Descriptor()
}

func (IpRouteActions) Type() protoreflect.EnumType {
	return &file_ip_route_types_proto_enumTypes[0]
}

func (x IpRouteActions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpRouteActions.Descriptor instead.
func (IpRouteActions) EnumDescriptor() ([]byte, []int) {
	return file_ip_route_types_proto_rawDescGZIP(), []int{0}
}

type IpRouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix *Prefix `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Types that are assignable to PreferencePresent:
	//
	//	*IpRouteKey_Preference
	PreferencePresent isIpRouteKey_PreferencePresent `protobuf_oneof:"preference_present"`
}

func (x *IpRouteKey) Reset() {
	*x = IpRouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRouteKey) ProtoMessage() {}

func (x *IpRouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRouteKey.ProtoReflect.Descriptor instead.
func (*IpRouteKey) Descriptor() ([]byte, []int) {
	return file_ip_route_types_proto_rawDescGZIP(), []int{0}
}

func (x *IpRouteKey) GetPrefix() *Prefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (m *IpRouteKey) GetPreferencePresent() isIpRouteKey_PreferencePresent {
	if m != nil {
		return m.PreferencePresent
	}
	return nil
}

func (x *IpRouteKey) GetPreference() uint32 {
	if x, ok := x.GetPreferencePresent().(*IpRouteKey_Preference); ok {
		return x.Preference
	}
	return 0
}

type isIpRouteKey_PreferencePresent interface {
	isIpRouteKey_PreferencePresent()
}

type IpRouteKey_Preference struct {
	// Default value is 1.
	Preference uint32 `protobuf:"varint,2,opt,name=preference,proto3,oneof"`
}

func (*IpRouteKey_Preference) isIpRouteKey_PreferencePresent() {}

type IpRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        *IpRouteKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Tag        uint32      `protobuf:"varint,2,opt,name=tag,proto3" json:"tag,omitempty"`
	RibBypass  bool        `protobuf:"varint,3,opt,name=rib_bypass,json=ribBypass,proto3" json:"rib_bypass,omitempty"`
	CommandTag string      `protobuf:"bytes,4,opt,name=command_tag,json=commandTag,proto3" json:"command_tag,omitempty"`
}

func (x *IpRoute) Reset() {
	*x = IpRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRoute) ProtoMessage() {}

func (x *IpRoute) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRoute.ProtoReflect.Descriptor instead.
func (*IpRoute) Descriptor() ([]byte, []int) {
	return file_ip_route_types_proto_rawDescGZIP(), []int{1}
}

func (x *IpRoute) GetKey() *IpRouteKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *IpRoute) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *IpRoute) GetRibBypass() bool {
	if x != nil {
		return x.RibBypass
	}
	return false
}

func (x *IpRoute) GetCommandTag() string {
	if x != nil {
		return x.CommandTag
	}
	return ""
}

type IpRouteVia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     *IpRouteKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	HopAddr []byte      `protobuf:"bytes,2,opt,name=hop_addr,json=hopAddr,proto3" json:"hop_addr,omitempty"`
	IntfId  *IntfId     `protobuf:"bytes,3,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
	NhgName string      `protobuf:"bytes,4,opt,name=nhg_name,json=nhgName,proto3" json:"nhg_name,omitempty"`
	// Types that are assignable to MplsLabelPresent:
	//
	//	*IpRouteVia_MplsLabel
	MplsLabelPresent  isIpRouteVia_MplsLabelPresent `protobuf_oneof:"mpls_label_present"`
	Vni               uint32                        `protobuf:"varint,6,opt,name=vni,proto3" json:"vni,omitempty"`
	VtepAddr          []byte                        `protobuf:"bytes,7,opt,name=vtep_addr,json=vtepAddr,proto3" json:"vtep_addr,omitempty"`
	RouterMacEthAddr  []byte                        `protobuf:"bytes,8,opt,name=router_mac_eth_addr,json=routerMacEthAddr,proto3" json:"router_mac_eth_addr,omitempty"`
	EgressVrf         string                        `protobuf:"bytes,9,opt,name=egress_vrf,json=egressVrf,proto3" json:"egress_vrf,omitempty"`
	Metric            uint32                        `protobuf:"varint,10,opt,name=metric,proto3" json:"metric,omitempty"`
	VtepSipValidation bool                          `protobuf:"varint,11,opt,name=vtep_sip_validation,json=vtepSipValidation,proto3" json:"vtep_sip_validation,omitempty"`
	VxlanIntfId       *IntfId                       `protobuf:"bytes,12,opt,name=vxlan_intf_id,json=vxlanIntfId,proto3" json:"vxlan_intf_id,omitempty"`
	// Valid range of 1 - (2^24)-1, set to 0 if unused.
	Weight uint32 `protobuf:"varint,13,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *IpRouteVia) Reset() {
	*x = IpRouteVia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRouteVia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRouteVia) ProtoMessage() {}

func (x *IpRouteVia) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRouteVia.ProtoReflect.Descriptor instead.
func (*IpRouteVia) Descriptor() ([]byte, []int) {
	return file_ip_route_types_proto_rawDescGZIP(), []int{2}
}

func (x *IpRouteVia) GetKey() *IpRouteKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *IpRouteVia) GetHopAddr() []byte {
	if x != nil {
		return x.HopAddr
	}
	return nil
}

func (x *IpRouteVia) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

func (x *IpRouteVia) GetNhgName() string {
	if x != nil {
		return x.NhgName
	}
	return ""
}

func (m *IpRouteVia) GetMplsLabelPresent() isIpRouteVia_MplsLabelPresent {
	if m != nil {
		return m.MplsLabelPresent
	}
	return nil
}

func (x *IpRouteVia) GetMplsLabel() uint32 {
	if x, ok := x.GetMplsLabelPresent().(*IpRouteVia_MplsLabel); ok {
		return x.MplsLabel
	}
	return 0
}

func (x *IpRouteVia) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *IpRouteVia) GetVtepAddr() []byte {
	if x != nil {
		return x.VtepAddr
	}
	return nil
}

func (x *IpRouteVia) GetRouterMacEthAddr() []byte {
	if x != nil {
		return x.RouterMacEthAddr
	}
	return nil
}

func (x *IpRouteVia) GetEgressVrf() string {
	if x != nil {
		return x.EgressVrf
	}
	return ""
}

func (x *IpRouteVia) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *IpRouteVia) GetVtepSipValidation() bool {
	if x != nil {
		return x.VtepSipValidation
	}
	return false
}

func (x *IpRouteVia) GetVxlanIntfId() *IntfId {
	if x != nil {
		return x.VxlanIntfId
	}
	return nil
}

func (x *IpRouteVia) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type isIpRouteVia_MplsLabelPresent interface {
	isIpRouteVia_MplsLabelPresent()
}

type IpRouteVia_MplsLabel struct {
	// Default value is 1048576 (invalid label).
	MplsLabel uint32 `protobuf:"varint,5,opt,name=mpls_label,json=mplsLabel,proto3,oneof"`
}

func (*IpRouteVia_MplsLabel) isIpRouteVia_MplsLabelPresent() {}

var File_ip_route_types_proto protoreflect.FileDescriptor

var file_ip_route_types_proto_rawDesc = []byte{
	0x0a, 0x14, 0x69, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x1a, 0x10, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x69, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x70, 0x0a, 0x0a, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x20, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x14, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x07, 0x49, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x62, 0x5f, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x69, 0x62, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x22,
	0xe5, 0x03, 0x0a, 0x0a, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x12, 0x28,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x68, 0x6f, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6e, 0x68, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6e, 0x68, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x6d,
	0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x09, 0x6d, 0x70, 0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03,
	0x76, 0x6e, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x12, 0x1b,
	0x0a, 0x09, 0x76, 0x74, 0x65, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x76, 0x74, 0x65, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2d, 0x0a, 0x13, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x63, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x4d, 0x61, 0x63, 0x45, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x72, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x56, 0x72, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x74, 0x65, 0x70, 0x5f, 0x73, 0x69, 0x70, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x76, 0x74, 0x65, 0x70, 0x53, 0x69, 0x70, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x0d, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x52, 0x0b, 0x76, 0x78,
	0x6c, 0x61, 0x6e, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x42, 0x14, 0x0a, 0x12, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x2a, 0x84, 0x01, 0x0a, 0x0e, 0x49, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x50,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x49,
	0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e,
	0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x03, 0x42, 0x12,
	0x5a, 0x10, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x45, 0x6f, 0x73, 0x53, 0x64, 0x6b, 0x52,
	0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ip_route_types_proto_rawDescOnce sync.Once
	file_ip_route_types_proto_rawDescData = file_ip_route_types_proto_rawDesc
)

func file_ip_route_types_proto_rawDescGZIP() []byte {
	file_ip_route_types_proto_rawDescOnce.Do(func() {
		file_ip_route_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_ip_route_types_proto_rawDescData)
	})
	return file_ip_route_types_proto_rawDescData
}

var file_ip_route_types_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ip_route_types_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_ip_route_types_proto_goTypes = []interface{}{
	(IpRouteActions)(0), // 0: eos.remote.IpRouteActions
	(*IpRouteKey)(nil),  // 1: eos.remote.IpRouteKey
	(*IpRoute)(nil),     // 2: eos.remote.IpRoute
	(*IpRouteVia)(nil),  // 3: eos.remote.IpRouteVia
	(*Prefix)(nil),      // 4: eos.remote.Prefix
	(*IntfId)(nil),      // 5: eos.remote.IntfId
}
var file_ip_route_types_proto_depIdxs = []int32{
	4, // 0: eos.remote.IpRouteKey.prefix:type_name -> eos.remote.Prefix
	1, // 1: eos.remote.IpRoute.key:type_name -> eos.remote.IpRouteKey
	1, // 2: eos.remote.IpRouteVia.key:type_name -> eos.remote.IpRouteKey
	5, // 3: eos.remote.IpRouteVia.intf_id:type_name -> eos.remote.IntfId
	5, // 4: eos.remote.IpRouteVia.vxlan_intf_id:type_name -> eos.remote.IntfId
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_ip_route_types_proto_init() }
func file_ip_route_types_proto_init() {
	if File_ip_route_types_proto != nil {
		return
	}
	file_intf_types_proto_init()
	file_ip_types_proto_init()
	file_rpc_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ip_route_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRouteVia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ip_route_types_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*IpRouteKey_Preference)(nil),
	}
	file_ip_route_types_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*IpRouteVia_MplsLabel)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ip_route_types_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ip_route_types_proto_goTypes,
		DependencyIndexes: file_ip_route_types_proto_depIdxs,
		EnumInfos:         file_ip_route_types_proto_enumTypes,
		MessageInfos:      file_ip_route_types_proto_msgTypes,
	}.Build()
	File_ip_route_types_proto = out.File
	file_ip_route_types_proto_rawDesc = nil
	file_ip_route_types_proto_goTypes = nil
	file_ip_route_types_proto_depIdxs = nil
}
