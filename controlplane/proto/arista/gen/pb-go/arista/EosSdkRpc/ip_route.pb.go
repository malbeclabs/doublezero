// Copyright (c) 2021 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: ip_route.proto

package EosSdkRpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IpRouteSetViasAction int32

const (
	// Convenience method to create routes and vias in a single
	// RPC call. This is intended for route creation but when used with an existing
	// route key will cause it to erase all previous vias associated with that key (at
	// the SDK level). In case of failure to add vias, the route shall be deleted.
	IpRouteSetViasAction_IP_ROUTE_SET_VIAS_CREATE IpRouteSetViasAction = 0
	// Choosing this action with an existing route will replace vias in a
	// make-before-break fashion within the RPC server, when possible. Vias that are
	// common between the old set and the new set should remain untouched. If the
	// operation fails, then the original via set is restored.
	IpRouteSetViasAction_IP_ROUTE_SET_VIAS_REPLACE IpRouteSetViasAction = 1
)

// Enum value maps for IpRouteSetViasAction.
var (
	IpRouteSetViasAction_name = map[int32]string{
		0: "IP_ROUTE_SET_VIAS_CREATE",
		1: "IP_ROUTE_SET_VIAS_REPLACE",
	}
	IpRouteSetViasAction_value = map[string]int32{
		"IP_ROUTE_SET_VIAS_CREATE":  0,
		"IP_ROUTE_SET_VIAS_REPLACE": 1,
	}
)

func (x IpRouteSetViasAction) Enum() *IpRouteSetViasAction {
	p := new(IpRouteSetViasAction)
	*p = x
	return p
}

func (x IpRouteSetViasAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpRouteSetViasAction) Descriptor() protoreflect.EnumDescriptor {
	return file_ip_route_proto_enumTypes[0].Descriptor()
}

func (IpRouteSetViasAction) Type() protoreflect.EnumType {
	return &file_ip_route_proto_enumTypes[0]
}

func (x IpRouteSetViasAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpRouteSetViasAction.Descriptor instead.
func (IpRouteSetViasAction) EnumDescriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{0}
}

type TagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TagRequest) Reset() {
	*x = TagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagRequest) ProtoMessage() {}

func (x *TagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagRequest.ProtoReflect.Descriptor instead.
func (*TagRequest) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{0}
}

type TagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The numeric value of the current tag
	Tag uint32 `protobuf:"varint,1,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *TagResponse) Reset() {
	*x = TagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagResponse) ProtoMessage() {}

func (x *TagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagResponse.ProtoReflect.Descriptor instead.
func (*TagResponse) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{1}
}

func (x *TagResponse) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

type TagIsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The numeric value of the tag
	Tag uint32 `protobuf:"varint,1,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *TagIsRequest) Reset() {
	*x = TagIsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagIsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagIsRequest) ProtoMessage() {}

func (x *TagIsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagIsRequest.ProtoReflect.Descriptor instead.
func (*TagIsRequest) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{2}
}

func (x *TagIsRequest) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

type TagIsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TagIsResponse) Reset() {
	*x = TagIsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagIsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagIsResponse) ProtoMessage() {}

func (x *TagIsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagIsResponse.ProtoReflect.Descriptor instead.
func (*TagIsResponse) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{3}
}

type IpRouteResyncInitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IpRouteResyncInitRequest) Reset() {
	*x = IpRouteResyncInitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRouteResyncInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRouteResyncInitRequest) ProtoMessage() {}

func (x *IpRouteResyncInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRouteResyncInitRequest.ProtoReflect.Descriptor instead.
func (*IpRouteResyncInitRequest) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{4}
}

type IpRouteResyncInitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IpRouteResyncInitResponse) Reset() {
	*x = IpRouteResyncInitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRouteResyncInitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRouteResyncInitResponse) ProtoMessage() {}

func (x *IpRouteResyncInitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRouteResyncInitResponse.ProtoReflect.Descriptor instead.
func (*IpRouteResyncInitResponse) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{5}
}

type IpRouteResyncCompleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IpRouteResyncCompleteRequest) Reset() {
	*x = IpRouteResyncCompleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRouteResyncCompleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRouteResyncCompleteRequest) ProtoMessage() {}

func (x *IpRouteResyncCompleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRouteResyncCompleteRequest.ProtoReflect.Descriptor instead.
func (*IpRouteResyncCompleteRequest) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{6}
}

type IpRouteResyncCompleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IpRouteResyncCompleteResponse) Reset() {
	*x = IpRouteResyncCompleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRouteResyncCompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRouteResyncCompleteResponse) ProtoMessage() {}

func (x *IpRouteResyncCompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRouteResyncCompleteResponse.ProtoReflect.Descriptor instead.
func (*IpRouteResyncCompleteResponse) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{7}
}

// *
// Setting more than one field below will apply AND logic. With an exception
// for vrf_name, leaving filters unset disables them. In case of vrf_name,
// if unset, it reverts to the default VRF, in accordance with all SDK APIs.
// A special value "all" has been introduced to allow this function to return
// routes from all VRFs, in the same fashion as CLI commands.
//
// In the presence of multiple vias, a route is selected if any of the
// underlying vias matches the criteria.
type IpRoutesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filters response by VRF Name.
	VrfName string `protobuf:"bytes,1,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
	// Filters response by vtep address.
	VtepAddr []byte `protobuf:"bytes,2,opt,name=vtep_addr,json=vtepAddr,proto3" json:"vtep_addr,omitempty"`
	// Filters responses by VNI.
	Vni uint32 `protobuf:"varint,3,opt,name=vni,proto3" json:"vni,omitempty"`
	// Filters responses by VXLAN Interface.
	VxlanIntfId *IntfId `protobuf:"bytes,4,opt,name=vxlan_intf_id,json=vxlanIntfId,proto3" json:"vxlan_intf_id,omitempty"`
	// If true, the stream response will also include vias for every reported path.
	ReportVias bool `protobuf:"varint,5,opt,name=report_vias,json=reportVias,proto3" json:"report_vias,omitempty"`
	// If true, the stream response will contain only vias if
	// `report_vias` is true, and be empty otherwise.
	SuppressRoutes bool `protobuf:"varint,6,opt,name=suppress_routes,json=suppressRoutes,proto3" json:"suppress_routes,omitempty"`
	// If true, each route and all its vias will be streamed in a single message.
	// When this flag is set to true, 'report_vias' and 'suppress_routes' are ignored.
	PackedRouteVias bool `protobuf:"varint,7,opt,name=packed_route_vias,json=packedRouteVias,proto3" json:"packed_route_vias,omitempty"`
}

func (x *IpRoutesRequest) Reset() {
	*x = IpRoutesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRoutesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRoutesRequest) ProtoMessage() {}

func (x *IpRoutesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRoutesRequest.ProtoReflect.Descriptor instead.
func (*IpRoutesRequest) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{8}
}

func (x *IpRoutesRequest) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *IpRoutesRequest) GetVtepAddr() []byte {
	if x != nil {
		return x.VtepAddr
	}
	return nil
}

func (x *IpRoutesRequest) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *IpRoutesRequest) GetVxlanIntfId() *IntfId {
	if x != nil {
		return x.VxlanIntfId
	}
	return nil
}

func (x *IpRoutesRequest) GetReportVias() bool {
	if x != nil {
		return x.ReportVias
	}
	return false
}

func (x *IpRoutesRequest) GetSuppressRoutes() bool {
	if x != nil {
		return x.SuppressRoutes
	}
	return false
}

func (x *IpRoutesRequest) GetPackedRouteVias() bool {
	if x != nil {
		return x.PackedRouteVias
	}
	return false
}

type IpRoutesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Item:
	//
	//	*IpRoutesResponse_Response
	//	*IpRoutesResponse_Via
	Item isIpRoutesResponse_Item `protobuf_oneof:"item"`
	Vias []*IpRouteVia           `protobuf:"bytes,3,rep,name=vias,proto3" json:"vias,omitempty"`
}

func (x *IpRoutesResponse) Reset() {
	*x = IpRoutesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRoutesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRoutesResponse) ProtoMessage() {}

func (x *IpRoutesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRoutesResponse.ProtoReflect.Descriptor instead.
func (*IpRoutesResponse) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{9}
}

func (m *IpRoutesResponse) GetItem() isIpRoutesResponse_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (x *IpRoutesResponse) GetResponse() *IpRoute {
	if x, ok := x.GetItem().(*IpRoutesResponse_Response); ok {
		return x.Response
	}
	return nil
}

func (x *IpRoutesResponse) GetVia() *IpRouteVia {
	if x, ok := x.GetItem().(*IpRoutesResponse_Via); ok {
		return x.Via
	}
	return nil
}

func (x *IpRoutesResponse) GetVias() []*IpRouteVia {
	if x != nil {
		return x.Vias
	}
	return nil
}

type isIpRoutesResponse_Item interface {
	isIpRoutesResponse_Item()
}

type IpRoutesResponse_Response struct {
	// The configured static route.
	Response *IpRoute `protobuf:"bytes,1,opt,name=response,proto3,oneof"`
}

type IpRoutesResponse_Via struct {
	// VIA of a configured static route.
	Via *IpRouteVia `protobuf:"bytes,2,opt,name=via,proto3,oneof"`
}

func (*IpRoutesResponse_Response) isIpRoutesResponse_Item() {}

func (*IpRoutesResponse_Via) isIpRoutesResponse_Item() {}

type IpRouteViasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The route to query vias for.
	Key *IpRouteKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Optonal: the VRF where the route is present.
	VrfName string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
}

func (x *IpRouteViasRequest) Reset() {
	*x = IpRouteViasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRouteViasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRouteViasRequest) ProtoMessage() {}

func (x *IpRouteViasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRouteViasRequest.ProtoReflect.Descriptor instead.
func (*IpRouteViasRequest) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{10}
}

func (x *IpRouteViasRequest) GetKey() *IpRouteKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *IpRouteViasRequest) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

type IpRouteViasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The configured via for the given route.
	Response *IpRouteVia `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *IpRouteViasResponse) Reset() {
	*x = IpRouteViasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRouteViasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRouteViasResponse) ProtoMessage() {}

func (x *IpRouteViasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRouteViasResponse.ProtoReflect.Descriptor instead.
func (*IpRouteViasResponse) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{11}
}

func (x *IpRouteViasResponse) GetResponse() *IpRouteVia {
	if x != nil {
		return x.Response
	}
	return nil
}

type IpRouteExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The route to query.
	Key *IpRouteKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Optional: the VRF where the route is present.
	VrfName string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
}

func (x *IpRouteExistsRequest) Reset() {
	*x = IpRouteExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRouteExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRouteExistsRequest) ProtoMessage() {}

func (x *IpRouteExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRouteExistsRequest.ProtoReflect.Descriptor instead.
func (*IpRouteExistsRequest) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{12}
}

func (x *IpRouteExistsRequest) GetKey() *IpRouteKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *IpRouteExistsRequest) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

type IpRouteExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if the route exists, otherwise False.
	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *IpRouteExistsResponse) Reset() {
	*x = IpRouteExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRouteExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRouteExistsResponse) ProtoMessage() {}

func (x *IpRouteExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRouteExistsResponse.ProtoReflect.Descriptor instead.
func (*IpRouteExistsResponse) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{13}
}

func (x *IpRouteExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type IpRouteViaExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The via to query, including the route key.
	Via *IpRouteVia `protobuf:"bytes,1,opt,name=via,proto3" json:"via,omitempty"`
	// Optional: the VRF where the via is present.
	VrfName string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
}

func (x *IpRouteViaExistsRequest) Reset() {
	*x = IpRouteViaExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRouteViaExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRouteViaExistsRequest) ProtoMessage() {}

func (x *IpRouteViaExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRouteViaExistsRequest.ProtoReflect.Descriptor instead.
func (*IpRouteViaExistsRequest) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{14}
}

func (x *IpRouteViaExistsRequest) GetVia() *IpRouteVia {
	if x != nil {
		return x.Via
	}
	return nil
}

func (x *IpRouteViaExistsRequest) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

type IpRouteViaExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if the via exists, otherwise False.
	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *IpRouteViaExistsResponse) Reset() {
	*x = IpRouteViaExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRouteViaExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRouteViaExistsResponse) ProtoMessage() {}

func (x *IpRouteViaExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRouteViaExistsResponse.ProtoReflect.Descriptor instead.
func (*IpRouteViaExistsResponse) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{15}
}

func (x *IpRouteViaExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type IpRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The route to query.
	Key *IpRouteKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Optional: the VRF where the route is present.
	VrfName string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
}

func (x *IpRouteRequest) Reset() {
	*x = IpRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRouteRequest) ProtoMessage() {}

func (x *IpRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRouteRequest.ProtoReflect.Descriptor instead.
func (*IpRouteRequest) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{16}
}

func (x *IpRouteRequest) GetKey() *IpRouteKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *IpRouteRequest) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

type IpRouteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If a match is found.
	Response *IpRoute `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *IpRouteResponse) Reset() {
	*x = IpRouteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRouteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRouteResponse) ProtoMessage() {}

func (x *IpRouteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRouteResponse.ProtoReflect.Descriptor instead.
func (*IpRouteResponse) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{17}
}

func (x *IpRouteResponse) GetResponse() *IpRoute {
	if x != nil {
		return x.Response
	}
	return nil
}

type IpRouteSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The route to set.
	Route *IpRoute `protobuf:"bytes,1,opt,name=route,proto3" json:"route,omitempty"`
	// Types that are assignable to AdditionalArg:
	//
	//	*IpRouteSetRequest_Action
	//	*IpRouteSetRequest_VrfName
	AdditionalArg isIpRouteSetRequest_AdditionalArg `protobuf_oneof:"additional_arg"`
	// Optional: number of IpRouteVia messages to be created
	// along with the route. If any of the vias fail, the route will be
	// deleted at once and the error returned will be the reason for the
	// via creation failure.
	Vias []*IpRouteVia `protobuf:"bytes,4,rep,name=vias,proto3" json:"vias,omitempty"`
	// defines how vias should be replaced, when applicable.
	ViasAction IpRouteSetViasAction `protobuf:"varint,5,opt,name=vias_action,json=viasAction,proto3,enum=eos.remote.IpRouteSetViasAction" json:"vias_action,omitempty"`
}

func (x *IpRouteSetRequest) Reset() {
	*x = IpRouteSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRouteSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRouteSetRequest) ProtoMessage() {}

func (x *IpRouteSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRouteSetRequest.ProtoReflect.Descriptor instead.
func (*IpRouteSetRequest) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{18}
}

func (x *IpRouteSetRequest) GetRoute() *IpRoute {
	if x != nil {
		return x.Route
	}
	return nil
}

func (m *IpRouteSetRequest) GetAdditionalArg() isIpRouteSetRequest_AdditionalArg {
	if m != nil {
		return m.AdditionalArg
	}
	return nil
}

func (x *IpRouteSetRequest) GetAction() IpRouteActions {
	if x, ok := x.GetAdditionalArg().(*IpRouteSetRequest_Action); ok {
		return x.Action
	}
	return IpRouteActions_IP_ROUTE_ACTION_NULL
}

func (x *IpRouteSetRequest) GetVrfName() string {
	if x, ok := x.GetAdditionalArg().(*IpRouteSetRequest_VrfName); ok {
		return x.VrfName
	}
	return ""
}

func (x *IpRouteSetRequest) GetVias() []*IpRouteVia {
	if x != nil {
		return x.Vias
	}
	return nil
}

func (x *IpRouteSetRequest) GetViasAction() IpRouteSetViasAction {
	if x != nil {
		return x.ViasAction
	}
	return IpRouteSetViasAction_IP_ROUTE_SET_VIAS_CREATE
}

type isIpRouteSetRequest_AdditionalArg interface {
	isIpRouteSetRequest_AdditionalArg()
}

type IpRouteSetRequest_Action struct {
	// The type of vias to be attached.
	// Used for more efficient route configuration.
	Action IpRouteActions `protobuf:"varint,2,opt,name=action,proto3,enum=eos.remote.IpRouteActions,oneof"`
}

type IpRouteSetRequest_VrfName struct {
	// The VRF where the route will be present.
	VrfName string `protobuf:"bytes,3,opt,name=vrf_name,json=vrfName,proto3,oneof"`
}

func (*IpRouteSetRequest_Action) isIpRouteSetRequest_AdditionalArg() {}

func (*IpRouteSetRequest_VrfName) isIpRouteSetRequest_AdditionalArg() {}

type IpRouteSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IpRouteSetResponse) Reset() {
	*x = IpRouteSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRouteSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRouteSetResponse) ProtoMessage() {}

func (x *IpRouteSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRouteSetResponse.ProtoReflect.Descriptor instead.
func (*IpRouteSetResponse) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{19}
}

type BulkIpRouteSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of IpRouteSetRequest.
	Requests []*IpRouteSetRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkIpRouteSetRequest) Reset() {
	*x = BulkIpRouteSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkIpRouteSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkIpRouteSetRequest) ProtoMessage() {}

func (x *BulkIpRouteSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkIpRouteSetRequest.ProtoReflect.Descriptor instead.
func (*BulkIpRouteSetRequest) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{20}
}

func (x *BulkIpRouteSetRequest) GetRequests() []*IpRouteSetRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BulkIpRouteSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of successfully set routes.
	Processed uint64 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	// Success or error details in case of failure.
	Status *RpcResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BulkIpRouteSetResponse) Reset() {
	*x = BulkIpRouteSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkIpRouteSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkIpRouteSetResponse) ProtoMessage() {}

func (x *BulkIpRouteSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkIpRouteSetResponse.ProtoReflect.Descriptor instead.
func (*BulkIpRouteSetResponse) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{21}
}

func (x *BulkIpRouteSetResponse) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *BulkIpRouteSetResponse) GetStatus() *RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type IpRouteDelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The route to delete.
	Key *IpRouteKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Optional: the VRF where the route is present.
	VrfName string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
}

func (x *IpRouteDelRequest) Reset() {
	*x = IpRouteDelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRouteDelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRouteDelRequest) ProtoMessage() {}

func (x *IpRouteDelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRouteDelRequest.ProtoReflect.Descriptor instead.
func (*IpRouteDelRequest) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{22}
}

func (x *IpRouteDelRequest) GetKey() *IpRouteKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *IpRouteDelRequest) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

type IpRouteDelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IpRouteDelResponse) Reset() {
	*x = IpRouteDelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRouteDelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRouteDelResponse) ProtoMessage() {}

func (x *IpRouteDelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRouteDelResponse.ProtoReflect.Descriptor instead.
func (*IpRouteDelResponse) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{23}
}

type BulkIpRouteDelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of IpRouteDelRequest.
	Requests []*IpRouteDelRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkIpRouteDelRequest) Reset() {
	*x = BulkIpRouteDelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkIpRouteDelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkIpRouteDelRequest) ProtoMessage() {}

func (x *BulkIpRouteDelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkIpRouteDelRequest.ProtoReflect.Descriptor instead.
func (*BulkIpRouteDelRequest) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{24}
}

func (x *BulkIpRouteDelRequest) GetRequests() []*IpRouteDelRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BulkIpRouteDelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of successfully deleted routes.
	Processed uint64 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	// Success or error details in case of failure.
	Status *RpcResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BulkIpRouteDelResponse) Reset() {
	*x = BulkIpRouteDelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkIpRouteDelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkIpRouteDelResponse) ProtoMessage() {}

func (x *BulkIpRouteDelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkIpRouteDelResponse.ProtoReflect.Descriptor instead.
func (*BulkIpRouteDelResponse) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{25}
}

func (x *BulkIpRouteDelResponse) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *BulkIpRouteDelResponse) GetStatus() *RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type IpRouteViaSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The via to set, including the route key.
	Via *IpRouteVia `protobuf:"bytes,1,opt,name=via,proto3" json:"via,omitempty"`
	// Optional: the VRF where the via should be present.
	VrfName string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
}

func (x *IpRouteViaSetRequest) Reset() {
	*x = IpRouteViaSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRouteViaSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRouteViaSetRequest) ProtoMessage() {}

func (x *IpRouteViaSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRouteViaSetRequest.ProtoReflect.Descriptor instead.
func (*IpRouteViaSetRequest) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{26}
}

func (x *IpRouteViaSetRequest) GetVia() *IpRouteVia {
	if x != nil {
		return x.Via
	}
	return nil
}

func (x *IpRouteViaSetRequest) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

type IpRouteViaSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IpRouteViaSetResponse) Reset() {
	*x = IpRouteViaSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRouteViaSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRouteViaSetResponse) ProtoMessage() {}

func (x *IpRouteViaSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRouteViaSetResponse.ProtoReflect.Descriptor instead.
func (*IpRouteViaSetResponse) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{27}
}

type BulkIpRouteViaSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of IpRouteViaSetRequest.
	Requests []*IpRouteViaSetRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkIpRouteViaSetRequest) Reset() {
	*x = BulkIpRouteViaSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkIpRouteViaSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkIpRouteViaSetRequest) ProtoMessage() {}

func (x *BulkIpRouteViaSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkIpRouteViaSetRequest.ProtoReflect.Descriptor instead.
func (*BulkIpRouteViaSetRequest) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{28}
}

func (x *BulkIpRouteViaSetRequest) GetRequests() []*IpRouteViaSetRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BulkIpRouteViaSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of successfully set vias.
	Processed uint64 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	// Success or error details in case of failure.
	Status *RpcResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BulkIpRouteViaSetResponse) Reset() {
	*x = BulkIpRouteViaSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkIpRouteViaSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkIpRouteViaSetResponse) ProtoMessage() {}

func (x *BulkIpRouteViaSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkIpRouteViaSetResponse.ProtoReflect.Descriptor instead.
func (*BulkIpRouteViaSetResponse) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{29}
}

func (x *BulkIpRouteViaSetResponse) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *BulkIpRouteViaSetResponse) GetStatus() *RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type IpRouteViaDelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The via to delete, including the route key.
	Via *IpRouteVia `protobuf:"bytes,1,opt,name=via,proto3" json:"via,omitempty"`
	// Optional: the VRF where the via is present.
	VrfName string `protobuf:"bytes,2,opt,name=vrf_name,json=vrfName,proto3" json:"vrf_name,omitempty"`
}

func (x *IpRouteViaDelRequest) Reset() {
	*x = IpRouteViaDelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRouteViaDelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRouteViaDelRequest) ProtoMessage() {}

func (x *IpRouteViaDelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRouteViaDelRequest.ProtoReflect.Descriptor instead.
func (*IpRouteViaDelRequest) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{30}
}

func (x *IpRouteViaDelRequest) GetVia() *IpRouteVia {
	if x != nil {
		return x.Via
	}
	return nil
}

func (x *IpRouteViaDelRequest) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

type IpRouteViaDelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IpRouteViaDelResponse) Reset() {
	*x = IpRouteViaDelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpRouteViaDelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpRouteViaDelResponse) ProtoMessage() {}

func (x *IpRouteViaDelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpRouteViaDelResponse.ProtoReflect.Descriptor instead.
func (*IpRouteViaDelResponse) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{31}
}

type BulkIpRouteViaDelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of IpRouteViaDelRequest.
	Requests []*IpRouteViaDelRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkIpRouteViaDelRequest) Reset() {
	*x = BulkIpRouteViaDelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkIpRouteViaDelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkIpRouteViaDelRequest) ProtoMessage() {}

func (x *BulkIpRouteViaDelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkIpRouteViaDelRequest.ProtoReflect.Descriptor instead.
func (*BulkIpRouteViaDelRequest) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{32}
}

func (x *BulkIpRouteViaDelRequest) GetRequests() []*IpRouteViaDelRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BulkIpRouteViaDelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of successfully deleted vias.
	Processed uint64 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	// Success or error details in case of failure.
	Status *RpcResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BulkIpRouteViaDelResponse) Reset() {
	*x = BulkIpRouteViaDelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_route_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkIpRouteViaDelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkIpRouteViaDelResponse) ProtoMessage() {}

func (x *BulkIpRouteViaDelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ip_route_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkIpRouteViaDelResponse.ProtoReflect.Descriptor instead.
func (*BulkIpRouteViaDelResponse) Descriptor() ([]byte, []int) {
	return file_ip_route_proto_rawDescGZIP(), []int{33}
}

func (x *BulkIpRouteViaDelResponse) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *BulkIpRouteViaDelResponse) GetStatus() *RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_ip_route_proto protoreflect.FileDescriptor

var file_ip_route_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x69, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0a, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x1a, 0x0f, 0x72, 0x70,
	0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x69,
	0x6e, 0x74, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x69, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0c, 0x0a, 0x0a, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x1f, 0x0a, 0x0b, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x22, 0x20, 0x0a, 0x0c, 0x54, 0x61, 0x67, 0x49, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x0f, 0x0a, 0x0d, 0x54, 0x61, 0x67, 0x49, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x0a, 0x18, 0x49, 0x70, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1e, 0x0a, 0x1c, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x79, 0x6e,
	0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x1f, 0x0a, 0x1d, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x79, 0x6e,
	0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x89, 0x02, 0x0a, 0x0f, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x76, 0x74, 0x65, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x76, 0x74, 0x65, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x76, 0x6e, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69, 0x12,
	0x36, 0x0a, 0x0d, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x52, 0x0b, 0x76, 0x78, 0x6c, 0x61,
	0x6e, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x76, 0x69, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x56, 0x69, 0x61, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x76, 0x69, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x73, 0x22, 0xa5, 0x01,
	0x0a, 0x10, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x76, 0x69, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x48, 0x00, 0x52, 0x03, 0x76, 0x69,
	0x61, 0x12, 0x2a, 0x0a, 0x04, 0x76, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x52, 0x04, 0x76, 0x69, 0x61, 0x73, 0x42, 0x06, 0x0a,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x59, 0x0a, 0x12, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x56, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x49, 0x0a, 0x13, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69,
	0x61, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0x0a, 0x14, 0x49,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2f, 0x0a, 0x15, 0x49, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x5e, 0x0a, 0x17, 0x49, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x76, 0x69, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x52, 0x03, 0x76, 0x69, 0x61, 0x12, 0x19,
	0x0a, 0x08, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x18, 0x49, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x55, 0x0a,
	0x0e, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x72, 0x66,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x72, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x0f, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x92, 0x02, 0x0a, 0x11, 0x49, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x08, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x04,
	0x76, 0x69, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56,
	0x69, 0x61, 0x52, 0x04, 0x76, 0x69, 0x61, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x76, 0x69, 0x61, 0x73,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x53, 0x65, 0x74, 0x56, 0x69, 0x61, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x76, 0x69, 0x61, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x72, 0x67, 0x22, 0x14, 0x0a,
	0x12, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x52, 0x0a, 0x15, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x70, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x6d, 0x0a, 0x16, 0x42, 0x75, 0x6c, 0x6b, 0x49,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12,
	0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x52, 0x70, 0x63,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x58, 0x0a, 0x11, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x14, 0x0a, 0x12, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0x0a, 0x15, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x39, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x6d, 0x0a, 0x16, 0x42, 0x75,
	0x6c, 0x6b, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5b, 0x0a, 0x14, 0x49, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x28, 0x0a, 0x03, 0x76, 0x69, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x52, 0x03, 0x76, 0x69, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x76,
	0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x56, 0x69, 0x61, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x58, 0x0a, 0x18, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69,
	0x61, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x56, 0x69, 0x61, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x70, 0x0a, 0x19, 0x42, 0x75, 0x6c,
	0x6b, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5b, 0x0a, 0x14, 0x49,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x76, 0x69, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x52, 0x03, 0x76, 0x69, 0x61, 0x12, 0x19, 0x0a,
	0x08, 0x76, 0x72, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x72, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x49, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x58, 0x0a, 0x18, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x56, 0x69, 0x61, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x70, 0x0a, 0x19, 0x42,
	0x75, 0x6c, 0x6b, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x44, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x53, 0x0a,
	0x14, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x74, 0x56, 0x69, 0x61, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x49, 0x41, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x50, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x56, 0x49, 0x41, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45,
	0x10, 0x01, 0x32, 0xe1, 0x0b, 0x0a, 0x11, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x67,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x12,
	0x16, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3f, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x73, 0x12, 0x18, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x49, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x49, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e,
	0x69, 0x74, 0x12, 0x24, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x79, 0x6e, 0x63, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x68, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x09, 0x69,
	0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x54, 0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x76, 0x69, 0x61, 0x73, 0x12, 0x1e, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x58, 0x0a,
	0x0f, 0x69, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x12, 0x20, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x13, 0x69, 0x70, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x76, 0x69, 0x61, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x23,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x08, 0x69,
	0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x12, 0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x11, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x69, 0x70, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4f, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x65,
	0x6c, 0x12, 0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5c, 0x0a, 0x11, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x12, 0x21, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x59, 0x0a, 0x10, 0x69, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x69, 0x61,
	0x5f, 0x73, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x15, 0x62,
	0x75, 0x6c, 0x6b, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x76, 0x69, 0x61,
	0x5f, 0x73, 0x65, 0x74, 0x12, 0x24, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x10, 0x69, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x76, 0x69, 0x61, 0x5f, 0x64, 0x65, 0x6c, 0x12, 0x20, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x44,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69,
	0x61, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66,
	0x0a, 0x15, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x69, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x76, 0x69, 0x61, 0x5f, 0x64, 0x65, 0x6c, 0x12, 0x24, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x56, 0x69, 0x61, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49,
	0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x12, 0x5a, 0x10, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2f, 0x45, 0x6f, 0x73, 0x53, 0x64, 0x6b, 0x52, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_ip_route_proto_rawDescOnce sync.Once
	file_ip_route_proto_rawDescData = file_ip_route_proto_rawDesc
)

func file_ip_route_proto_rawDescGZIP() []byte {
	file_ip_route_proto_rawDescOnce.Do(func() {
		file_ip_route_proto_rawDescData = protoimpl.X.CompressGZIP(file_ip_route_proto_rawDescData)
	})
	return file_ip_route_proto_rawDescData
}

var file_ip_route_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ip_route_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_ip_route_proto_goTypes = []interface{}{
	(IpRouteSetViasAction)(0),             // 0: eos.remote.IpRouteSetViasAction
	(*TagRequest)(nil),                    // 1: eos.remote.TagRequest
	(*TagResponse)(nil),                   // 2: eos.remote.TagResponse
	(*TagIsRequest)(nil),                  // 3: eos.remote.TagIsRequest
	(*TagIsResponse)(nil),                 // 4: eos.remote.TagIsResponse
	(*IpRouteResyncInitRequest)(nil),      // 5: eos.remote.IpRouteResyncInitRequest
	(*IpRouteResyncInitResponse)(nil),     // 6: eos.remote.IpRouteResyncInitResponse
	(*IpRouteResyncCompleteRequest)(nil),  // 7: eos.remote.IpRouteResyncCompleteRequest
	(*IpRouteResyncCompleteResponse)(nil), // 8: eos.remote.IpRouteResyncCompleteResponse
	(*IpRoutesRequest)(nil),               // 9: eos.remote.IpRoutesRequest
	(*IpRoutesResponse)(nil),              // 10: eos.remote.IpRoutesResponse
	(*IpRouteViasRequest)(nil),            // 11: eos.remote.IpRouteViasRequest
	(*IpRouteViasResponse)(nil),           // 12: eos.remote.IpRouteViasResponse
	(*IpRouteExistsRequest)(nil),          // 13: eos.remote.IpRouteExistsRequest
	(*IpRouteExistsResponse)(nil),         // 14: eos.remote.IpRouteExistsResponse
	(*IpRouteViaExistsRequest)(nil),       // 15: eos.remote.IpRouteViaExistsRequest
	(*IpRouteViaExistsResponse)(nil),      // 16: eos.remote.IpRouteViaExistsResponse
	(*IpRouteRequest)(nil),                // 17: eos.remote.IpRouteRequest
	(*IpRouteResponse)(nil),               // 18: eos.remote.IpRouteResponse
	(*IpRouteSetRequest)(nil),             // 19: eos.remote.IpRouteSetRequest
	(*IpRouteSetResponse)(nil),            // 20: eos.remote.IpRouteSetResponse
	(*BulkIpRouteSetRequest)(nil),         // 21: eos.remote.BulkIpRouteSetRequest
	(*BulkIpRouteSetResponse)(nil),        // 22: eos.remote.BulkIpRouteSetResponse
	(*IpRouteDelRequest)(nil),             // 23: eos.remote.IpRouteDelRequest
	(*IpRouteDelResponse)(nil),            // 24: eos.remote.IpRouteDelResponse
	(*BulkIpRouteDelRequest)(nil),         // 25: eos.remote.BulkIpRouteDelRequest
	(*BulkIpRouteDelResponse)(nil),        // 26: eos.remote.BulkIpRouteDelResponse
	(*IpRouteViaSetRequest)(nil),          // 27: eos.remote.IpRouteViaSetRequest
	(*IpRouteViaSetResponse)(nil),         // 28: eos.remote.IpRouteViaSetResponse
	(*BulkIpRouteViaSetRequest)(nil),      // 29: eos.remote.BulkIpRouteViaSetRequest
	(*BulkIpRouteViaSetResponse)(nil),     // 30: eos.remote.BulkIpRouteViaSetResponse
	(*IpRouteViaDelRequest)(nil),          // 31: eos.remote.IpRouteViaDelRequest
	(*IpRouteViaDelResponse)(nil),         // 32: eos.remote.IpRouteViaDelResponse
	(*BulkIpRouteViaDelRequest)(nil),      // 33: eos.remote.BulkIpRouteViaDelRequest
	(*BulkIpRouteViaDelResponse)(nil),     // 34: eos.remote.BulkIpRouteViaDelResponse
	(*IntfId)(nil),                        // 35: eos.remote.IntfId
	(*IpRoute)(nil),                       // 36: eos.remote.IpRoute
	(*IpRouteVia)(nil),                    // 37: eos.remote.IpRouteVia
	(*IpRouteKey)(nil),                    // 38: eos.remote.IpRouteKey
	(IpRouteActions)(0),                   // 39: eos.remote.IpRouteActions
	(*RpcResponseStatus)(nil),             // 40: eos.remote.RpcResponseStatus
}
var file_ip_route_proto_depIdxs = []int32{
	35, // 0: eos.remote.IpRoutesRequest.vxlan_intf_id:type_name -> eos.remote.IntfId
	36, // 1: eos.remote.IpRoutesResponse.response:type_name -> eos.remote.IpRoute
	37, // 2: eos.remote.IpRoutesResponse.via:type_name -> eos.remote.IpRouteVia
	37, // 3: eos.remote.IpRoutesResponse.vias:type_name -> eos.remote.IpRouteVia
	38, // 4: eos.remote.IpRouteViasRequest.key:type_name -> eos.remote.IpRouteKey
	37, // 5: eos.remote.IpRouteViasResponse.response:type_name -> eos.remote.IpRouteVia
	38, // 6: eos.remote.IpRouteExistsRequest.key:type_name -> eos.remote.IpRouteKey
	37, // 7: eos.remote.IpRouteViaExistsRequest.via:type_name -> eos.remote.IpRouteVia
	38, // 8: eos.remote.IpRouteRequest.key:type_name -> eos.remote.IpRouteKey
	36, // 9: eos.remote.IpRouteResponse.response:type_name -> eos.remote.IpRoute
	36, // 10: eos.remote.IpRouteSetRequest.route:type_name -> eos.remote.IpRoute
	39, // 11: eos.remote.IpRouteSetRequest.action:type_name -> eos.remote.IpRouteActions
	37, // 12: eos.remote.IpRouteSetRequest.vias:type_name -> eos.remote.IpRouteVia
	0,  // 13: eos.remote.IpRouteSetRequest.vias_action:type_name -> eos.remote.IpRouteSetViasAction
	19, // 14: eos.remote.BulkIpRouteSetRequest.requests:type_name -> eos.remote.IpRouteSetRequest
	40, // 15: eos.remote.BulkIpRouteSetResponse.status:type_name -> eos.remote.RpcResponseStatus
	38, // 16: eos.remote.IpRouteDelRequest.key:type_name -> eos.remote.IpRouteKey
	23, // 17: eos.remote.BulkIpRouteDelRequest.requests:type_name -> eos.remote.IpRouteDelRequest
	40, // 18: eos.remote.BulkIpRouteDelResponse.status:type_name -> eos.remote.RpcResponseStatus
	37, // 19: eos.remote.IpRouteViaSetRequest.via:type_name -> eos.remote.IpRouteVia
	27, // 20: eos.remote.BulkIpRouteViaSetRequest.requests:type_name -> eos.remote.IpRouteViaSetRequest
	40, // 21: eos.remote.BulkIpRouteViaSetResponse.status:type_name -> eos.remote.RpcResponseStatus
	37, // 22: eos.remote.IpRouteViaDelRequest.via:type_name -> eos.remote.IpRouteVia
	31, // 23: eos.remote.BulkIpRouteViaDelRequest.requests:type_name -> eos.remote.IpRouteViaDelRequest
	40, // 24: eos.remote.BulkIpRouteViaDelResponse.status:type_name -> eos.remote.RpcResponseStatus
	1,  // 25: eos.remote.IpRouteMgrService.tag:input_type -> eos.remote.TagRequest
	3,  // 26: eos.remote.IpRouteMgrService.tag_is:input_type -> eos.remote.TagIsRequest
	5,  // 27: eos.remote.IpRouteMgrService.resync_init:input_type -> eos.remote.IpRouteResyncInitRequest
	7,  // 28: eos.remote.IpRouteMgrService.resync_complete:input_type -> eos.remote.IpRouteResyncCompleteRequest
	9,  // 29: eos.remote.IpRouteMgrService.ip_routes:input_type -> eos.remote.IpRoutesRequest
	11, // 30: eos.remote.IpRouteMgrService.ip_route_vias:input_type -> eos.remote.IpRouteViasRequest
	13, // 31: eos.remote.IpRouteMgrService.ip_route_exists:input_type -> eos.remote.IpRouteExistsRequest
	15, // 32: eos.remote.IpRouteMgrService.ip_route_via_exists:input_type -> eos.remote.IpRouteViaExistsRequest
	17, // 33: eos.remote.IpRouteMgrService.ip_route:input_type -> eos.remote.IpRouteRequest
	19, // 34: eos.remote.IpRouteMgrService.ip_route_set:input_type -> eos.remote.IpRouteSetRequest
	21, // 35: eos.remote.IpRouteMgrService.bulk_ip_route_set:input_type -> eos.remote.BulkIpRouteSetRequest
	23, // 36: eos.remote.IpRouteMgrService.ip_route_del:input_type -> eos.remote.IpRouteDelRequest
	25, // 37: eos.remote.IpRouteMgrService.bulk_ip_route_del:input_type -> eos.remote.BulkIpRouteDelRequest
	27, // 38: eos.remote.IpRouteMgrService.ip_route_via_set:input_type -> eos.remote.IpRouteViaSetRequest
	29, // 39: eos.remote.IpRouteMgrService.bulk_ip_route_via_set:input_type -> eos.remote.BulkIpRouteViaSetRequest
	31, // 40: eos.remote.IpRouteMgrService.ip_route_via_del:input_type -> eos.remote.IpRouteViaDelRequest
	33, // 41: eos.remote.IpRouteMgrService.bulk_ip_route_via_del:input_type -> eos.remote.BulkIpRouteViaDelRequest
	2,  // 42: eos.remote.IpRouteMgrService.tag:output_type -> eos.remote.TagResponse
	4,  // 43: eos.remote.IpRouteMgrService.tag_is:output_type -> eos.remote.TagIsResponse
	6,  // 44: eos.remote.IpRouteMgrService.resync_init:output_type -> eos.remote.IpRouteResyncInitResponse
	8,  // 45: eos.remote.IpRouteMgrService.resync_complete:output_type -> eos.remote.IpRouteResyncCompleteResponse
	10, // 46: eos.remote.IpRouteMgrService.ip_routes:output_type -> eos.remote.IpRoutesResponse
	12, // 47: eos.remote.IpRouteMgrService.ip_route_vias:output_type -> eos.remote.IpRouteViasResponse
	14, // 48: eos.remote.IpRouteMgrService.ip_route_exists:output_type -> eos.remote.IpRouteExistsResponse
	16, // 49: eos.remote.IpRouteMgrService.ip_route_via_exists:output_type -> eos.remote.IpRouteViaExistsResponse
	18, // 50: eos.remote.IpRouteMgrService.ip_route:output_type -> eos.remote.IpRouteResponse
	20, // 51: eos.remote.IpRouteMgrService.ip_route_set:output_type -> eos.remote.IpRouteSetResponse
	22, // 52: eos.remote.IpRouteMgrService.bulk_ip_route_set:output_type -> eos.remote.BulkIpRouteSetResponse
	24, // 53: eos.remote.IpRouteMgrService.ip_route_del:output_type -> eos.remote.IpRouteDelResponse
	26, // 54: eos.remote.IpRouteMgrService.bulk_ip_route_del:output_type -> eos.remote.BulkIpRouteDelResponse
	28, // 55: eos.remote.IpRouteMgrService.ip_route_via_set:output_type -> eos.remote.IpRouteViaSetResponse
	30, // 56: eos.remote.IpRouteMgrService.bulk_ip_route_via_set:output_type -> eos.remote.BulkIpRouteViaSetResponse
	32, // 57: eos.remote.IpRouteMgrService.ip_route_via_del:output_type -> eos.remote.IpRouteViaDelResponse
	34, // 58: eos.remote.IpRouteMgrService.bulk_ip_route_via_del:output_type -> eos.remote.BulkIpRouteViaDelResponse
	42, // [42:59] is the sub-list for method output_type
	25, // [25:42] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_ip_route_proto_init() }
func file_ip_route_proto_init() {
	if File_ip_route_proto != nil {
		return
	}
	file_rpc_types_proto_init()
	file_intf_types_proto_init()
	file_ip_route_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ip_route_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagIsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagIsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRouteResyncInitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRouteResyncInitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRouteResyncCompleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRouteResyncCompleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRoutesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRoutesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRouteViasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRouteViasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRouteExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRouteExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRouteViaExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRouteViaExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRouteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRouteSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRouteSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkIpRouteSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkIpRouteSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRouteDelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRouteDelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkIpRouteDelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkIpRouteDelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRouteViaSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRouteViaSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkIpRouteViaSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkIpRouteViaSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRouteViaDelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpRouteViaDelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkIpRouteViaDelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_route_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkIpRouteViaDelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ip_route_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*IpRoutesResponse_Response)(nil),
		(*IpRoutesResponse_Via)(nil),
	}
	file_ip_route_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*IpRouteSetRequest_Action)(nil),
		(*IpRouteSetRequest_VrfName)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ip_route_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ip_route_proto_goTypes,
		DependencyIndexes: file_ip_route_proto_depIdxs,
		EnumInfos:         file_ip_route_proto_enumTypes,
		MessageInfos:      file_ip_route_proto_msgTypes,
	}.Build()
	File_ip_route_proto = out.File
	file_ip_route_proto_rawDesc = nil
	file_ip_route_proto_goTypes = nil
	file_ip_route_proto_depIdxs = nil
}
