// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: macsec.proto

package EosSdkRpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MacsecMgrServiceClient is the client API for MacsecMgrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MacsecMgrServiceClient interface {
	// *
	// Register to receive notifications.
	Watch(ctx context.Context, in *MacsecWatchRequest, opts ...grpc.CallOption) (MacsecMgrService_WatchClient, error)
	// *
	// Returns whether or not a profile with the given name exists.
	Exists(ctx context.Context, in *MacsecExistsRequest, opts ...grpc.CallOption) (*MacsecExistsResponse, error)
	// *
	// Returns the MACsec profile with the given name,
	// if no profile is found, the response is empty.
	Profile(ctx context.Context, in *MacsecProfileRequest, opts ...grpc.CallOption) (*MacsecProfileResponse, error)
	// *
	// Writes the given profile to MACsec config. If a profile with the given name
	// already exists, it will be updated with the given fields.
	ProfileSet(ctx context.Context, in *MacsecProfileSetRequest, opts ...grpc.CallOption) (*MacsecProfileSetResponse, error)
	// *
	// Bulk version of profile_set.
	BulkProfileSet(ctx context.Context, in *BulkMacsecProfileSetRequest, opts ...grpc.CallOption) (*BulkMacsecProfileSetResponse, error)
	// *
	// Deletes the profile with the given name if such a profile exists.
	ProfileDel(ctx context.Context, in *MacsecProfileDelRequest, opts ...grpc.CallOption) (*MacsecProfileDelResponse, error)
	// *
	// Bulk version of profile_del.
	BulkProfileDel(ctx context.Context, in *BulkMacsecProfileDelRequest, opts ...grpc.CallOption) (*BulkMacsecProfileDelResponse, error)
	// *
	// Returns the profile name of the profile attached to the interface.
	// If there is no profile configured, return an empty message.
	IntfProfile(ctx context.Context, in *MacsecIntfProfileRequest, opts ...grpc.CallOption) (*MacsecIntfProfileResponse, error)
	// *
	// Configures the given interface to use the given MACsec profile.
	IntfProfileIs(ctx context.Context, in *MacsecIntfProfileIsRequest, opts ...grpc.CallOption) (*MacsecIntfProfileIsResponse, error)
	// *
	// Bulk version of intf_profile_set.
	BulkIntfProfileIs(ctx context.Context, in *BulkMacsecIntfProfileIsRequest, opts ...grpc.CallOption) (*BulkMacsecIntfProfileIsResponse, error)
	// *
	// Returns whether or not an interface supports MACsec.
	MacsecCapable(ctx context.Context, in *MacsecCapableRequest, opts ...grpc.CallOption) (*MacsecCapableResponse, error)
	// *
	// Returns the MACsec related status information of the given interface.
	IntfStatus(ctx context.Context, in *MacsecIntfStatusRequest, opts ...grpc.CallOption) (*MacsecIntfStatusResponse, error)
	// *
	// Returns the current MACsec counters for the given interface.
	IntfCounters(ctx context.Context, in *MacsecIntfCountersRequest, opts ...grpc.CallOption) (*MacsecIntfCountersResponse, error)
	// *
	// Returns all MACsec profile config.
	MacsecProfiles(ctx context.Context, in *MacsecProfilesRequest, opts ...grpc.CallOption) (MacsecMgrService_MacsecProfilesClient, error)
	// *
	// Returns all MACsec intf status.
	MacsecIntfStatuses(ctx context.Context, in *MacsecIntfStatusesRequest, opts ...grpc.CallOption) (MacsecMgrService_MacsecIntfStatusesClient, error)
}

type macsecMgrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMacsecMgrServiceClient(cc grpc.ClientConnInterface) MacsecMgrServiceClient {
	return &macsecMgrServiceClient{cc}
}

func (c *macsecMgrServiceClient) Watch(ctx context.Context, in *MacsecWatchRequest, opts ...grpc.CallOption) (MacsecMgrService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &MacsecMgrService_ServiceDesc.Streams[0], "/eos.remote.MacsecMgrService/watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &macsecMgrServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MacsecMgrService_WatchClient interface {
	Recv() (*MacsecWatchResponse, error)
	grpc.ClientStream
}

type macsecMgrServiceWatchClient struct {
	grpc.ClientStream
}

func (x *macsecMgrServiceWatchClient) Recv() (*MacsecWatchResponse, error) {
	m := new(MacsecWatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *macsecMgrServiceClient) Exists(ctx context.Context, in *MacsecExistsRequest, opts ...grpc.CallOption) (*MacsecExistsResponse, error) {
	out := new(MacsecExistsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.MacsecMgrService/exists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecMgrServiceClient) Profile(ctx context.Context, in *MacsecProfileRequest, opts ...grpc.CallOption) (*MacsecProfileResponse, error) {
	out := new(MacsecProfileResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.MacsecMgrService/profile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecMgrServiceClient) ProfileSet(ctx context.Context, in *MacsecProfileSetRequest, opts ...grpc.CallOption) (*MacsecProfileSetResponse, error) {
	out := new(MacsecProfileSetResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.MacsecMgrService/profile_set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecMgrServiceClient) BulkProfileSet(ctx context.Context, in *BulkMacsecProfileSetRequest, opts ...grpc.CallOption) (*BulkMacsecProfileSetResponse, error) {
	out := new(BulkMacsecProfileSetResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.MacsecMgrService/bulk_profile_set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecMgrServiceClient) ProfileDel(ctx context.Context, in *MacsecProfileDelRequest, opts ...grpc.CallOption) (*MacsecProfileDelResponse, error) {
	out := new(MacsecProfileDelResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.MacsecMgrService/profile_del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecMgrServiceClient) BulkProfileDel(ctx context.Context, in *BulkMacsecProfileDelRequest, opts ...grpc.CallOption) (*BulkMacsecProfileDelResponse, error) {
	out := new(BulkMacsecProfileDelResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.MacsecMgrService/bulk_profile_del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecMgrServiceClient) IntfProfile(ctx context.Context, in *MacsecIntfProfileRequest, opts ...grpc.CallOption) (*MacsecIntfProfileResponse, error) {
	out := new(MacsecIntfProfileResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.MacsecMgrService/intf_profile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecMgrServiceClient) IntfProfileIs(ctx context.Context, in *MacsecIntfProfileIsRequest, opts ...grpc.CallOption) (*MacsecIntfProfileIsResponse, error) {
	out := new(MacsecIntfProfileIsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.MacsecMgrService/intf_profile_is", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecMgrServiceClient) BulkIntfProfileIs(ctx context.Context, in *BulkMacsecIntfProfileIsRequest, opts ...grpc.CallOption) (*BulkMacsecIntfProfileIsResponse, error) {
	out := new(BulkMacsecIntfProfileIsResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.MacsecMgrService/bulk_intf_profile_is", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecMgrServiceClient) MacsecCapable(ctx context.Context, in *MacsecCapableRequest, opts ...grpc.CallOption) (*MacsecCapableResponse, error) {
	out := new(MacsecCapableResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.MacsecMgrService/macsec_capable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecMgrServiceClient) IntfStatus(ctx context.Context, in *MacsecIntfStatusRequest, opts ...grpc.CallOption) (*MacsecIntfStatusResponse, error) {
	out := new(MacsecIntfStatusResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.MacsecMgrService/intf_status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecMgrServiceClient) IntfCounters(ctx context.Context, in *MacsecIntfCountersRequest, opts ...grpc.CallOption) (*MacsecIntfCountersResponse, error) {
	out := new(MacsecIntfCountersResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.MacsecMgrService/intf_counters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *macsecMgrServiceClient) MacsecProfiles(ctx context.Context, in *MacsecProfilesRequest, opts ...grpc.CallOption) (MacsecMgrService_MacsecProfilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MacsecMgrService_ServiceDesc.Streams[1], "/eos.remote.MacsecMgrService/macsec_profiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &macsecMgrServiceMacsecProfilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MacsecMgrService_MacsecProfilesClient interface {
	Recv() (*MacsecProfilesResponse, error)
	grpc.ClientStream
}

type macsecMgrServiceMacsecProfilesClient struct {
	grpc.ClientStream
}

func (x *macsecMgrServiceMacsecProfilesClient) Recv() (*MacsecProfilesResponse, error) {
	m := new(MacsecProfilesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *macsecMgrServiceClient) MacsecIntfStatuses(ctx context.Context, in *MacsecIntfStatusesRequest, opts ...grpc.CallOption) (MacsecMgrService_MacsecIntfStatusesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MacsecMgrService_ServiceDesc.Streams[2], "/eos.remote.MacsecMgrService/macsec_intf_statuses", opts...)
	if err != nil {
		return nil, err
	}
	x := &macsecMgrServiceMacsecIntfStatusesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MacsecMgrService_MacsecIntfStatusesClient interface {
	Recv() (*MacsecIntfStatusesResponse, error)
	grpc.ClientStream
}

type macsecMgrServiceMacsecIntfStatusesClient struct {
	grpc.ClientStream
}

func (x *macsecMgrServiceMacsecIntfStatusesClient) Recv() (*MacsecIntfStatusesResponse, error) {
	m := new(MacsecIntfStatusesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MacsecMgrServiceServer is the server API for MacsecMgrService service.
// All implementations should embed UnimplementedMacsecMgrServiceServer
// for forward compatibility
type MacsecMgrServiceServer interface {
	// *
	// Register to receive notifications.
	Watch(*MacsecWatchRequest, MacsecMgrService_WatchServer) error
	// *
	// Returns whether or not a profile with the given name exists.
	Exists(context.Context, *MacsecExistsRequest) (*MacsecExistsResponse, error)
	// *
	// Returns the MACsec profile with the given name,
	// if no profile is found, the response is empty.
	Profile(context.Context, *MacsecProfileRequest) (*MacsecProfileResponse, error)
	// *
	// Writes the given profile to MACsec config. If a profile with the given name
	// already exists, it will be updated with the given fields.
	ProfileSet(context.Context, *MacsecProfileSetRequest) (*MacsecProfileSetResponse, error)
	// *
	// Bulk version of profile_set.
	BulkProfileSet(context.Context, *BulkMacsecProfileSetRequest) (*BulkMacsecProfileSetResponse, error)
	// *
	// Deletes the profile with the given name if such a profile exists.
	ProfileDel(context.Context, *MacsecProfileDelRequest) (*MacsecProfileDelResponse, error)
	// *
	// Bulk version of profile_del.
	BulkProfileDel(context.Context, *BulkMacsecProfileDelRequest) (*BulkMacsecProfileDelResponse, error)
	// *
	// Returns the profile name of the profile attached to the interface.
	// If there is no profile configured, return an empty message.
	IntfProfile(context.Context, *MacsecIntfProfileRequest) (*MacsecIntfProfileResponse, error)
	// *
	// Configures the given interface to use the given MACsec profile.
	IntfProfileIs(context.Context, *MacsecIntfProfileIsRequest) (*MacsecIntfProfileIsResponse, error)
	// *
	// Bulk version of intf_profile_set.
	BulkIntfProfileIs(context.Context, *BulkMacsecIntfProfileIsRequest) (*BulkMacsecIntfProfileIsResponse, error)
	// *
	// Returns whether or not an interface supports MACsec.
	MacsecCapable(context.Context, *MacsecCapableRequest) (*MacsecCapableResponse, error)
	// *
	// Returns the MACsec related status information of the given interface.
	IntfStatus(context.Context, *MacsecIntfStatusRequest) (*MacsecIntfStatusResponse, error)
	// *
	// Returns the current MACsec counters for the given interface.
	IntfCounters(context.Context, *MacsecIntfCountersRequest) (*MacsecIntfCountersResponse, error)
	// *
	// Returns all MACsec profile config.
	MacsecProfiles(*MacsecProfilesRequest, MacsecMgrService_MacsecProfilesServer) error
	// *
	// Returns all MACsec intf status.
	MacsecIntfStatuses(*MacsecIntfStatusesRequest, MacsecMgrService_MacsecIntfStatusesServer) error
}

// UnimplementedMacsecMgrServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMacsecMgrServiceServer struct {
}

func (UnimplementedMacsecMgrServiceServer) Watch(*MacsecWatchRequest, MacsecMgrService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedMacsecMgrServiceServer) Exists(context.Context, *MacsecExistsRequest) (*MacsecExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedMacsecMgrServiceServer) Profile(context.Context, *MacsecProfileRequest) (*MacsecProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Profile not implemented")
}
func (UnimplementedMacsecMgrServiceServer) ProfileSet(context.Context, *MacsecProfileSetRequest) (*MacsecProfileSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileSet not implemented")
}
func (UnimplementedMacsecMgrServiceServer) BulkProfileSet(context.Context, *BulkMacsecProfileSetRequest) (*BulkMacsecProfileSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkProfileSet not implemented")
}
func (UnimplementedMacsecMgrServiceServer) ProfileDel(context.Context, *MacsecProfileDelRequest) (*MacsecProfileDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileDel not implemented")
}
func (UnimplementedMacsecMgrServiceServer) BulkProfileDel(context.Context, *BulkMacsecProfileDelRequest) (*BulkMacsecProfileDelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkProfileDel not implemented")
}
func (UnimplementedMacsecMgrServiceServer) IntfProfile(context.Context, *MacsecIntfProfileRequest) (*MacsecIntfProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntfProfile not implemented")
}
func (UnimplementedMacsecMgrServiceServer) IntfProfileIs(context.Context, *MacsecIntfProfileIsRequest) (*MacsecIntfProfileIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntfProfileIs not implemented")
}
func (UnimplementedMacsecMgrServiceServer) BulkIntfProfileIs(context.Context, *BulkMacsecIntfProfileIsRequest) (*BulkMacsecIntfProfileIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkIntfProfileIs not implemented")
}
func (UnimplementedMacsecMgrServiceServer) MacsecCapable(context.Context, *MacsecCapableRequest) (*MacsecCapableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MacsecCapable not implemented")
}
func (UnimplementedMacsecMgrServiceServer) IntfStatus(context.Context, *MacsecIntfStatusRequest) (*MacsecIntfStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntfStatus not implemented")
}
func (UnimplementedMacsecMgrServiceServer) IntfCounters(context.Context, *MacsecIntfCountersRequest) (*MacsecIntfCountersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IntfCounters not implemented")
}
func (UnimplementedMacsecMgrServiceServer) MacsecProfiles(*MacsecProfilesRequest, MacsecMgrService_MacsecProfilesServer) error {
	return status.Errorf(codes.Unimplemented, "method MacsecProfiles not implemented")
}
func (UnimplementedMacsecMgrServiceServer) MacsecIntfStatuses(*MacsecIntfStatusesRequest, MacsecMgrService_MacsecIntfStatusesServer) error {
	return status.Errorf(codes.Unimplemented, "method MacsecIntfStatuses not implemented")
}

// UnsafeMacsecMgrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MacsecMgrServiceServer will
// result in compilation errors.
type UnsafeMacsecMgrServiceServer interface {
	mustEmbedUnimplementedMacsecMgrServiceServer()
}

func RegisterMacsecMgrServiceServer(s grpc.ServiceRegistrar, srv MacsecMgrServiceServer) {
	s.RegisterService(&MacsecMgrService_ServiceDesc, srv)
}

func _MacsecMgrService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MacsecWatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MacsecMgrServiceServer).Watch(m, &macsecMgrServiceWatchServer{stream})
}

type MacsecMgrService_WatchServer interface {
	Send(*MacsecWatchResponse) error
	grpc.ServerStream
}

type macsecMgrServiceWatchServer struct {
	grpc.ServerStream
}

func (x *macsecMgrServiceWatchServer) Send(m *MacsecWatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MacsecMgrService_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MacsecExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecMgrServiceServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.MacsecMgrService/exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecMgrServiceServer).Exists(ctx, req.(*MacsecExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MacsecMgrService_Profile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MacsecProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecMgrServiceServer).Profile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.MacsecMgrService/profile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecMgrServiceServer).Profile(ctx, req.(*MacsecProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MacsecMgrService_ProfileSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MacsecProfileSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecMgrServiceServer).ProfileSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.MacsecMgrService/profile_set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecMgrServiceServer).ProfileSet(ctx, req.(*MacsecProfileSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MacsecMgrService_BulkProfileSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkMacsecProfileSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecMgrServiceServer).BulkProfileSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.MacsecMgrService/bulk_profile_set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecMgrServiceServer).BulkProfileSet(ctx, req.(*BulkMacsecProfileSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MacsecMgrService_ProfileDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MacsecProfileDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecMgrServiceServer).ProfileDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.MacsecMgrService/profile_del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecMgrServiceServer).ProfileDel(ctx, req.(*MacsecProfileDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MacsecMgrService_BulkProfileDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkMacsecProfileDelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecMgrServiceServer).BulkProfileDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.MacsecMgrService/bulk_profile_del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecMgrServiceServer).BulkProfileDel(ctx, req.(*BulkMacsecProfileDelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MacsecMgrService_IntfProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MacsecIntfProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecMgrServiceServer).IntfProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.MacsecMgrService/intf_profile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecMgrServiceServer).IntfProfile(ctx, req.(*MacsecIntfProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MacsecMgrService_IntfProfileIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MacsecIntfProfileIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecMgrServiceServer).IntfProfileIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.MacsecMgrService/intf_profile_is",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecMgrServiceServer).IntfProfileIs(ctx, req.(*MacsecIntfProfileIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MacsecMgrService_BulkIntfProfileIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkMacsecIntfProfileIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecMgrServiceServer).BulkIntfProfileIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.MacsecMgrService/bulk_intf_profile_is",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecMgrServiceServer).BulkIntfProfileIs(ctx, req.(*BulkMacsecIntfProfileIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MacsecMgrService_MacsecCapable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MacsecCapableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecMgrServiceServer).MacsecCapable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.MacsecMgrService/macsec_capable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecMgrServiceServer).MacsecCapable(ctx, req.(*MacsecCapableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MacsecMgrService_IntfStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MacsecIntfStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecMgrServiceServer).IntfStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.MacsecMgrService/intf_status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecMgrServiceServer).IntfStatus(ctx, req.(*MacsecIntfStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MacsecMgrService_IntfCounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MacsecIntfCountersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MacsecMgrServiceServer).IntfCounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.MacsecMgrService/intf_counters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MacsecMgrServiceServer).IntfCounters(ctx, req.(*MacsecIntfCountersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MacsecMgrService_MacsecProfiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MacsecProfilesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MacsecMgrServiceServer).MacsecProfiles(m, &macsecMgrServiceMacsecProfilesServer{stream})
}

type MacsecMgrService_MacsecProfilesServer interface {
	Send(*MacsecProfilesResponse) error
	grpc.ServerStream
}

type macsecMgrServiceMacsecProfilesServer struct {
	grpc.ServerStream
}

func (x *macsecMgrServiceMacsecProfilesServer) Send(m *MacsecProfilesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MacsecMgrService_MacsecIntfStatuses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MacsecIntfStatusesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MacsecMgrServiceServer).MacsecIntfStatuses(m, &macsecMgrServiceMacsecIntfStatusesServer{stream})
}

type MacsecMgrService_MacsecIntfStatusesServer interface {
	Send(*MacsecIntfStatusesResponse) error
	grpc.ServerStream
}

type macsecMgrServiceMacsecIntfStatusesServer struct {
	grpc.ServerStream
}

func (x *macsecMgrServiceMacsecIntfStatusesServer) Send(m *MacsecIntfStatusesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MacsecMgrService_ServiceDesc is the grpc.ServiceDesc for MacsecMgrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MacsecMgrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eos.remote.MacsecMgrService",
	HandlerType: (*MacsecMgrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "exists",
			Handler:    _MacsecMgrService_Exists_Handler,
		},
		{
			MethodName: "profile",
			Handler:    _MacsecMgrService_Profile_Handler,
		},
		{
			MethodName: "profile_set",
			Handler:    _MacsecMgrService_ProfileSet_Handler,
		},
		{
			MethodName: "bulk_profile_set",
			Handler:    _MacsecMgrService_BulkProfileSet_Handler,
		},
		{
			MethodName: "profile_del",
			Handler:    _MacsecMgrService_ProfileDel_Handler,
		},
		{
			MethodName: "bulk_profile_del",
			Handler:    _MacsecMgrService_BulkProfileDel_Handler,
		},
		{
			MethodName: "intf_profile",
			Handler:    _MacsecMgrService_IntfProfile_Handler,
		},
		{
			MethodName: "intf_profile_is",
			Handler:    _MacsecMgrService_IntfProfileIs_Handler,
		},
		{
			MethodName: "bulk_intf_profile_is",
			Handler:    _MacsecMgrService_BulkIntfProfileIs_Handler,
		},
		{
			MethodName: "macsec_capable",
			Handler:    _MacsecMgrService_MacsecCapable_Handler,
		},
		{
			MethodName: "intf_status",
			Handler:    _MacsecMgrService_IntfStatus_Handler,
		},
		{
			MethodName: "intf_counters",
			Handler:    _MacsecMgrService_IntfCounters_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "watch",
			Handler:       _MacsecMgrService_Watch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "macsec_profiles",
			Handler:       _MacsecMgrService_MacsecProfiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "macsec_intf_statuses",
			Handler:       _MacsecMgrService_MacsecIntfStatuses_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "macsec.proto",
}
