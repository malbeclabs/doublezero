// Copyright (c) 2021 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: nexthop_group.proto

package EosSdkRpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NexthopGroupWatchedField int32

const (
	// 'NEXTHOP_GROUP_ALL' represents including all the fields in
	// 'WatchNexthopGroupResponse'
	NexthopGroupWatchedField_NEXTHOP_GROUP_ALL               NexthopGroupWatchedField = 0
	NexthopGroupWatchedField_NEXTHOP_GROUP_ACTIVE            NexthopGroupWatchedField = 1
	NexthopGroupWatchedField_NEXTHOP_GROUP_PROGRAMMED        NexthopGroupWatchedField = 2
	NexthopGroupWatchedField_NEXTHOP_GROUP_VERSION_ID        NexthopGroupWatchedField = 3
	NexthopGroupWatchedField_NEXTHOP_GROUP_NHG               NexthopGroupWatchedField = 4
	NexthopGroupWatchedField_NEXTHOP_GROUP_ON_NHG_PROGRAMMED NexthopGroupWatchedField = 5
)

// Enum value maps for NexthopGroupWatchedField.
var (
	NexthopGroupWatchedField_name = map[int32]string{
		0: "NEXTHOP_GROUP_ALL",
		1: "NEXTHOP_GROUP_ACTIVE",
		2: "NEXTHOP_GROUP_PROGRAMMED",
		3: "NEXTHOP_GROUP_VERSION_ID",
		4: "NEXTHOP_GROUP_NHG",
		5: "NEXTHOP_GROUP_ON_NHG_PROGRAMMED",
	}
	NexthopGroupWatchedField_value = map[string]int32{
		"NEXTHOP_GROUP_ALL":               0,
		"NEXTHOP_GROUP_ACTIVE":            1,
		"NEXTHOP_GROUP_PROGRAMMED":        2,
		"NEXTHOP_GROUP_VERSION_ID":        3,
		"NEXTHOP_GROUP_NHG":               4,
		"NEXTHOP_GROUP_ON_NHG_PROGRAMMED": 5,
	}
)

func (x NexthopGroupWatchedField) Enum() *NexthopGroupWatchedField {
	p := new(NexthopGroupWatchedField)
	*p = x
	return p
}

func (x NexthopGroupWatchedField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NexthopGroupWatchedField) Descriptor() protoreflect.EnumDescriptor {
	return file_nexthop_group_proto_enumTypes[0].Descriptor()
}

func (NexthopGroupWatchedField) Type() protoreflect.EnumType {
	return &file_nexthop_group_proto_enumTypes[0]
}

func (x NexthopGroupWatchedField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NexthopGroupWatchedField.Descriptor instead.
func (NexthopGroupWatchedField) EnumDescriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{0}
}

type NexthopGroupFieldsControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []NexthopGroupWatchedField `protobuf:"varint,1,rep,packed,name=fields,proto3,enum=eos.remote.NexthopGroupWatchedField" json:"fields,omitempty"`
}

func (x *NexthopGroupFieldsControl) Reset() {
	*x = NexthopGroupFieldsControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NexthopGroupFieldsControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NexthopGroupFieldsControl) ProtoMessage() {}

func (x *NexthopGroupFieldsControl) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NexthopGroupFieldsControl.ProtoReflect.Descriptor instead.
func (*NexthopGroupFieldsControl) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{0}
}

func (x *NexthopGroupFieldsControl) GetFields() []NexthopGroupWatchedField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type WatchNexthopGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Overloads:
	//
	//	*WatchNexthopGroupRequest_All
	//	*WatchNexthopGroupRequest_Name
	Overloads isWatchNexthopGroupRequest_Overloads `protobuf_oneof:"overloads"`
	// Set to true when an ackowledgment is desired.
	Ack        bool                       `protobuf:"varint,3,opt,name=ack,proto3" json:"ack,omitempty"`
	DumpFields *NexthopGroupFieldsControl `protobuf:"bytes,4,opt,name=dump_fields,json=dumpFields,proto3" json:"dump_fields,omitempty"`
}

func (x *WatchNexthopGroupRequest) Reset() {
	*x = WatchNexthopGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchNexthopGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchNexthopGroupRequest) ProtoMessage() {}

func (x *WatchNexthopGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchNexthopGroupRequest.ProtoReflect.Descriptor instead.
func (*WatchNexthopGroupRequest) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{1}
}

func (m *WatchNexthopGroupRequest) GetOverloads() isWatchNexthopGroupRequest_Overloads {
	if m != nil {
		return m.Overloads
	}
	return nil
}

func (x *WatchNexthopGroupRequest) GetAll() bool {
	if x, ok := x.GetOverloads().(*WatchNexthopGroupRequest_All); ok {
		return x.All
	}
	return false
}

func (x *WatchNexthopGroupRequest) GetName() string {
	if x, ok := x.GetOverloads().(*WatchNexthopGroupRequest_Name); ok {
		return x.Name
	}
	return ""
}

func (x *WatchNexthopGroupRequest) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

func (x *WatchNexthopGroupRequest) GetDumpFields() *NexthopGroupFieldsControl {
	if x != nil {
		return x.DumpFields
	}
	return nil
}

type isWatchNexthopGroupRequest_Overloads interface {
	isWatchNexthopGroupRequest_Overloads()
}

type WatchNexthopGroupRequest_All struct {
	All bool `protobuf:"varint,1,opt,name=all,proto3,oneof"`
}

type WatchNexthopGroupRequest_Name struct {
	// Name of a particular nexthop group to watch.
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*WatchNexthopGroupRequest_All) isWatchNexthopGroupRequest_Overloads() {}

func (*WatchNexthopGroupRequest_Name) isWatchNexthopGroupRequest_Overloads() {}

// *
// Events are streamed as changes happen.
type WatchNexthopGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface whose status changed (ignored on confirmation).
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to ActiveStatusPresent:
	//
	//	*WatchNexthopGroupResponse_ActiveStatus
	ActiveStatusPresent isWatchNexthopGroupResponse_ActiveStatusPresent `protobuf_oneof:"active_status_present"`
	// Types that are assignable to NhgProgrammedPresent:
	//
	//	*WatchNexthopGroupResponse_NhgProgrammed
	NhgProgrammedPresent isWatchNexthopGroupResponse_NhgProgrammedPresent `protobuf_oneof:"nhg_programmed_present"`
	// The nexthop group's version ID if it has been programmed.
	// Only present when event is for a programmed callback.
	VersionId uint32 `protobuf:"varint,4,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// If true, this is not an event and the fields below are invalid.
	Ack             bool                      `protobuf:"varint,5,opt,name=ack,proto3" json:"ack,omitempty"`
	Nhg             *NexthopGroup             `protobuf:"bytes,6,opt,name=nhg,proto3" json:"nhg,omitempty"`
	OnNhgProgrammed *OnNexthopGroupProgrammed `protobuf:"bytes,7,opt,name=on_nhg_programmed,json=onNhgProgrammed,proto3" json:"on_nhg_programmed,omitempty"`
}

func (x *WatchNexthopGroupResponse) Reset() {
	*x = WatchNexthopGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchNexthopGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchNexthopGroupResponse) ProtoMessage() {}

func (x *WatchNexthopGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchNexthopGroupResponse.ProtoReflect.Descriptor instead.
func (*WatchNexthopGroupResponse) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{2}
}

func (x *WatchNexthopGroupResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *WatchNexthopGroupResponse) GetActiveStatusPresent() isWatchNexthopGroupResponse_ActiveStatusPresent {
	if m != nil {
		return m.ActiveStatusPresent
	}
	return nil
}

func (x *WatchNexthopGroupResponse) GetActiveStatus() bool {
	if x, ok := x.GetActiveStatusPresent().(*WatchNexthopGroupResponse_ActiveStatus); ok {
		return x.ActiveStatus
	}
	return false
}

func (m *WatchNexthopGroupResponse) GetNhgProgrammedPresent() isWatchNexthopGroupResponse_NhgProgrammedPresent {
	if m != nil {
		return m.NhgProgrammedPresent
	}
	return nil
}

func (x *WatchNexthopGroupResponse) GetNhgProgrammed() bool {
	if x, ok := x.GetNhgProgrammedPresent().(*WatchNexthopGroupResponse_NhgProgrammed); ok {
		return x.NhgProgrammed
	}
	return false
}

func (x *WatchNexthopGroupResponse) GetVersionId() uint32 {
	if x != nil {
		return x.VersionId
	}
	return 0
}

func (x *WatchNexthopGroupResponse) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

func (x *WatchNexthopGroupResponse) GetNhg() *NexthopGroup {
	if x != nil {
		return x.Nhg
	}
	return nil
}

func (x *WatchNexthopGroupResponse) GetOnNhgProgrammed() *OnNexthopGroupProgrammed {
	if x != nil {
		return x.OnNhgProgrammed
	}
	return nil
}

type isWatchNexthopGroupResponse_ActiveStatusPresent interface {
	isWatchNexthopGroupResponse_ActiveStatusPresent()
}

type WatchNexthopGroupResponse_ActiveStatus struct {
	// There was a change in the active status.
	ActiveStatus bool `protobuf:"varint,2,opt,name=active_status,json=activeStatus,proto3,oneof"`
}

func (*WatchNexthopGroupResponse_ActiveStatus) isWatchNexthopGroupResponse_ActiveStatusPresent() {}

type isWatchNexthopGroupResponse_NhgProgrammedPresent interface {
	isWatchNexthopGroupResponse_NhgProgrammedPresent()
}

type WatchNexthopGroupResponse_NhgProgrammed struct {
	// NHG has been programmed.
	NhgProgrammed bool `protobuf:"varint,3,opt,name=nhg_programmed,json=nhgProgrammed,proto3,oneof"`
}

func (*WatchNexthopGroupResponse_NhgProgrammed) isWatchNexthopGroupResponse_NhgProgrammedPresent() {}

type ResyncNexthopGroupInitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResyncNexthopGroupInitRequest) Reset() {
	*x = ResyncNexthopGroupInitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResyncNexthopGroupInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResyncNexthopGroupInitRequest) ProtoMessage() {}

func (x *ResyncNexthopGroupInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResyncNexthopGroupInitRequest.ProtoReflect.Descriptor instead.
func (*ResyncNexthopGroupInitRequest) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{3}
}

type ResyncNexthopGroupInitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResyncNexthopGroupInitResponse) Reset() {
	*x = ResyncNexthopGroupInitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResyncNexthopGroupInitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResyncNexthopGroupInitResponse) ProtoMessage() {}

func (x *ResyncNexthopGroupInitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResyncNexthopGroupInitResponse.ProtoReflect.Descriptor instead.
func (*ResyncNexthopGroupInitResponse) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{4}
}

type ResyncNexthopGroupCompleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResyncNexthopGroupCompleteRequest) Reset() {
	*x = ResyncNexthopGroupCompleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResyncNexthopGroupCompleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResyncNexthopGroupCompleteRequest) ProtoMessage() {}

func (x *ResyncNexthopGroupCompleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResyncNexthopGroupCompleteRequest.ProtoReflect.Descriptor instead.
func (*ResyncNexthopGroupCompleteRequest) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{5}
}

type ResyncNexthopGroupCompleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResyncNexthopGroupCompleteResponse) Reset() {
	*x = ResyncNexthopGroupCompleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResyncNexthopGroupCompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResyncNexthopGroupCompleteResponse) ProtoMessage() {}

func (x *ResyncNexthopGroupCompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResyncNexthopGroupCompleteResponse.ProtoReflect.Descriptor instead.
func (*ResyncNexthopGroupCompleteResponse) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{6}
}

type NexthopGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NexthopGroupsRequest) Reset() {
	*x = NexthopGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NexthopGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NexthopGroupsRequest) ProtoMessage() {}

func (x *NexthopGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NexthopGroupsRequest.ProtoReflect.Descriptor instead.
func (*NexthopGroupsRequest) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{7}
}

type NexthopGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configured nexthop group.
	Nhg *NexthopGroup `protobuf:"bytes,1,opt,name=nhg,proto3" json:"nhg,omitempty"`
}

func (x *NexthopGroupsResponse) Reset() {
	*x = NexthopGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NexthopGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NexthopGroupsResponse) ProtoMessage() {}

func (x *NexthopGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NexthopGroupsResponse.ProtoReflect.Descriptor instead.
func (*NexthopGroupsResponse) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{8}
}

func (x *NexthopGroupsResponse) GetNhg() *NexthopGroup {
	if x != nil {
		return x.Nhg
	}
	return nil
}

type ProgrammedNexthopGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProgrammedNexthopGroupsRequest) Reset() {
	*x = ProgrammedNexthopGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgrammedNexthopGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgrammedNexthopGroupsRequest) ProtoMessage() {}

func (x *ProgrammedNexthopGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgrammedNexthopGroupsRequest.ProtoReflect.Descriptor instead.
func (*ProgrammedNexthopGroupsRequest) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{9}
}

type ProgrammedNexthopGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Programmed nexthop group.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ProgrammedNexthopGroupsResponse) Reset() {
	*x = ProgrammedNexthopGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgrammedNexthopGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgrammedNexthopGroupsResponse) ProtoMessage() {}

func (x *ProgrammedNexthopGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgrammedNexthopGroupsResponse.ProtoReflect.Descriptor instead.
func (*ProgrammedNexthopGroupsResponse) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{10}
}

func (x *ProgrammedNexthopGroupsResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type NexthopGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the nexthop group to search.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NexthopGroupRequest) Reset() {
	*x = NexthopGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NexthopGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NexthopGroupRequest) ProtoMessage() {}

func (x *NexthopGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NexthopGroupRequest.ProtoReflect.Descriptor instead.
func (*NexthopGroupRequest) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{11}
}

func (x *NexthopGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type NexthopGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Configured nexthop group (empty if not found).
	Nhg *NexthopGroup `protobuf:"bytes,1,opt,name=nhg,proto3" json:"nhg,omitempty"`
}

func (x *NexthopGroupResponse) Reset() {
	*x = NexthopGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NexthopGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NexthopGroupResponse) ProtoMessage() {}

func (x *NexthopGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NexthopGroupResponse.ProtoReflect.Descriptor instead.
func (*NexthopGroupResponse) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{12}
}

func (x *NexthopGroupResponse) GetNhg() *NexthopGroup {
	if x != nil {
		return x.Nhg
	}
	return nil
}

type CounterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the nexthop group to search.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Entry number (16-bit).
	Entry uint32 `protobuf:"varint,2,opt,name=entry,proto3" json:"entry,omitempty"`
}

func (x *CounterRequest) Reset() {
	*x = CounterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterRequest) ProtoMessage() {}

func (x *CounterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterRequest.ProtoReflect.Descriptor instead.
func (*CounterRequest) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{13}
}

func (x *CounterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CounterRequest) GetEntry() uint32 {
	if x != nil {
		return x.Entry
	}
	return 0
}

type CounterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Counter data (empty if not found).
	Counter *NexthopGroupCounter `protobuf:"bytes,1,opt,name=counter,proto3" json:"counter,omitempty"`
}

func (x *CounterResponse) Reset() {
	*x = CounterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CounterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CounterResponse) ProtoMessage() {}

func (x *CounterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CounterResponse.ProtoReflect.Descriptor instead.
func (*CounterResponse) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{14}
}

func (x *CounterResponse) GetCounter() *NexthopGroupCounter {
	if x != nil {
		return x.Counter
	}
	return nil
}

type NexthopGroupCountersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Overloads:
	//
	//	*NexthopGroupCountersRequest_All
	//	*NexthopGroupCountersRequest_Name
	//	*NexthopGroupCountersRequest_Regex
	Overloads isNexthopGroupCountersRequest_Overloads `protobuf_oneof:"overloads"`
}

func (x *NexthopGroupCountersRequest) Reset() {
	*x = NexthopGroupCountersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NexthopGroupCountersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NexthopGroupCountersRequest) ProtoMessage() {}

func (x *NexthopGroupCountersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NexthopGroupCountersRequest.ProtoReflect.Descriptor instead.
func (*NexthopGroupCountersRequest) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{15}
}

func (m *NexthopGroupCountersRequest) GetOverloads() isNexthopGroupCountersRequest_Overloads {
	if m != nil {
		return m.Overloads
	}
	return nil
}

func (x *NexthopGroupCountersRequest) GetAll() bool {
	if x, ok := x.GetOverloads().(*NexthopGroupCountersRequest_All); ok {
		return x.All
	}
	return false
}

func (x *NexthopGroupCountersRequest) GetName() string {
	if x, ok := x.GetOverloads().(*NexthopGroupCountersRequest_Name); ok {
		return x.Name
	}
	return ""
}

func (x *NexthopGroupCountersRequest) GetRegex() string {
	if x, ok := x.GetOverloads().(*NexthopGroupCountersRequest_Regex); ok {
		return x.Regex
	}
	return ""
}

type isNexthopGroupCountersRequest_Overloads interface {
	isNexthopGroupCountersRequest_Overloads()
}

type NexthopGroupCountersRequest_All struct {
	// All nexthop groups.
	All bool `protobuf:"varint,1,opt,name=all,proto3,oneof"`
}

type NexthopGroupCountersRequest_Name struct {
	// Name of a particular nexthop group to get the counters for.
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

type NexthopGroupCountersRequest_Regex struct {
	// ECMAScript regex to be pattern matched against all nexthop group names.
	Regex string `protobuf:"bytes,3,opt,name=regex,proto3,oneof"`
}

func (*NexthopGroupCountersRequest_All) isNexthopGroupCountersRequest_Overloads() {}

func (*NexthopGroupCountersRequest_Name) isNexthopGroupCountersRequest_Overloads() {}

func (*NexthopGroupCountersRequest_Regex) isNexthopGroupCountersRequest_Overloads() {}

type NexthopGroupCountersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the nexthop_group.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// List of all nexthop groups' entry counters when all = true or when the
	// name is given in a request that nexthop group's entries
	// counters will be returned.
	Counters []*NexthopGroupCounter `protobuf:"bytes,2,rep,name=counters,proto3" json:"counters,omitempty"`
}

func (x *NexthopGroupCountersResponse) Reset() {
	*x = NexthopGroupCountersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NexthopGroupCountersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NexthopGroupCountersResponse) ProtoMessage() {}

func (x *NexthopGroupCountersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NexthopGroupCountersResponse.ProtoReflect.Descriptor instead.
func (*NexthopGroupCountersResponse) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{16}
}

func (x *NexthopGroupCountersResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NexthopGroupCountersResponse) GetCounters() []*NexthopGroupCounter {
	if x != nil {
		return x.Counters
	}
	return nil
}

type NexthopGroupExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the nexthop_group.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NexthopGroupExistsRequest) Reset() {
	*x = NexthopGroupExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NexthopGroupExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NexthopGroupExistsRequest) ProtoMessage() {}

func (x *NexthopGroupExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NexthopGroupExistsRequest.ProtoReflect.Descriptor instead.
func (*NexthopGroupExistsRequest) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{17}
}

func (x *NexthopGroupExistsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type NexthopGroupExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if the nexthop group exists.
	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *NexthopGroupExistsResponse) Reset() {
	*x = NexthopGroupExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NexthopGroupExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NexthopGroupExistsResponse) ProtoMessage() {}

func (x *NexthopGroupExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NexthopGroupExistsResponse.ProtoReflect.Descriptor instead.
func (*NexthopGroupExistsResponse) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{18}
}

func (x *NexthopGroupExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type NexthopGroupActiveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the nexthop group.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NexthopGroupActiveRequest) Reset() {
	*x = NexthopGroupActiveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NexthopGroupActiveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NexthopGroupActiveRequest) ProtoMessage() {}

func (x *NexthopGroupActiveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NexthopGroupActiveRequest.ProtoReflect.Descriptor instead.
func (*NexthopGroupActiveRequest) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{19}
}

func (x *NexthopGroupActiveRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type NexthopGroupActiveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if the specified group is active.
	Active bool `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *NexthopGroupActiveResponse) Reset() {
	*x = NexthopGroupActiveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NexthopGroupActiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NexthopGroupActiveResponse) ProtoMessage() {}

func (x *NexthopGroupActiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NexthopGroupActiveResponse.ProtoReflect.Descriptor instead.
func (*NexthopGroupActiveResponse) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{20}
}

func (x *NexthopGroupActiveResponse) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type NexthopGroupSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Details of the new group.
	Nhg *NexthopGroup `protobuf:"bytes,1,opt,name=nhg,proto3" json:"nhg,omitempty"`
	// Must be in range 1 to 65535
	ClientVersionId *uint32 `protobuf:"varint,2,opt,name=client_version_id,json=clientVersionId,proto3,oneof" json:"client_version_id,omitempty"`
}

func (x *NexthopGroupSetRequest) Reset() {
	*x = NexthopGroupSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NexthopGroupSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NexthopGroupSetRequest) ProtoMessage() {}

func (x *NexthopGroupSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NexthopGroupSetRequest.ProtoReflect.Descriptor instead.
func (*NexthopGroupSetRequest) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{21}
}

func (x *NexthopGroupSetRequest) GetNhg() *NexthopGroup {
	if x != nil {
		return x.Nhg
	}
	return nil
}

func (x *NexthopGroupSetRequest) GetClientVersionId() uint32 {
	if x != nil && x.ClientVersionId != nil {
		return *x.ClientVersionId
	}
	return 0
}

type NexthopGroupSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The nexthop group's version ID.
	VersionId uint32 `protobuf:"varint,1,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
}

func (x *NexthopGroupSetResponse) Reset() {
	*x = NexthopGroupSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NexthopGroupSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NexthopGroupSetResponse) ProtoMessage() {}

func (x *NexthopGroupSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NexthopGroupSetResponse.ProtoReflect.Descriptor instead.
func (*NexthopGroupSetResponse) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{22}
}

func (x *NexthopGroupSetResponse) GetVersionId() uint32 {
	if x != nil {
		return x.VersionId
	}
	return 0
}

type BulkNexthopGroupSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of NexthopGroupSetRequest.
	Requests []*NexthopGroupSetRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkNexthopGroupSetRequest) Reset() {
	*x = BulkNexthopGroupSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkNexthopGroupSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkNexthopGroupSetRequest) ProtoMessage() {}

func (x *BulkNexthopGroupSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkNexthopGroupSetRequest.ProtoReflect.Descriptor instead.
func (*BulkNexthopGroupSetRequest) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{23}
}

func (x *BulkNexthopGroupSetRequest) GetRequests() []*NexthopGroupSetRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BulkNexthopGroupSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of consecutive successful requests.
	Processed uint64 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	// Success or error details in case of failure.
	Status *RpcResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// List of NexthopGroupSetResponse.
	Responses []*NexthopGroupSetResponse `protobuf:"bytes,3,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *BulkNexthopGroupSetResponse) Reset() {
	*x = BulkNexthopGroupSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkNexthopGroupSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkNexthopGroupSetResponse) ProtoMessage() {}

func (x *BulkNexthopGroupSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkNexthopGroupSetResponse.ProtoReflect.Descriptor instead.
func (*BulkNexthopGroupSetResponse) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{24}
}

func (x *BulkNexthopGroupSetResponse) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *BulkNexthopGroupSetResponse) GetStatus() *RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *BulkNexthopGroupSetResponse) GetResponses() []*NexthopGroupSetResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type NexthopGroupDelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the nexthop group to delete.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NexthopGroupDelRequest) Reset() {
	*x = NexthopGroupDelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NexthopGroupDelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NexthopGroupDelRequest) ProtoMessage() {}

func (x *NexthopGroupDelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NexthopGroupDelRequest.ProtoReflect.Descriptor instead.
func (*NexthopGroupDelRequest) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{25}
}

func (x *NexthopGroupDelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type NexthopGroupDelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NexthopGroupDelResponse) Reset() {
	*x = NexthopGroupDelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NexthopGroupDelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NexthopGroupDelResponse) ProtoMessage() {}

func (x *NexthopGroupDelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NexthopGroupDelResponse.ProtoReflect.Descriptor instead.
func (*NexthopGroupDelResponse) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{26}
}

type BulkNexthopGroupDelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of NexthopGroupDelRequest.
	Requests []*NexthopGroupDelRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkNexthopGroupDelRequest) Reset() {
	*x = BulkNexthopGroupDelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkNexthopGroupDelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkNexthopGroupDelRequest) ProtoMessage() {}

func (x *BulkNexthopGroupDelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkNexthopGroupDelRequest.ProtoReflect.Descriptor instead.
func (*BulkNexthopGroupDelRequest) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{27}
}

func (x *BulkNexthopGroupDelRequest) GetRequests() []*NexthopGroupDelRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BulkNexthopGroupDelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of consecutive successful requests.
	Processed uint64 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	// Success or error details in case of failure.
	Status *RpcResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BulkNexthopGroupDelResponse) Reset() {
	*x = BulkNexthopGroupDelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkNexthopGroupDelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkNexthopGroupDelResponse) ProtoMessage() {}

func (x *BulkNexthopGroupDelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkNexthopGroupDelResponse.ProtoReflect.Descriptor instead.
func (*BulkNexthopGroupDelResponse) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{28}
}

func (x *BulkNexthopGroupDelResponse) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *BulkNexthopGroupDelResponse) GetStatus() *RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type ProgrammedNexthopGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the programmed nexthop group.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ProgrammedNexthopGroupRequest) Reset() {
	*x = ProgrammedNexthopGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgrammedNexthopGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgrammedNexthopGroupRequest) ProtoMessage() {}

func (x *ProgrammedNexthopGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgrammedNexthopGroupRequest.ProtoReflect.Descriptor instead.
func (*ProgrammedNexthopGroupRequest) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{29}
}

func (x *ProgrammedNexthopGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ProgrammedNexthopGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Details of the nexthop group (empty if not found).
	Nhg *NexthopGroup `protobuf:"bytes,1,opt,name=nhg,proto3" json:"nhg,omitempty"`
}

func (x *ProgrammedNexthopGroupResponse) Reset() {
	*x = ProgrammedNexthopGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgrammedNexthopGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgrammedNexthopGroupResponse) ProtoMessage() {}

func (x *ProgrammedNexthopGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgrammedNexthopGroupResponse.ProtoReflect.Descriptor instead.
func (*ProgrammedNexthopGroupResponse) Descriptor() ([]byte, []int) {
	return file_nexthop_group_proto_rawDescGZIP(), []int{30}
}

func (x *ProgrammedNexthopGroupResponse) GetNhg() *NexthopGroup {
	if x != nil {
		return x.Nhg
	}
	return nil
}

var File_nexthop_group_proto protoreflect.FileDescriptor

var file_nexthop_group_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x1a, 0x0f, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x59, 0x0a,
	0x19, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x3c, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xab, 0x01, 0x0a, 0x18, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x63,
	0x6b, 0x12, 0x46, 0x0a, 0x0b, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x0a, 0x64,
	0x75, 0x6d, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x6f, 0x76, 0x65,
	0x72, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22, 0xe1, 0x02, 0x0a, 0x19, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x27, 0x0a, 0x0e, 0x6e, 0x68, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0d, 0x6e, 0x68, 0x67, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x2a, 0x0a, 0x03, 0x6e, 0x68, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x03, 0x6e, 0x68, 0x67, 0x12, 0x50, 0x0a, 0x11, 0x6f, 0x6e, 0x5f, 0x6e, 0x68, 0x67, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4f, 0x6e,
	0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x6d, 0x65, 0x64, 0x52, 0x0f, 0x6f, 0x6e, 0x4e, 0x68, 0x67, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x42, 0x18, 0x0a, 0x16, 0x6e, 0x68, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x22, 0x1f, 0x0a, 0x1d, 0x52, 0x65,
	0x73, 0x79, 0x6e, 0x63, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x20, 0x0a, 0x1e, 0x52,
	0x65, 0x73, 0x79, 0x6e, 0x63, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x0a,
	0x21, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x24, 0x0a, 0x22, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x4e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x4e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x43, 0x0a, 0x15, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x6e, 0x68, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x03, 0x6e, 0x68, 0x67, 0x22, 0x20, 0x0a, 0x1e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x6d, 0x65, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x6d, 0x65, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x29,
	0x0a, 0x13, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x14, 0x4e, 0x65, 0x78,
	0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2a, 0x0a, 0x03, 0x6e, 0x68, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x03, 0x6e, 0x68, 0x67, 0x22, 0x3a, 0x0a,
	0x0e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x4c, 0x0a, 0x0f, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x68,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x6c, 0x0a, 0x1b, 0x4e, 0x65, 0x78, 0x74, 0x68,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x42, 0x0b, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72,
	0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22, 0x6f, 0x0a, 0x1c, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x22, 0x2f, 0x0a, 0x19, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x1a, 0x4e, 0x65, 0x78, 0x74, 0x68,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x2f, 0x0a,
	0x19, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x34,
	0x0a, 0x1a, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x16, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x03, 0x6e, 0x68, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x03, 0x6e, 0x68, 0x67, 0x12, 0x2f, 0x0a, 0x11, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x22, 0x38, 0x0a, 0x17, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x1a,
	0x42, 0x75, 0x6c, 0x6b, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x1b, 0x42,
	0x75, 0x6c, 0x6b, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x41, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x22, 0x2c, 0x0a, 0x16, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x19, 0x0a, 0x17, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x0a, 0x1a, 0x42,
	0x75, 0x6c, 0x6b, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x72, 0x0a, 0x1b, 0x42, 0x75, 0x6c,
	0x6b, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x33, 0x0a,
	0x1d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x68,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x4c, 0x0a, 0x1e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x64,
	0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x6e, 0x68, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e,
	0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x03, 0x6e, 0x68, 0x67,
	0x2a, 0xc3, 0x01, 0x0a, 0x18, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x57, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x15, 0x0a,
	0x11, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41,
	0x4c, 0x4c, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x50, 0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x4d, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18,
	0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x56, 0x45,
	0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x45,
	0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4e, 0x48, 0x47, 0x10,
	0x04, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x4f, 0x4e, 0x5f, 0x4e, 0x48, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x41,
	0x4d, 0x4d, 0x45, 0x44, 0x10, 0x05, 0x32, 0xeb, 0x0b, 0x0a, 0x16, 0x4e, 0x65, 0x78, 0x74, 0x68,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x67, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x58, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x12, 0x24, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x4e, 0x65, 0x78,
	0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x66, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x29, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x4e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x68,
	0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x20, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x78, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x64,
	0x5f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x2a, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x6d, 0x65, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x54, 0x0a, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x68,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x44, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x0c, 0x6e, 0x68, 0x67, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x27, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e,
	0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x59, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x25, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x16, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x12,
	0x26, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c,
	0x6b, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5e, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x12, 0x22, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6b, 0x0a, 0x16, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x68,
	0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x6c, 0x12, 0x26, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x4e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x73, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x64, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x29, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x6d, 0x65, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x65, 0x64, 0x4e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x12, 0x5a, 0x10, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x45,
	0x6f, 0x73, 0x53, 0x64, 0x6b, 0x52, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nexthop_group_proto_rawDescOnce sync.Once
	file_nexthop_group_proto_rawDescData = file_nexthop_group_proto_rawDesc
)

func file_nexthop_group_proto_rawDescGZIP() []byte {
	file_nexthop_group_proto_rawDescOnce.Do(func() {
		file_nexthop_group_proto_rawDescData = protoimpl.X.CompressGZIP(file_nexthop_group_proto_rawDescData)
	})
	return file_nexthop_group_proto_rawDescData
}

var file_nexthop_group_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_nexthop_group_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_nexthop_group_proto_goTypes = []interface{}{
	(NexthopGroupWatchedField)(0),              // 0: eos.remote.NexthopGroupWatchedField
	(*NexthopGroupFieldsControl)(nil),          // 1: eos.remote.NexthopGroupFieldsControl
	(*WatchNexthopGroupRequest)(nil),           // 2: eos.remote.WatchNexthopGroupRequest
	(*WatchNexthopGroupResponse)(nil),          // 3: eos.remote.WatchNexthopGroupResponse
	(*ResyncNexthopGroupInitRequest)(nil),      // 4: eos.remote.ResyncNexthopGroupInitRequest
	(*ResyncNexthopGroupInitResponse)(nil),     // 5: eos.remote.ResyncNexthopGroupInitResponse
	(*ResyncNexthopGroupCompleteRequest)(nil),  // 6: eos.remote.ResyncNexthopGroupCompleteRequest
	(*ResyncNexthopGroupCompleteResponse)(nil), // 7: eos.remote.ResyncNexthopGroupCompleteResponse
	(*NexthopGroupsRequest)(nil),               // 8: eos.remote.NexthopGroupsRequest
	(*NexthopGroupsResponse)(nil),              // 9: eos.remote.NexthopGroupsResponse
	(*ProgrammedNexthopGroupsRequest)(nil),     // 10: eos.remote.ProgrammedNexthopGroupsRequest
	(*ProgrammedNexthopGroupsResponse)(nil),    // 11: eos.remote.ProgrammedNexthopGroupsResponse
	(*NexthopGroupRequest)(nil),                // 12: eos.remote.NexthopGroupRequest
	(*NexthopGroupResponse)(nil),               // 13: eos.remote.NexthopGroupResponse
	(*CounterRequest)(nil),                     // 14: eos.remote.CounterRequest
	(*CounterResponse)(nil),                    // 15: eos.remote.CounterResponse
	(*NexthopGroupCountersRequest)(nil),        // 16: eos.remote.NexthopGroupCountersRequest
	(*NexthopGroupCountersResponse)(nil),       // 17: eos.remote.NexthopGroupCountersResponse
	(*NexthopGroupExistsRequest)(nil),          // 18: eos.remote.NexthopGroupExistsRequest
	(*NexthopGroupExistsResponse)(nil),         // 19: eos.remote.NexthopGroupExistsResponse
	(*NexthopGroupActiveRequest)(nil),          // 20: eos.remote.NexthopGroupActiveRequest
	(*NexthopGroupActiveResponse)(nil),         // 21: eos.remote.NexthopGroupActiveResponse
	(*NexthopGroupSetRequest)(nil),             // 22: eos.remote.NexthopGroupSetRequest
	(*NexthopGroupSetResponse)(nil),            // 23: eos.remote.NexthopGroupSetResponse
	(*BulkNexthopGroupSetRequest)(nil),         // 24: eos.remote.BulkNexthopGroupSetRequest
	(*BulkNexthopGroupSetResponse)(nil),        // 25: eos.remote.BulkNexthopGroupSetResponse
	(*NexthopGroupDelRequest)(nil),             // 26: eos.remote.NexthopGroupDelRequest
	(*NexthopGroupDelResponse)(nil),            // 27: eos.remote.NexthopGroupDelResponse
	(*BulkNexthopGroupDelRequest)(nil),         // 28: eos.remote.BulkNexthopGroupDelRequest
	(*BulkNexthopGroupDelResponse)(nil),        // 29: eos.remote.BulkNexthopGroupDelResponse
	(*ProgrammedNexthopGroupRequest)(nil),      // 30: eos.remote.ProgrammedNexthopGroupRequest
	(*ProgrammedNexthopGroupResponse)(nil),     // 31: eos.remote.ProgrammedNexthopGroupResponse
	(*NexthopGroup)(nil),                       // 32: eos.remote.NexthopGroup
	(*OnNexthopGroupProgrammed)(nil),           // 33: eos.remote.OnNexthopGroupProgrammed
	(*NexthopGroupCounter)(nil),                // 34: eos.remote.NexthopGroupCounter
	(*RpcResponseStatus)(nil),                  // 35: eos.remote.RpcResponseStatus
}
var file_nexthop_group_proto_depIdxs = []int32{
	0,  // 0: eos.remote.NexthopGroupFieldsControl.fields:type_name -> eos.remote.NexthopGroupWatchedField
	1,  // 1: eos.remote.WatchNexthopGroupRequest.dump_fields:type_name -> eos.remote.NexthopGroupFieldsControl
	32, // 2: eos.remote.WatchNexthopGroupResponse.nhg:type_name -> eos.remote.NexthopGroup
	33, // 3: eos.remote.WatchNexthopGroupResponse.on_nhg_programmed:type_name -> eos.remote.OnNexthopGroupProgrammed
	32, // 4: eos.remote.NexthopGroupsResponse.nhg:type_name -> eos.remote.NexthopGroup
	32, // 5: eos.remote.NexthopGroupResponse.nhg:type_name -> eos.remote.NexthopGroup
	34, // 6: eos.remote.CounterResponse.counter:type_name -> eos.remote.NexthopGroupCounter
	34, // 7: eos.remote.NexthopGroupCountersResponse.counters:type_name -> eos.remote.NexthopGroupCounter
	32, // 8: eos.remote.NexthopGroupSetRequest.nhg:type_name -> eos.remote.NexthopGroup
	22, // 9: eos.remote.BulkNexthopGroupSetRequest.requests:type_name -> eos.remote.NexthopGroupSetRequest
	35, // 10: eos.remote.BulkNexthopGroupSetResponse.status:type_name -> eos.remote.RpcResponseStatus
	23, // 11: eos.remote.BulkNexthopGroupSetResponse.responses:type_name -> eos.remote.NexthopGroupSetResponse
	26, // 12: eos.remote.BulkNexthopGroupDelRequest.requests:type_name -> eos.remote.NexthopGroupDelRequest
	35, // 13: eos.remote.BulkNexthopGroupDelResponse.status:type_name -> eos.remote.RpcResponseStatus
	32, // 14: eos.remote.ProgrammedNexthopGroupResponse.nhg:type_name -> eos.remote.NexthopGroup
	2,  // 15: eos.remote.NexthopGroupMgrService.watch:input_type -> eos.remote.WatchNexthopGroupRequest
	4,  // 16: eos.remote.NexthopGroupMgrService.resync_init:input_type -> eos.remote.ResyncNexthopGroupInitRequest
	6,  // 17: eos.remote.NexthopGroupMgrService.resync_complete:input_type -> eos.remote.ResyncNexthopGroupCompleteRequest
	8,  // 18: eos.remote.NexthopGroupMgrService.nexthop_groups:input_type -> eos.remote.NexthopGroupsRequest
	10, // 19: eos.remote.NexthopGroupMgrService.programmed_nexthop_groups:input_type -> eos.remote.ProgrammedNexthopGroupsRequest
	12, // 20: eos.remote.NexthopGroupMgrService.nexthop_group:input_type -> eos.remote.NexthopGroupRequest
	14, // 21: eos.remote.NexthopGroupMgrService.counter:input_type -> eos.remote.CounterRequest
	16, // 22: eos.remote.NexthopGroupMgrService.nhg_counters:input_type -> eos.remote.NexthopGroupCountersRequest
	18, // 23: eos.remote.NexthopGroupMgrService.exists:input_type -> eos.remote.NexthopGroupExistsRequest
	20, // 24: eos.remote.NexthopGroupMgrService.active:input_type -> eos.remote.NexthopGroupActiveRequest
	22, // 25: eos.remote.NexthopGroupMgrService.nexthop_group_set:input_type -> eos.remote.NexthopGroupSetRequest
	24, // 26: eos.remote.NexthopGroupMgrService.bulk_nexthop_group_set:input_type -> eos.remote.BulkNexthopGroupSetRequest
	26, // 27: eos.remote.NexthopGroupMgrService.nexthop_group_del:input_type -> eos.remote.NexthopGroupDelRequest
	28, // 28: eos.remote.NexthopGroupMgrService.bulk_nexthop_group_del:input_type -> eos.remote.BulkNexthopGroupDelRequest
	30, // 29: eos.remote.NexthopGroupMgrService.programmed_nexthop_group:input_type -> eos.remote.ProgrammedNexthopGroupRequest
	3,  // 30: eos.remote.NexthopGroupMgrService.watch:output_type -> eos.remote.WatchNexthopGroupResponse
	5,  // 31: eos.remote.NexthopGroupMgrService.resync_init:output_type -> eos.remote.ResyncNexthopGroupInitResponse
	7,  // 32: eos.remote.NexthopGroupMgrService.resync_complete:output_type -> eos.remote.ResyncNexthopGroupCompleteResponse
	9,  // 33: eos.remote.NexthopGroupMgrService.nexthop_groups:output_type -> eos.remote.NexthopGroupsResponse
	11, // 34: eos.remote.NexthopGroupMgrService.programmed_nexthop_groups:output_type -> eos.remote.ProgrammedNexthopGroupsResponse
	13, // 35: eos.remote.NexthopGroupMgrService.nexthop_group:output_type -> eos.remote.NexthopGroupResponse
	15, // 36: eos.remote.NexthopGroupMgrService.counter:output_type -> eos.remote.CounterResponse
	17, // 37: eos.remote.NexthopGroupMgrService.nhg_counters:output_type -> eos.remote.NexthopGroupCountersResponse
	19, // 38: eos.remote.NexthopGroupMgrService.exists:output_type -> eos.remote.NexthopGroupExistsResponse
	21, // 39: eos.remote.NexthopGroupMgrService.active:output_type -> eos.remote.NexthopGroupActiveResponse
	23, // 40: eos.remote.NexthopGroupMgrService.nexthop_group_set:output_type -> eos.remote.NexthopGroupSetResponse
	25, // 41: eos.remote.NexthopGroupMgrService.bulk_nexthop_group_set:output_type -> eos.remote.BulkNexthopGroupSetResponse
	27, // 42: eos.remote.NexthopGroupMgrService.nexthop_group_del:output_type -> eos.remote.NexthopGroupDelResponse
	29, // 43: eos.remote.NexthopGroupMgrService.bulk_nexthop_group_del:output_type -> eos.remote.BulkNexthopGroupDelResponse
	31, // 44: eos.remote.NexthopGroupMgrService.programmed_nexthop_group:output_type -> eos.remote.ProgrammedNexthopGroupResponse
	30, // [30:45] is the sub-list for method output_type
	15, // [15:30] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_nexthop_group_proto_init() }
func file_nexthop_group_proto_init() {
	if File_nexthop_group_proto != nil {
		return
	}
	file_rpc_types_proto_init()
	file_nexthop_group_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_nexthop_group_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NexthopGroupFieldsControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchNexthopGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchNexthopGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResyncNexthopGroupInitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResyncNexthopGroupInitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResyncNexthopGroupCompleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResyncNexthopGroupCompleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NexthopGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NexthopGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgrammedNexthopGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgrammedNexthopGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NexthopGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NexthopGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CounterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NexthopGroupCountersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NexthopGroupCountersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NexthopGroupExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NexthopGroupExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NexthopGroupActiveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NexthopGroupActiveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NexthopGroupSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NexthopGroupSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkNexthopGroupSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkNexthopGroupSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NexthopGroupDelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NexthopGroupDelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkNexthopGroupDelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkNexthopGroupDelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgrammedNexthopGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgrammedNexthopGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_nexthop_group_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*WatchNexthopGroupRequest_All)(nil),
		(*WatchNexthopGroupRequest_Name)(nil),
	}
	file_nexthop_group_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*WatchNexthopGroupResponse_ActiveStatus)(nil),
		(*WatchNexthopGroupResponse_NhgProgrammed)(nil),
	}
	file_nexthop_group_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*NexthopGroupCountersRequest_All)(nil),
		(*NexthopGroupCountersRequest_Name)(nil),
		(*NexthopGroupCountersRequest_Regex)(nil),
	}
	file_nexthop_group_proto_msgTypes[21].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nexthop_group_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nexthop_group_proto_goTypes,
		DependencyIndexes: file_nexthop_group_proto_depIdxs,
		EnumInfos:         file_nexthop_group_proto_enumTypes,
		MessageInfos:      file_nexthop_group_proto_msgTypes,
	}.Build()
	File_nexthop_group_proto = out.File
	file_nexthop_group_proto_rawDesc = nil
	file_nexthop_group_proto_goTypes = nil
	file_nexthop_group_proto_depIdxs = nil
}
