// Copyright (c) 2023 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: structured_filter_types.proto

package EosSdkRpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TrafficPolicyRuleType int32

const (
	TrafficPolicyRuleType_TRAFFIC_POLICY_RULE_TYPE_NULL TrafficPolicyRuleType = 0
	TrafficPolicyRuleType_TRAFFIC_POLICY_RULE_TYPE_IPV4 TrafficPolicyRuleType = 1
	TrafficPolicyRuleType_TRAFFIC_POLICY_RULE_TYPE_IPV6 TrafficPolicyRuleType = 2
)

// Enum value maps for TrafficPolicyRuleType.
var (
	TrafficPolicyRuleType_name = map[int32]string{
		0: "TRAFFIC_POLICY_RULE_TYPE_NULL",
		1: "TRAFFIC_POLICY_RULE_TYPE_IPV4",
		2: "TRAFFIC_POLICY_RULE_TYPE_IPV6",
	}
	TrafficPolicyRuleType_value = map[string]int32{
		"TRAFFIC_POLICY_RULE_TYPE_NULL": 0,
		"TRAFFIC_POLICY_RULE_TYPE_IPV4": 1,
		"TRAFFIC_POLICY_RULE_TYPE_IPV6": 2,
	}
)

func (x TrafficPolicyRuleType) Enum() *TrafficPolicyRuleType {
	p := new(TrafficPolicyRuleType)
	*p = x
	return p
}

func (x TrafficPolicyRuleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrafficPolicyRuleType) Descriptor() protoreflect.EnumDescriptor {
	return file_structured_filter_types_proto_enumTypes[0].Descriptor()
}

func (TrafficPolicyRuleType) Type() protoreflect.EnumType {
	return &file_structured_filter_types_proto_enumTypes[0]
}

func (x TrafficPolicyRuleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrafficPolicyRuleType.Descriptor instead.
func (TrafficPolicyRuleType) EnumDescriptor() ([]byte, []int) {
	return file_structured_filter_types_proto_rawDescGZIP(), []int{0}
}

// *
// This type is used to store the configs of all match fields of a
// traffic-policy rule.
//
// EosSdk reference: eos::tp_rule_filter_t
type TpRuleFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcAddrs         []*IpAddrMask                 `protobuf:"bytes,1,rep,name=src_addrs,json=srcAddrs,proto3" json:"src_addrs,omitempty"`
	SrcAddrFieldSets []string                      `protobuf:"bytes,2,rep,name=src_addr_field_sets,json=srcAddrFieldSets,proto3" json:"src_addr_field_sets,omitempty"`
	DstAddrs         []*IpAddrMask                 `protobuf:"bytes,3,rep,name=dst_addrs,json=dstAddrs,proto3" json:"dst_addrs,omitempty"`
	DstAddrFieldSets []string                      `protobuf:"bytes,4,rep,name=dst_addr_field_sets,json=dstAddrFieldSets,proto3" json:"dst_addr_field_sets,omitempty"`
	ProtocolValues   []*TpRuleFilter_ProtocolValue `protobuf:"bytes,5,rep,name=protocol_values,json=protocolValues,proto3" json:"protocol_values,omitempty"`
	FilterType       TrafficPolicyRuleType         `protobuf:"varint,6,opt,name=filter_type,json=filterType,proto3,enum=eos.remote.TrafficPolicyRuleType" json:"filter_type,omitempty"`
}

func (x *TpRuleFilter) Reset() {
	*x = TpRuleFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_structured_filter_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpRuleFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpRuleFilter) ProtoMessage() {}

func (x *TpRuleFilter) ProtoReflect() protoreflect.Message {
	mi := &file_structured_filter_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpRuleFilter.ProtoReflect.Descriptor instead.
func (*TpRuleFilter) Descriptor() ([]byte, []int) {
	return file_structured_filter_types_proto_rawDescGZIP(), []int{0}
}

func (x *TpRuleFilter) GetSrcAddrs() []*IpAddrMask {
	if x != nil {
		return x.SrcAddrs
	}
	return nil
}

func (x *TpRuleFilter) GetSrcAddrFieldSets() []string {
	if x != nil {
		return x.SrcAddrFieldSets
	}
	return nil
}

func (x *TpRuleFilter) GetDstAddrs() []*IpAddrMask {
	if x != nil {
		return x.DstAddrs
	}
	return nil
}

func (x *TpRuleFilter) GetDstAddrFieldSets() []string {
	if x != nil {
		return x.DstAddrFieldSets
	}
	return nil
}

func (x *TpRuleFilter) GetProtocolValues() []*TpRuleFilter_ProtocolValue {
	if x != nil {
		return x.ProtocolValues
	}
	return nil
}

func (x *TpRuleFilter) GetFilterType() TrafficPolicyRuleType {
	if x != nil {
		return x.FilterType
	}
	return TrafficPolicyRuleType_TRAFFIC_POLICY_RULE_TYPE_NULL
}

// *
// Field type used to configure the protocol ranges or protocol field-sets.
//
// EosSdk reference: eos::protocol_field_t
type ProtocolField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ports map[uint32]*PortField `protobuf:"bytes,1,rep,name=ports,proto3" json:"ports,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ProtocolField) Reset() {
	*x = ProtocolField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_structured_filter_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolField) ProtoMessage() {}

func (x *ProtocolField) ProtoReflect() protoreflect.Message {
	mi := &file_structured_filter_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolField.ProtoReflect.Descriptor instead.
func (*ProtocolField) Descriptor() ([]byte, []int) {
	return file_structured_filter_types_proto_rawDescGZIP(), []int{1}
}

func (x *ProtocolField) GetPorts() map[uint32]*PortField {
	if x != nil {
		return x.Ports
	}
	return nil
}

// *
// Field type used to configure the port ranges or port field-sets.
//
// EosSdk reference: eos::port_field_t
type PortField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcPorts         []*Range `protobuf:"bytes,1,rep,name=src_ports,json=srcPorts,proto3" json:"src_ports,omitempty"`
	DstPorts         []*Range `protobuf:"bytes,2,rep,name=dst_ports,json=dstPorts,proto3" json:"dst_ports,omitempty"`
	SrcPortFieldSets []string `protobuf:"bytes,3,rep,name=src_port_field_sets,json=srcPortFieldSets,proto3" json:"src_port_field_sets,omitempty"`
	DstPortFieldSets []string `protobuf:"bytes,4,rep,name=dst_port_field_sets,json=dstPortFieldSets,proto3" json:"dst_port_field_sets,omitempty"`
}

func (x *PortField) Reset() {
	*x = PortField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_structured_filter_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortField) ProtoMessage() {}

func (x *PortField) ProtoReflect() protoreflect.Message {
	mi := &file_structured_filter_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortField.ProtoReflect.Descriptor instead.
func (*PortField) Descriptor() ([]byte, []int) {
	return file_structured_filter_types_proto_rawDescGZIP(), []int{2}
}

func (x *PortField) GetSrcPorts() []*Range {
	if x != nil {
		return x.SrcPorts
	}
	return nil
}

func (x *PortField) GetDstPorts() []*Range {
	if x != nil {
		return x.DstPorts
	}
	return nil
}

func (x *PortField) GetSrcPortFieldSets() []string {
	if x != nil {
		return x.SrcPortFieldSets
	}
	return nil
}

func (x *PortField) GetDstPortFieldSets() []string {
	if x != nil {
		return x.DstPortFieldSets
	}
	return nil
}

type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RangeStart uint32 `protobuf:"varint,1,opt,name=range_start,json=rangeStart,proto3" json:"range_start,omitempty"`
	RangeEnd   uint32 `protobuf:"varint,2,opt,name=range_end,json=rangeEnd,proto3" json:"range_end,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_structured_filter_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_structured_filter_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_structured_filter_types_proto_rawDescGZIP(), []int{3}
}

func (x *Range) GetRangeStart() uint32 {
	if x != nil {
		return x.RangeStart
	}
	return 0
}

func (x *Range) GetRangeEnd() uint32 {
	if x != nil {
		return x.RangeEnd
	}
	return 0
}

type TpRuleFilter_ProtocolValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolRange *Range         `protobuf:"bytes,1,opt,name=protocol_range,json=protocolRange,proto3" json:"protocol_range,omitempty"`
	ProtocolField *ProtocolField `protobuf:"bytes,2,opt,name=protocol_field,json=protocolField,proto3" json:"protocol_field,omitempty"`
}

func (x *TpRuleFilter_ProtocolValue) Reset() {
	*x = TpRuleFilter_ProtocolValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_structured_filter_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpRuleFilter_ProtocolValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpRuleFilter_ProtocolValue) ProtoMessage() {}

func (x *TpRuleFilter_ProtocolValue) ProtoReflect() protoreflect.Message {
	mi := &file_structured_filter_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpRuleFilter_ProtocolValue.ProtoReflect.Descriptor instead.
func (*TpRuleFilter_ProtocolValue) Descriptor() ([]byte, []int) {
	return file_structured_filter_types_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TpRuleFilter_ProtocolValue) GetProtocolRange() *Range {
	if x != nil {
		return x.ProtocolRange
	}
	return nil
}

func (x *TpRuleFilter_ProtocolValue) GetProtocolField() *ProtocolField {
	if x != nil {
		return x.ProtocolField
	}
	return nil
}

var File_structured_filter_types_proto protoreflect.FileDescriptor

var file_structured_filter_types_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x1a, 0x13, 0x69, 0x70, 0x5f,
	0x69, 0x6e, 0x74, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xf9, 0x03, 0x0a, 0x0c, 0x54, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x08, 0x73, 0x72,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x53, 0x65, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x64, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x61, 0x73, 0x6b,
	0x52, 0x08, 0x64, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x64, 0x73,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x64, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x54, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x8b,
	0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x38, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x9c, 0x01, 0x0a,
	0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x3a,
	0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x4f, 0x0a, 0x0a, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc9, 0x01, 0x0a, 0x09,
	0x50, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x72, 0x63,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x08, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x64, 0x73, 0x74,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x08, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x72, 0x63,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x72, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x64, 0x73, 0x74, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x64, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x73, 0x22, 0x45, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x64, 0x2a, 0x80,
	0x01, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x52, 0x41, 0x46,
	0x46, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x54,
	0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x52, 0x55,
	0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x10, 0x01, 0x12, 0x21,
	0x0a, 0x1d, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10,
	0x02, 0x42, 0x12, 0x5a, 0x10, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x45, 0x6f, 0x73, 0x53,
	0x64, 0x6b, 0x52, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_structured_filter_types_proto_rawDescOnce sync.Once
	file_structured_filter_types_proto_rawDescData = file_structured_filter_types_proto_rawDesc
)

func file_structured_filter_types_proto_rawDescGZIP() []byte {
	file_structured_filter_types_proto_rawDescOnce.Do(func() {
		file_structured_filter_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_structured_filter_types_proto_rawDescData)
	})
	return file_structured_filter_types_proto_rawDescData
}

var file_structured_filter_types_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_structured_filter_types_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_structured_filter_types_proto_goTypes = []interface{}{
	(TrafficPolicyRuleType)(0),         // 0: eos.remote.TrafficPolicyRuleType
	(*TpRuleFilter)(nil),               // 1: eos.remote.TpRuleFilter
	(*ProtocolField)(nil),              // 2: eos.remote.ProtocolField
	(*PortField)(nil),                  // 3: eos.remote.PortField
	(*Range)(nil),                      // 4: eos.remote.Range
	(*TpRuleFilter_ProtocolValue)(nil), // 5: eos.remote.TpRuleFilter.ProtocolValue
	nil,                                // 6: eos.remote.ProtocolField.PortsEntry
	(*IpAddrMask)(nil),                 // 7: eos.remote.IpAddrMask
}
var file_structured_filter_types_proto_depIdxs = []int32{
	7,  // 0: eos.remote.TpRuleFilter.src_addrs:type_name -> eos.remote.IpAddrMask
	7,  // 1: eos.remote.TpRuleFilter.dst_addrs:type_name -> eos.remote.IpAddrMask
	5,  // 2: eos.remote.TpRuleFilter.protocol_values:type_name -> eos.remote.TpRuleFilter.ProtocolValue
	0,  // 3: eos.remote.TpRuleFilter.filter_type:type_name -> eos.remote.TrafficPolicyRuleType
	6,  // 4: eos.remote.ProtocolField.ports:type_name -> eos.remote.ProtocolField.PortsEntry
	4,  // 5: eos.remote.PortField.src_ports:type_name -> eos.remote.Range
	4,  // 6: eos.remote.PortField.dst_ports:type_name -> eos.remote.Range
	4,  // 7: eos.remote.TpRuleFilter.ProtocolValue.protocol_range:type_name -> eos.remote.Range
	2,  // 8: eos.remote.TpRuleFilter.ProtocolValue.protocol_field:type_name -> eos.remote.ProtocolField
	3,  // 9: eos.remote.ProtocolField.PortsEntry.value:type_name -> eos.remote.PortField
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_structured_filter_types_proto_init() }
func file_structured_filter_types_proto_init() {
	if File_structured_filter_types_proto != nil {
		return
	}
	file_ip_intf_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_structured_filter_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpRuleFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_structured_filter_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_structured_filter_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_structured_filter_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_structured_filter_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpRuleFilter_ProtocolValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_structured_filter_types_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_structured_filter_types_proto_goTypes,
		DependencyIndexes: file_structured_filter_types_proto_depIdxs,
		EnumInfos:         file_structured_filter_types_proto_enumTypes,
		MessageInfos:      file_structured_filter_types_proto_msgTypes,
	}.Build()
	File_structured_filter_types_proto = out.File
	file_structured_filter_types_proto_rawDesc = nil
	file_structured_filter_types_proto_goTypes = nil
	file_structured_filter_types_proto_depIdxs = nil
}
