// Arista Networks, Inc. Confidential and Proprietary.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: eth_phy_intf.proto

package EosSdkRpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Notification when a physical ethernet interface is created.
//
// After on_eth_phy_intf_create is sent, the given intf_id is
// guaranteed to exist (ie eth_phy_intf_mgr::exists will return
// true). At that point, the intf_id can be used with all methods
// of the eth_phy_intf_mgr class.
//
// This also means that the intf_id can be used with all other
// relevant *intf_mgr classes (ie intf_mgr and eth_intf_mgr).
type OnEthPhyIntfCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntfId *IntfId `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
}

func (x *OnEthPhyIntfCreate) Reset() {
	*x = OnEthPhyIntfCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_phy_intf_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnEthPhyIntfCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnEthPhyIntfCreate) ProtoMessage() {}

func (x *OnEthPhyIntfCreate) ProtoReflect() protoreflect.Message {
	mi := &file_eth_phy_intf_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnEthPhyIntfCreate.ProtoReflect.Descriptor instead.
func (*OnEthPhyIntfCreate) Descriptor() ([]byte, []int) {
	return file_eth_phy_intf_proto_rawDescGZIP(), []int{0}
}

func (x *OnEthPhyIntfCreate) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

// *
// Notification when a physical ethernet interface is deleted.
//
// After on_eth_phy_intf_delete is sent, the given intf_id is
// guaranteed to not exist (ie eth_phy_intf_mgr::exists will return
// false). At that point, the intf_id cannot be used with any
// methods in the eth_phy_intf_mgr class.
//
// This also means that the intf_id can no longer be used with all
// other relevant *intf_mgr classes (ie intf_mgr and eth_intf_mgr).
type OnEthPhyIntfDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntfId *IntfId `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
}

func (x *OnEthPhyIntfDelete) Reset() {
	*x = OnEthPhyIntfDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_phy_intf_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnEthPhyIntfDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnEthPhyIntfDelete) ProtoMessage() {}

func (x *OnEthPhyIntfDelete) ProtoReflect() protoreflect.Message {
	mi := &file_eth_phy_intf_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnEthPhyIntfDelete.ProtoReflect.Descriptor instead.
func (*OnEthPhyIntfDelete) Descriptor() ([]byte, []int) {
	return file_eth_phy_intf_proto_rawDescGZIP(), []int{1}
}

func (x *OnEthPhyIntfDelete) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

// *
// Notification when the presence of the underlying hardware for
// the physical ethernet interface changes.
//
// When a physical interface goes from not-present to present, only
// on_eth_phy_intf_hardware_present is sent even though
// other attributes (like the link_speed) of the eth_phy_intf may
// have changed. Similarly, when the physical interface hardware
// goes from present to not-present, attributes of the eth_phy_intf
// (like the link_speed) that are based on the underlying hardware
// will go back to their default values even though specific events
// for these changes are not sent. It is up to the user to handle
// the new values of those attributes upon reception of
// on_eth_phy_intf_hardware_present handler.
type OnEthPhyIntfHardwarePresent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntfId          *IntfId `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
	HardwarePresent bool    `protobuf:"varint,2,opt,name=hardware_present,json=hardwarePresent,proto3" json:"hardware_present,omitempty"`
}

func (x *OnEthPhyIntfHardwarePresent) Reset() {
	*x = OnEthPhyIntfHardwarePresent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_phy_intf_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnEthPhyIntfHardwarePresent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnEthPhyIntfHardwarePresent) ProtoMessage() {}

func (x *OnEthPhyIntfHardwarePresent) ProtoReflect() protoreflect.Message {
	mi := &file_eth_phy_intf_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnEthPhyIntfHardwarePresent.ProtoReflect.Descriptor instead.
func (*OnEthPhyIntfHardwarePresent) Descriptor() ([]byte, []int) {
	return file_eth_phy_intf_proto_rawDescGZIP(), []int{2}
}

func (x *OnEthPhyIntfHardwarePresent) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

func (x *OnEthPhyIntfHardwarePresent) GetHardwarePresent() bool {
	if x != nil {
		return x.HardwarePresent
	}
	return false
}

// *
// Notification when the operational link speed changes.
type OnEthPhyIntfLinkSpeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntfId    *IntfId             `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
	LinkSpeed EthPhyIntfLinkSpeed `protobuf:"varint,2,opt,name=link_speed,json=linkSpeed,proto3,enum=eos.remote.EthPhyIntfLinkSpeed" json:"link_speed,omitempty"`
}

func (x *OnEthPhyIntfLinkSpeed) Reset() {
	*x = OnEthPhyIntfLinkSpeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_phy_intf_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnEthPhyIntfLinkSpeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnEthPhyIntfLinkSpeed) ProtoMessage() {}

func (x *OnEthPhyIntfLinkSpeed) ProtoReflect() protoreflect.Message {
	mi := &file_eth_phy_intf_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnEthPhyIntfLinkSpeed.ProtoReflect.Descriptor instead.
func (*OnEthPhyIntfLinkSpeed) Descriptor() ([]byte, []int) {
	return file_eth_phy_intf_proto_rawDescGZIP(), []int{3}
}

func (x *OnEthPhyIntfLinkSpeed) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

func (x *OnEthPhyIntfLinkSpeed) GetLinkSpeed() EthPhyIntfLinkSpeed {
	if x != nil {
		return x.LinkSpeed
	}
	return EthPhyIntfLinkSpeed_ETH_PHY_INTF_LINK_SPEED_UNKNOWN
}

// *
// Notification when a transceiver insertion or removal is detected.
type OnEthPhyIntfTransceiverPresent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntfId             *IntfId `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
	TransceiverPresent bool    `protobuf:"varint,2,opt,name=transceiver_present,json=transceiverPresent,proto3" json:"transceiver_present,omitempty"`
}

func (x *OnEthPhyIntfTransceiverPresent) Reset() {
	*x = OnEthPhyIntfTransceiverPresent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_phy_intf_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnEthPhyIntfTransceiverPresent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnEthPhyIntfTransceiverPresent) ProtoMessage() {}

func (x *OnEthPhyIntfTransceiverPresent) ProtoReflect() protoreflect.Message {
	mi := &file_eth_phy_intf_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnEthPhyIntfTransceiverPresent.ProtoReflect.Descriptor instead.
func (*OnEthPhyIntfTransceiverPresent) Descriptor() ([]byte, []int) {
	return file_eth_phy_intf_proto_rawDescGZIP(), []int{4}
}

func (x *OnEthPhyIntfTransceiverPresent) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

func (x *OnEthPhyIntfTransceiverPresent) GetTransceiverPresent() bool {
	if x != nil {
		return x.TransceiverPresent
	}
	return false
}

type EthPhyIntfWatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set to true when instant acknowledgment is desired.
	Ack bool `protobuf:"varint,3,opt,name=ack,proto3" json:"ack,omitempty"`
	// Types that are assignable to Options:
	//
	//	*EthPhyIntfWatchRequest_AllIntfs
	//	*EthPhyIntfWatchRequest_IntfId
	Options isEthPhyIntfWatchRequest_Options `protobuf_oneof:"options"`
}

func (x *EthPhyIntfWatchRequest) Reset() {
	*x = EthPhyIntfWatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_phy_intf_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthPhyIntfWatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthPhyIntfWatchRequest) ProtoMessage() {}

func (x *EthPhyIntfWatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eth_phy_intf_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthPhyIntfWatchRequest.ProtoReflect.Descriptor instead.
func (*EthPhyIntfWatchRequest) Descriptor() ([]byte, []int) {
	return file_eth_phy_intf_proto_rawDescGZIP(), []int{5}
}

func (x *EthPhyIntfWatchRequest) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

func (m *EthPhyIntfWatchRequest) GetOptions() isEthPhyIntfWatchRequest_Options {
	if m != nil {
		return m.Options
	}
	return nil
}

func (x *EthPhyIntfWatchRequest) GetAllIntfs() bool {
	if x, ok := x.GetOptions().(*EthPhyIntfWatchRequest_AllIntfs); ok {
		return x.AllIntfs
	}
	return false
}

func (x *EthPhyIntfWatchRequest) GetIntfId() *IntfId {
	if x, ok := x.GetOptions().(*EthPhyIntfWatchRequest_IntfId); ok {
		return x.IntfId
	}
	return nil
}

type isEthPhyIntfWatchRequest_Options interface {
	isEthPhyIntfWatchRequest_Options()
}

type EthPhyIntfWatchRequest_AllIntfs struct {
	// Subscribes events on all interfaces.
	AllIntfs bool `protobuf:"varint,1,opt,name=all_intfs,json=allIntfs,proto3,oneof"`
}

type EthPhyIntfWatchRequest_IntfId struct {
	// Subscribes for events on a specified interface.
	IntfId *IntfId `protobuf:"bytes,2,opt,name=intf_id,json=intfId,proto3,oneof"`
}

func (*EthPhyIntfWatchRequest_AllIntfs) isEthPhyIntfWatchRequest_Options() {}

func (*EthPhyIntfWatchRequest_IntfId) isEthPhyIntfWatchRequest_Options() {}

// *
// ack = True if message is only an acknowledgment or possible combinations of
// events. Whenever multiple events are present in a single message, the event
// on_eth_phy_intf_created, if present, is always the first in the sequence
// and the event on_eth_intf_deleted, if present, is always the last one in
// the original sequence. The order of the remaining events is not relevant.
type EthPhyIntfWatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnEthPhyIntfCreate             *OnEthPhyIntfCreate             `protobuf:"bytes,1,opt,name=on_eth_phy_intf_create,json=onEthPhyIntfCreate,proto3" json:"on_eth_phy_intf_create,omitempty"`
	OnEthPhyIntfDelete             *OnEthPhyIntfDelete             `protobuf:"bytes,2,opt,name=on_eth_phy_intf_delete,json=onEthPhyIntfDelete,proto3" json:"on_eth_phy_intf_delete,omitempty"`
	OnEthPhyIntfHardwarePresent    *OnEthPhyIntfHardwarePresent    `protobuf:"bytes,3,opt,name=on_eth_phy_intf_hardware_present,json=onEthPhyIntfHardwarePresent,proto3" json:"on_eth_phy_intf_hardware_present,omitempty"`
	OnEthPhyIntfLinkSpeed          *OnEthPhyIntfLinkSpeed          `protobuf:"bytes,4,opt,name=on_eth_phy_intf_link_speed,json=onEthPhyIntfLinkSpeed,proto3" json:"on_eth_phy_intf_link_speed,omitempty"`
	OnEthPhyIntfTransceiverPresent *OnEthPhyIntfTransceiverPresent `protobuf:"bytes,5,opt,name=on_eth_phy_intf_transceiver_present,json=onEthPhyIntfTransceiverPresent,proto3" json:"on_eth_phy_intf_transceiver_present,omitempty"`
	// Simple acknowledgment.
	Ack bool `protobuf:"varint,6,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (x *EthPhyIntfWatchResponse) Reset() {
	*x = EthPhyIntfWatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_phy_intf_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthPhyIntfWatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthPhyIntfWatchResponse) ProtoMessage() {}

func (x *EthPhyIntfWatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eth_phy_intf_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthPhyIntfWatchResponse.ProtoReflect.Descriptor instead.
func (*EthPhyIntfWatchResponse) Descriptor() ([]byte, []int) {
	return file_eth_phy_intf_proto_rawDescGZIP(), []int{6}
}

func (x *EthPhyIntfWatchResponse) GetOnEthPhyIntfCreate() *OnEthPhyIntfCreate {
	if x != nil {
		return x.OnEthPhyIntfCreate
	}
	return nil
}

func (x *EthPhyIntfWatchResponse) GetOnEthPhyIntfDelete() *OnEthPhyIntfDelete {
	if x != nil {
		return x.OnEthPhyIntfDelete
	}
	return nil
}

func (x *EthPhyIntfWatchResponse) GetOnEthPhyIntfHardwarePresent() *OnEthPhyIntfHardwarePresent {
	if x != nil {
		return x.OnEthPhyIntfHardwarePresent
	}
	return nil
}

func (x *EthPhyIntfWatchResponse) GetOnEthPhyIntfLinkSpeed() *OnEthPhyIntfLinkSpeed {
	if x != nil {
		return x.OnEthPhyIntfLinkSpeed
	}
	return nil
}

func (x *EthPhyIntfWatchResponse) GetOnEthPhyIntfTransceiverPresent() *OnEthPhyIntfTransceiverPresent {
	if x != nil {
		return x.OnEthPhyIntfTransceiverPresent
	}
	return nil
}

func (x *EthPhyIntfWatchResponse) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

type EthPhyIntfsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EthPhyIntfsRequest) Reset() {
	*x = EthPhyIntfsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_phy_intf_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthPhyIntfsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthPhyIntfsRequest) ProtoMessage() {}

func (x *EthPhyIntfsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eth_phy_intf_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthPhyIntfsRequest.ProtoReflect.Descriptor instead.
func (*EthPhyIntfsRequest) Descriptor() ([]byte, []int) {
	return file_eth_phy_intf_proto_rawDescGZIP(), []int{7}
}

type EthPhyIntfsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A present interface.
	IntfId *IntfId `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
}

func (x *EthPhyIntfsResponse) Reset() {
	*x = EthPhyIntfsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_phy_intf_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthPhyIntfsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthPhyIntfsResponse) ProtoMessage() {}

func (x *EthPhyIntfsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eth_phy_intf_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthPhyIntfsResponse.ProtoReflect.Descriptor instead.
func (*EthPhyIntfsResponse) Descriptor() ([]byte, []int) {
	return file_eth_phy_intf_proto_rawDescGZIP(), []int{8}
}

func (x *EthPhyIntfsResponse) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

type EthPhyIntfExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface ID to be checked.
	IntfId *IntfId `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
}

func (x *EthPhyIntfExistsRequest) Reset() {
	*x = EthPhyIntfExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_phy_intf_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthPhyIntfExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthPhyIntfExistsRequest) ProtoMessage() {}

func (x *EthPhyIntfExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eth_phy_intf_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthPhyIntfExistsRequest.ProtoReflect.Descriptor instead.
func (*EthPhyIntfExistsRequest) Descriptor() ([]byte, []int) {
	return file_eth_phy_intf_proto_rawDescGZIP(), []int{9}
}

func (x *EthPhyIntfExistsRequest) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

type EthPhyIntfExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if the interface exists.
	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *EthPhyIntfExistsResponse) Reset() {
	*x = EthPhyIntfExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_phy_intf_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthPhyIntfExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthPhyIntfExistsResponse) ProtoMessage() {}

func (x *EthPhyIntfExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eth_phy_intf_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthPhyIntfExistsResponse.ProtoReflect.Descriptor instead.
func (*EthPhyIntfExistsResponse) Descriptor() ([]byte, []int) {
	return file_eth_phy_intf_proto_rawDescGZIP(), []int{10}
}

func (x *EthPhyIntfExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type EthPhyIntfHardwarePresentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface ID to be checked.
	IntfId *IntfId `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
}

func (x *EthPhyIntfHardwarePresentRequest) Reset() {
	*x = EthPhyIntfHardwarePresentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_phy_intf_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthPhyIntfHardwarePresentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthPhyIntfHardwarePresentRequest) ProtoMessage() {}

func (x *EthPhyIntfHardwarePresentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eth_phy_intf_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthPhyIntfHardwarePresentRequest.ProtoReflect.Descriptor instead.
func (*EthPhyIntfHardwarePresentRequest) Descriptor() ([]byte, []int) {
	return file_eth_phy_intf_proto_rawDescGZIP(), []int{11}
}

func (x *EthPhyIntfHardwarePresentRequest) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

type EthPhyIntfHardwarePresentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if hardware is present.
	HardwarePresent bool `protobuf:"varint,1,opt,name=hardware_present,json=hardwarePresent,proto3" json:"hardware_present,omitempty"`
}

func (x *EthPhyIntfHardwarePresentResponse) Reset() {
	*x = EthPhyIntfHardwarePresentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_phy_intf_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthPhyIntfHardwarePresentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthPhyIntfHardwarePresentResponse) ProtoMessage() {}

func (x *EthPhyIntfHardwarePresentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eth_phy_intf_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthPhyIntfHardwarePresentResponse.ProtoReflect.Descriptor instead.
func (*EthPhyIntfHardwarePresentResponse) Descriptor() ([]byte, []int) {
	return file_eth_phy_intf_proto_rawDescGZIP(), []int{12}
}

func (x *EthPhyIntfHardwarePresentResponse) GetHardwarePresent() bool {
	if x != nil {
		return x.HardwarePresent
	}
	return false
}

type EthPhyIntfBurnedInEthAddrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface to be queried for.
	IntfId *IntfId `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
}

func (x *EthPhyIntfBurnedInEthAddrRequest) Reset() {
	*x = EthPhyIntfBurnedInEthAddrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_phy_intf_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthPhyIntfBurnedInEthAddrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthPhyIntfBurnedInEthAddrRequest) ProtoMessage() {}

func (x *EthPhyIntfBurnedInEthAddrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eth_phy_intf_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthPhyIntfBurnedInEthAddrRequest.ProtoReflect.Descriptor instead.
func (*EthPhyIntfBurnedInEthAddrRequest) Descriptor() ([]byte, []int) {
	return file_eth_phy_intf_proto_rawDescGZIP(), []int{13}
}

func (x *EthPhyIntfBurnedInEthAddrRequest) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

type EthPhyIntfBurnedInEthAddrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Once hardware_present is true, burned_in_eth_addr is guaranteed
	// to be available. Otherwise, the return is empty.
	EthAddr []byte `protobuf:"bytes,1,opt,name=eth_addr,json=ethAddr,proto3" json:"eth_addr,omitempty"`
}

func (x *EthPhyIntfBurnedInEthAddrResponse) Reset() {
	*x = EthPhyIntfBurnedInEthAddrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_phy_intf_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthPhyIntfBurnedInEthAddrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthPhyIntfBurnedInEthAddrResponse) ProtoMessage() {}

func (x *EthPhyIntfBurnedInEthAddrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eth_phy_intf_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthPhyIntfBurnedInEthAddrResponse.ProtoReflect.Descriptor instead.
func (*EthPhyIntfBurnedInEthAddrResponse) Descriptor() ([]byte, []int) {
	return file_eth_phy_intf_proto_rawDescGZIP(), []int{14}
}

func (x *EthPhyIntfBurnedInEthAddrResponse) GetEthAddr() []byte {
	if x != nil {
		return x.EthAddr
	}
	return nil
}

type EthPhyIntfLinkSpeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface to be queried for.
	IntfId *IntfId `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
}

func (x *EthPhyIntfLinkSpeedRequest) Reset() {
	*x = EthPhyIntfLinkSpeedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_phy_intf_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthPhyIntfLinkSpeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthPhyIntfLinkSpeedRequest) ProtoMessage() {}

func (x *EthPhyIntfLinkSpeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eth_phy_intf_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthPhyIntfLinkSpeedRequest.ProtoReflect.Descriptor instead.
func (*EthPhyIntfLinkSpeedRequest) Descriptor() ([]byte, []int) {
	return file_eth_phy_intf_proto_rawDescGZIP(), []int{15}
}

func (x *EthPhyIntfLinkSpeedRequest) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

type EthPhyIntfLinkSpeedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One of the value speeds or ETH_PHY_INTF_LINK_SPEED_UNKNOWN if the
	// hardware is not present.
	LinkSpeed EthPhyIntfLinkSpeed `protobuf:"varint,1,opt,name=link_speed,json=linkSpeed,proto3,enum=eos.remote.EthPhyIntfLinkSpeed" json:"link_speed,omitempty"`
}

func (x *EthPhyIntfLinkSpeedResponse) Reset() {
	*x = EthPhyIntfLinkSpeedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_phy_intf_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthPhyIntfLinkSpeedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthPhyIntfLinkSpeedResponse) ProtoMessage() {}

func (x *EthPhyIntfLinkSpeedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eth_phy_intf_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthPhyIntfLinkSpeedResponse.ProtoReflect.Descriptor instead.
func (*EthPhyIntfLinkSpeedResponse) Descriptor() ([]byte, []int) {
	return file_eth_phy_intf_proto_rawDescGZIP(), []int{16}
}

func (x *EthPhyIntfLinkSpeedResponse) GetLinkSpeed() EthPhyIntfLinkSpeed {
	if x != nil {
		return x.LinkSpeed
	}
	return EthPhyIntfLinkSpeed_ETH_PHY_INTF_LINK_SPEED_UNKNOWN
}

type EthPhyIntfTransceiverPresentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface to be queried for.
	IntfId *IntfId `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
}

func (x *EthPhyIntfTransceiverPresentRequest) Reset() {
	*x = EthPhyIntfTransceiverPresentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_phy_intf_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthPhyIntfTransceiverPresentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthPhyIntfTransceiverPresentRequest) ProtoMessage() {}

func (x *EthPhyIntfTransceiverPresentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eth_phy_intf_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthPhyIntfTransceiverPresentRequest.ProtoReflect.Descriptor instead.
func (*EthPhyIntfTransceiverPresentRequest) Descriptor() ([]byte, []int) {
	return file_eth_phy_intf_proto_rawDescGZIP(), []int{17}
}

func (x *EthPhyIntfTransceiverPresentRequest) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

type EthPhyIntfTransceiverPresentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if the transceiver is present.
	TransceiverPresent bool `protobuf:"varint,1,opt,name=transceiver_present,json=transceiverPresent,proto3" json:"transceiver_present,omitempty"`
}

func (x *EthPhyIntfTransceiverPresentResponse) Reset() {
	*x = EthPhyIntfTransceiverPresentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_phy_intf_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthPhyIntfTransceiverPresentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthPhyIntfTransceiverPresentResponse) ProtoMessage() {}

func (x *EthPhyIntfTransceiverPresentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eth_phy_intf_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthPhyIntfTransceiverPresentResponse.ProtoReflect.Descriptor instead.
func (*EthPhyIntfTransceiverPresentResponse) Descriptor() ([]byte, []int) {
	return file_eth_phy_intf_proto_rawDescGZIP(), []int{18}
}

func (x *EthPhyIntfTransceiverPresentResponse) GetTransceiverPresent() bool {
	if x != nil {
		return x.TransceiverPresent
	}
	return false
}

type EthPhyIntfCountersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface to query counters.
	IntfId *IntfId `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
}

func (x *EthPhyIntfCountersRequest) Reset() {
	*x = EthPhyIntfCountersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_phy_intf_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthPhyIntfCountersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthPhyIntfCountersRequest) ProtoMessage() {}

func (x *EthPhyIntfCountersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eth_phy_intf_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthPhyIntfCountersRequest.ProtoReflect.Descriptor instead.
func (*EthPhyIntfCountersRequest) Descriptor() ([]byte, []int) {
	return file_eth_phy_intf_proto_rawDescGZIP(), []int{19}
}

func (x *EthPhyIntfCountersRequest) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

type EthPhyIntfCountersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Counters for the requested interface.
	Counters *EthPhyIntfCounters `protobuf:"bytes,1,opt,name=counters,proto3" json:"counters,omitempty"`
}

func (x *EthPhyIntfCountersResponse) Reset() {
	*x = EthPhyIntfCountersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_phy_intf_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthPhyIntfCountersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthPhyIntfCountersResponse) ProtoMessage() {}

func (x *EthPhyIntfCountersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eth_phy_intf_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthPhyIntfCountersResponse.ProtoReflect.Descriptor instead.
func (*EthPhyIntfCountersResponse) Descriptor() ([]byte, []int) {
	return file_eth_phy_intf_proto_rawDescGZIP(), []int{20}
}

func (x *EthPhyIntfCountersResponse) GetCounters() *EthPhyIntfCounters {
	if x != nil {
		return x.Counters
	}
	return nil
}

type EthPhyIntfBinCountersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Interface to query counters.
	IntfId *IntfId `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
}

func (x *EthPhyIntfBinCountersRequest) Reset() {
	*x = EthPhyIntfBinCountersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_phy_intf_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthPhyIntfBinCountersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthPhyIntfBinCountersRequest) ProtoMessage() {}

func (x *EthPhyIntfBinCountersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eth_phy_intf_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthPhyIntfBinCountersRequest.ProtoReflect.Descriptor instead.
func (*EthPhyIntfBinCountersRequest) Descriptor() ([]byte, []int) {
	return file_eth_phy_intf_proto_rawDescGZIP(), []int{21}
}

func (x *EthPhyIntfBinCountersRequest) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

type EthPhyIntfBinCountersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Counters for the requested interface.
	Counters *EthPhyIntfBinCounters `protobuf:"bytes,1,opt,name=counters,proto3" json:"counters,omitempty"`
}

func (x *EthPhyIntfBinCountersResponse) Reset() {
	*x = EthPhyIntfBinCountersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_phy_intf_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthPhyIntfBinCountersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthPhyIntfBinCountersResponse) ProtoMessage() {}

func (x *EthPhyIntfBinCountersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eth_phy_intf_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthPhyIntfBinCountersResponse.ProtoReflect.Descriptor instead.
func (*EthPhyIntfBinCountersResponse) Descriptor() ([]byte, []int) {
	return file_eth_phy_intf_proto_rawDescGZIP(), []int{22}
}

func (x *EthPhyIntfBinCountersResponse) GetCounters() *EthPhyIntfBinCounters {
	if x != nil {
		return x.Counters
	}
	return nil
}

var File_eth_phy_intf_proto protoreflect.FileDescriptor

var file_eth_phy_intf_proto_rawDesc = []byte{
	0x0a, 0x12, 0x65, 0x74, 0x68, 0x5f, 0x70, 0x68, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x1a, 0x0f, 0x72, 0x70, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x10, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x65, 0x74, 0x68, 0x5f, 0x70, 0x68, 0x79, 0x5f, 0x69, 0x6e, 0x74,
	0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a,
	0x12, 0x4f, 0x6e, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x64,
	0x22, 0x41, 0x0a, 0x12, 0x4f, 0x6e, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x52, 0x06, 0x69, 0x6e, 0x74,
	0x66, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x1b, 0x4f, 0x6e, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49,
	0x6e, 0x74, 0x66, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x15, 0x4f,
	0x6e, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x4c, 0x69, 0x6e, 0x6b, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66, 0x49,
	0x64, 0x12, 0x3e, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x4c, 0x69, 0x6e,
	0x6b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x22, 0x7e, 0x0a, 0x1e, 0x4f, 0x6e, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74,
	0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x22, 0x83, 0x01, 0x0a, 0x16, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x1d,
	0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x66, 0x73, 0x12, 0x2d, 0x0a,
	0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66,
	0x49, 0x64, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9a, 0x04, 0x0a, 0x17, 0x45, 0x74, 0x68, 0x50,
	0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x16, 0x6f, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x70, 0x68,
	0x79, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x4f, 0x6e, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x12, 0x6f, 0x6e, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74,
	0x66, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x16, 0x6f, 0x6e, 0x5f, 0x65, 0x74,
	0x68, 0x5f, 0x70, 0x68, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4f, 0x6e, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74,
	0x66, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x12, 0x6f, 0x6e, 0x45, 0x74, 0x68, 0x50, 0x68,
	0x79, 0x49, 0x6e, 0x74, 0x66, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x6e, 0x0a, 0x20, 0x6f,
	0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x70, 0x68, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x4f, 0x6e, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x48,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x1b,
	0x6f, 0x6e, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x1a, 0x6f,
	0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x70, 0x68, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4f, 0x6e, 0x45,
	0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x52, 0x15, 0x6f, 0x6e, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66,
	0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x77, 0x0a, 0x23, 0x6f, 0x6e, 0x5f,
	0x65, 0x74, 0x68, 0x5f, 0x70, 0x68, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x4f, 0x6e, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x52, 0x1e, 0x6f, 0x6e, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x61, 0x63, 0x6b, 0x22, 0x14, 0x0a, 0x12, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e,
	0x74, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x13, 0x45, 0x74,
	0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x22, 0x46,
	0x0a, 0x17, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x74,
	0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x52, 0x06,
	0x69, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x18, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79,
	0x49, 0x6e, 0x74, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x4f, 0x0a, 0x20, 0x45, 0x74,
	0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74,
	0x66, 0x49, 0x64, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x21, 0x45,
	0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72,
	0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x22, 0x4f, 0x0a, 0x20, 0x45,
	0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x42, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x49,
	0x6e, 0x45, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e,
	0x74, 0x66, 0x49, 0x64, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x21,
	0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x42, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x49, 0x6e, 0x45, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x74, 0x68, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x65, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x22, 0x49, 0x0a, 0x1a,
	0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e,
	0x74, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x52,
	0x06, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x1b, 0x45, 0x74, 0x68, 0x50, 0x68,
	0x79, 0x49, 0x6e, 0x74, 0x66, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e,
	0x74, 0x66, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x09, 0x6c, 0x69, 0x6e,
	0x6b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x22, 0x52, 0x0a, 0x23, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79,
	0x49, 0x6e, 0x74, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66,
	0x49, 0x64, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x24, 0x45, 0x74,
	0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x22, 0x48, 0x0a, 0x19, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74,
	0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49,
	0x6e, 0x74, 0x66, 0x49, 0x64, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x22, 0x58, 0x0a,
	0x1a, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x50, 0x68,
	0x79, 0x49, 0x6e, 0x74, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x22, 0x4b, 0x0a, 0x1c, 0x45, 0x74, 0x68, 0x50, 0x68,
	0x79, 0x49, 0x6e, 0x74, 0x66, 0x42, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x52, 0x06, 0x69, 0x6e,
	0x74, 0x66, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x1d, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e,
	0x74, 0x66, 0x42, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x42,
	0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x32, 0xd0, 0x05, 0x0a, 0x14, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49,
	0x6e, 0x74, 0x66, 0x4d, 0x67, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a,
	0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x12, 0x22, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e,
	0x74, 0x66, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x52, 0x0a, 0x0d, 0x65, 0x74, 0x68, 0x5f, 0x70, 0x68, 0x79, 0x5f, 0x69, 0x6e, 0x74,
	0x66, 0x73, 0x12, 0x1e, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x53, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x23, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x45, 0x74, 0x68,
	0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x10, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x2c,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x50,
	0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79,
	0x49, 0x6e, 0x74, 0x66, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x12, 0x62,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x74, 0x68, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x12, 0x2c, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x45,
	0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x42, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x49,
	0x6e, 0x45, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x45, 0x74, 0x68,
	0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x42, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x45,
	0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d,
	0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x26, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79,
	0x49, 0x6e, 0x74, 0x66, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x4c, 0x69, 0x6e, 0x6b,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a,
	0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xde, 0x01, 0x0a, 0x1c, 0x45, 0x74, 0x68, 0x50,
	0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x4d, 0x67,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49,
	0x6e, 0x74, 0x66, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x0c, 0x62, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x28, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x45, 0x74, 0x68, 0x50, 0x68, 0x79, 0x49, 0x6e, 0x74, 0x66, 0x42, 0x69, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x45, 0x74, 0x68, 0x50, 0x68,
	0x79, 0x49, 0x6e, 0x74, 0x66, 0x42, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x12, 0x5a, 0x10, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2f, 0x45, 0x6f, 0x73, 0x53, 0x64, 0x6b, 0x52, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eth_phy_intf_proto_rawDescOnce sync.Once
	file_eth_phy_intf_proto_rawDescData = file_eth_phy_intf_proto_rawDesc
)

func file_eth_phy_intf_proto_rawDescGZIP() []byte {
	file_eth_phy_intf_proto_rawDescOnce.Do(func() {
		file_eth_phy_intf_proto_rawDescData = protoimpl.X.CompressGZIP(file_eth_phy_intf_proto_rawDescData)
	})
	return file_eth_phy_intf_proto_rawDescData
}

var file_eth_phy_intf_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_eth_phy_intf_proto_goTypes = []interface{}{
	(*OnEthPhyIntfCreate)(nil),                   // 0: eos.remote.OnEthPhyIntfCreate
	(*OnEthPhyIntfDelete)(nil),                   // 1: eos.remote.OnEthPhyIntfDelete
	(*OnEthPhyIntfHardwarePresent)(nil),          // 2: eos.remote.OnEthPhyIntfHardwarePresent
	(*OnEthPhyIntfLinkSpeed)(nil),                // 3: eos.remote.OnEthPhyIntfLinkSpeed
	(*OnEthPhyIntfTransceiverPresent)(nil),       // 4: eos.remote.OnEthPhyIntfTransceiverPresent
	(*EthPhyIntfWatchRequest)(nil),               // 5: eos.remote.EthPhyIntfWatchRequest
	(*EthPhyIntfWatchResponse)(nil),              // 6: eos.remote.EthPhyIntfWatchResponse
	(*EthPhyIntfsRequest)(nil),                   // 7: eos.remote.EthPhyIntfsRequest
	(*EthPhyIntfsResponse)(nil),                  // 8: eos.remote.EthPhyIntfsResponse
	(*EthPhyIntfExistsRequest)(nil),              // 9: eos.remote.EthPhyIntfExistsRequest
	(*EthPhyIntfExistsResponse)(nil),             // 10: eos.remote.EthPhyIntfExistsResponse
	(*EthPhyIntfHardwarePresentRequest)(nil),     // 11: eos.remote.EthPhyIntfHardwarePresentRequest
	(*EthPhyIntfHardwarePresentResponse)(nil),    // 12: eos.remote.EthPhyIntfHardwarePresentResponse
	(*EthPhyIntfBurnedInEthAddrRequest)(nil),     // 13: eos.remote.EthPhyIntfBurnedInEthAddrRequest
	(*EthPhyIntfBurnedInEthAddrResponse)(nil),    // 14: eos.remote.EthPhyIntfBurnedInEthAddrResponse
	(*EthPhyIntfLinkSpeedRequest)(nil),           // 15: eos.remote.EthPhyIntfLinkSpeedRequest
	(*EthPhyIntfLinkSpeedResponse)(nil),          // 16: eos.remote.EthPhyIntfLinkSpeedResponse
	(*EthPhyIntfTransceiverPresentRequest)(nil),  // 17: eos.remote.EthPhyIntfTransceiverPresentRequest
	(*EthPhyIntfTransceiverPresentResponse)(nil), // 18: eos.remote.EthPhyIntfTransceiverPresentResponse
	(*EthPhyIntfCountersRequest)(nil),            // 19: eos.remote.EthPhyIntfCountersRequest
	(*EthPhyIntfCountersResponse)(nil),           // 20: eos.remote.EthPhyIntfCountersResponse
	(*EthPhyIntfBinCountersRequest)(nil),         // 21: eos.remote.EthPhyIntfBinCountersRequest
	(*EthPhyIntfBinCountersResponse)(nil),        // 22: eos.remote.EthPhyIntfBinCountersResponse
	(*IntfId)(nil),                               // 23: eos.remote.IntfId
	(EthPhyIntfLinkSpeed)(0),                     // 24: eos.remote.EthPhyIntfLinkSpeed
	(*EthPhyIntfCounters)(nil),                   // 25: eos.remote.EthPhyIntfCounters
	(*EthPhyIntfBinCounters)(nil),                // 26: eos.remote.EthPhyIntfBinCounters
}
var file_eth_phy_intf_proto_depIdxs = []int32{
	23, // 0: eos.remote.OnEthPhyIntfCreate.intf_id:type_name -> eos.remote.IntfId
	23, // 1: eos.remote.OnEthPhyIntfDelete.intf_id:type_name -> eos.remote.IntfId
	23, // 2: eos.remote.OnEthPhyIntfHardwarePresent.intf_id:type_name -> eos.remote.IntfId
	23, // 3: eos.remote.OnEthPhyIntfLinkSpeed.intf_id:type_name -> eos.remote.IntfId
	24, // 4: eos.remote.OnEthPhyIntfLinkSpeed.link_speed:type_name -> eos.remote.EthPhyIntfLinkSpeed
	23, // 5: eos.remote.OnEthPhyIntfTransceiverPresent.intf_id:type_name -> eos.remote.IntfId
	23, // 6: eos.remote.EthPhyIntfWatchRequest.intf_id:type_name -> eos.remote.IntfId
	0,  // 7: eos.remote.EthPhyIntfWatchResponse.on_eth_phy_intf_create:type_name -> eos.remote.OnEthPhyIntfCreate
	1,  // 8: eos.remote.EthPhyIntfWatchResponse.on_eth_phy_intf_delete:type_name -> eos.remote.OnEthPhyIntfDelete
	2,  // 9: eos.remote.EthPhyIntfWatchResponse.on_eth_phy_intf_hardware_present:type_name -> eos.remote.OnEthPhyIntfHardwarePresent
	3,  // 10: eos.remote.EthPhyIntfWatchResponse.on_eth_phy_intf_link_speed:type_name -> eos.remote.OnEthPhyIntfLinkSpeed
	4,  // 11: eos.remote.EthPhyIntfWatchResponse.on_eth_phy_intf_transceiver_present:type_name -> eos.remote.OnEthPhyIntfTransceiverPresent
	23, // 12: eos.remote.EthPhyIntfsResponse.intf_id:type_name -> eos.remote.IntfId
	23, // 13: eos.remote.EthPhyIntfExistsRequest.intf_id:type_name -> eos.remote.IntfId
	23, // 14: eos.remote.EthPhyIntfHardwarePresentRequest.intf_id:type_name -> eos.remote.IntfId
	23, // 15: eos.remote.EthPhyIntfBurnedInEthAddrRequest.intf_id:type_name -> eos.remote.IntfId
	23, // 16: eos.remote.EthPhyIntfLinkSpeedRequest.intf_id:type_name -> eos.remote.IntfId
	24, // 17: eos.remote.EthPhyIntfLinkSpeedResponse.link_speed:type_name -> eos.remote.EthPhyIntfLinkSpeed
	23, // 18: eos.remote.EthPhyIntfTransceiverPresentRequest.intf_id:type_name -> eos.remote.IntfId
	23, // 19: eos.remote.EthPhyIntfCountersRequest.intf_id:type_name -> eos.remote.IntfId
	25, // 20: eos.remote.EthPhyIntfCountersResponse.counters:type_name -> eos.remote.EthPhyIntfCounters
	23, // 21: eos.remote.EthPhyIntfBinCountersRequest.intf_id:type_name -> eos.remote.IntfId
	26, // 22: eos.remote.EthPhyIntfBinCountersResponse.counters:type_name -> eos.remote.EthPhyIntfBinCounters
	5,  // 23: eos.remote.EthPhyIntfMgrService.watch:input_type -> eos.remote.EthPhyIntfWatchRequest
	7,  // 24: eos.remote.EthPhyIntfMgrService.eth_phy_intfs:input_type -> eos.remote.EthPhyIntfsRequest
	9,  // 25: eos.remote.EthPhyIntfMgrService.exists:input_type -> eos.remote.EthPhyIntfExistsRequest
	11, // 26: eos.remote.EthPhyIntfMgrService.hardware_present:input_type -> eos.remote.EthPhyIntfHardwarePresentRequest
	13, // 27: eos.remote.EthPhyIntfMgrService.burned_in_eth_addr:input_type -> eos.remote.EthPhyIntfBurnedInEthAddrRequest
	15, // 28: eos.remote.EthPhyIntfMgrService.link_speed:input_type -> eos.remote.EthPhyIntfLinkSpeedRequest
	17, // 29: eos.remote.EthPhyIntfMgrService.transceiver_present:input_type -> eos.remote.EthPhyIntfTransceiverPresentRequest
	19, // 30: eos.remote.EthPhyIntfCountersMgrService.counters:input_type -> eos.remote.EthPhyIntfCountersRequest
	21, // 31: eos.remote.EthPhyIntfCountersMgrService.bin_counters:input_type -> eos.remote.EthPhyIntfBinCountersRequest
	6,  // 32: eos.remote.EthPhyIntfMgrService.watch:output_type -> eos.remote.EthPhyIntfWatchResponse
	8,  // 33: eos.remote.EthPhyIntfMgrService.eth_phy_intfs:output_type -> eos.remote.EthPhyIntfsResponse
	10, // 34: eos.remote.EthPhyIntfMgrService.exists:output_type -> eos.remote.EthPhyIntfExistsResponse
	12, // 35: eos.remote.EthPhyIntfMgrService.hardware_present:output_type -> eos.remote.EthPhyIntfHardwarePresentResponse
	14, // 36: eos.remote.EthPhyIntfMgrService.burned_in_eth_addr:output_type -> eos.remote.EthPhyIntfBurnedInEthAddrResponse
	16, // 37: eos.remote.EthPhyIntfMgrService.link_speed:output_type -> eos.remote.EthPhyIntfLinkSpeedResponse
	18, // 38: eos.remote.EthPhyIntfMgrService.transceiver_present:output_type -> eos.remote.EthPhyIntfTransceiverPresentResponse
	20, // 39: eos.remote.EthPhyIntfCountersMgrService.counters:output_type -> eos.remote.EthPhyIntfCountersResponse
	22, // 40: eos.remote.EthPhyIntfCountersMgrService.bin_counters:output_type -> eos.remote.EthPhyIntfBinCountersResponse
	32, // [32:41] is the sub-list for method output_type
	23, // [23:32] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_eth_phy_intf_proto_init() }
func file_eth_phy_intf_proto_init() {
	if File_eth_phy_intf_proto != nil {
		return
	}
	file_rpc_types_proto_init()
	file_intf_types_proto_init()
	file_eth_phy_intf_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_eth_phy_intf_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnEthPhyIntfCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_phy_intf_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnEthPhyIntfDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_phy_intf_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnEthPhyIntfHardwarePresent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_phy_intf_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnEthPhyIntfLinkSpeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_phy_intf_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnEthPhyIntfTransceiverPresent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_phy_intf_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthPhyIntfWatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_phy_intf_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthPhyIntfWatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_phy_intf_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthPhyIntfsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_phy_intf_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthPhyIntfsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_phy_intf_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthPhyIntfExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_phy_intf_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthPhyIntfExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_phy_intf_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthPhyIntfHardwarePresentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_phy_intf_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthPhyIntfHardwarePresentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_phy_intf_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthPhyIntfBurnedInEthAddrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_phy_intf_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthPhyIntfBurnedInEthAddrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_phy_intf_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthPhyIntfLinkSpeedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_phy_intf_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthPhyIntfLinkSpeedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_phy_intf_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthPhyIntfTransceiverPresentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_phy_intf_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthPhyIntfTransceiverPresentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_phy_intf_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthPhyIntfCountersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_phy_intf_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthPhyIntfCountersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_phy_intf_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthPhyIntfBinCountersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_phy_intf_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthPhyIntfBinCountersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_eth_phy_intf_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*EthPhyIntfWatchRequest_AllIntfs)(nil),
		(*EthPhyIntfWatchRequest_IntfId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eth_phy_intf_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_eth_phy_intf_proto_goTypes,
		DependencyIndexes: file_eth_phy_intf_proto_depIdxs,
		MessageInfos:      file_eth_phy_intf_proto_msgTypes,
	}.Build()
	File_eth_phy_intf_proto = out.File
	file_eth_phy_intf_proto_rawDesc = nil
	file_eth_phy_intf_proto_goTypes = nil
	file_eth_phy_intf_proto_depIdxs = nil
}
