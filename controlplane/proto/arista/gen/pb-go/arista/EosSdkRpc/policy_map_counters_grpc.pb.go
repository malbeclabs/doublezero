// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: policy_map_counters.proto

package EosSdkRpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PolicyMapCountersMgrServiceClient is the client API for PolicyMapCountersMgrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolicyMapCountersMgrServiceClient interface {
	WatchPolicyMapCounters(ctx context.Context, in *PolicyMapCountersWatchRequest, opts ...grpc.CallOption) (PolicyMapCountersMgrService_WatchPolicyMapCountersClient, error)
}

type policyMapCountersMgrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicyMapCountersMgrServiceClient(cc grpc.ClientConnInterface) PolicyMapCountersMgrServiceClient {
	return &policyMapCountersMgrServiceClient{cc}
}

func (c *policyMapCountersMgrServiceClient) WatchPolicyMapCounters(ctx context.Context, in *PolicyMapCountersWatchRequest, opts ...grpc.CallOption) (PolicyMapCountersMgrService_WatchPolicyMapCountersClient, error) {
	stream, err := c.cc.NewStream(ctx, &PolicyMapCountersMgrService_ServiceDesc.Streams[0], "/eos.remote.PolicyMapCountersMgrService/watch_policy_map_counters", opts...)
	if err != nil {
		return nil, err
	}
	x := &policyMapCountersMgrServiceWatchPolicyMapCountersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PolicyMapCountersMgrService_WatchPolicyMapCountersClient interface {
	Recv() (*PolicyMapCountersWatchResponse, error)
	grpc.ClientStream
}

type policyMapCountersMgrServiceWatchPolicyMapCountersClient struct {
	grpc.ClientStream
}

func (x *policyMapCountersMgrServiceWatchPolicyMapCountersClient) Recv() (*PolicyMapCountersWatchResponse, error) {
	m := new(PolicyMapCountersWatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PolicyMapCountersMgrServiceServer is the server API for PolicyMapCountersMgrService service.
// All implementations should embed UnimplementedPolicyMapCountersMgrServiceServer
// for forward compatibility
type PolicyMapCountersMgrServiceServer interface {
	WatchPolicyMapCounters(*PolicyMapCountersWatchRequest, PolicyMapCountersMgrService_WatchPolicyMapCountersServer) error
}

// UnimplementedPolicyMapCountersMgrServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPolicyMapCountersMgrServiceServer struct {
}

func (UnimplementedPolicyMapCountersMgrServiceServer) WatchPolicyMapCounters(*PolicyMapCountersWatchRequest, PolicyMapCountersMgrService_WatchPolicyMapCountersServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchPolicyMapCounters not implemented")
}

// UnsafePolicyMapCountersMgrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolicyMapCountersMgrServiceServer will
// result in compilation errors.
type UnsafePolicyMapCountersMgrServiceServer interface {
	mustEmbedUnimplementedPolicyMapCountersMgrServiceServer()
}

func RegisterPolicyMapCountersMgrServiceServer(s grpc.ServiceRegistrar, srv PolicyMapCountersMgrServiceServer) {
	s.RegisterService(&PolicyMapCountersMgrService_ServiceDesc, srv)
}

func _PolicyMapCountersMgrService_WatchPolicyMapCounters_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PolicyMapCountersWatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PolicyMapCountersMgrServiceServer).WatchPolicyMapCounters(m, &policyMapCountersMgrServiceWatchPolicyMapCountersServer{stream})
}

type PolicyMapCountersMgrService_WatchPolicyMapCountersServer interface {
	Send(*PolicyMapCountersWatchResponse) error
	grpc.ServerStream
}

type policyMapCountersMgrServiceWatchPolicyMapCountersServer struct {
	grpc.ServerStream
}

func (x *policyMapCountersMgrServiceWatchPolicyMapCountersServer) Send(m *PolicyMapCountersWatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PolicyMapCountersMgrService_ServiceDesc is the grpc.ServiceDesc for PolicyMapCountersMgrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PolicyMapCountersMgrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eos.remote.PolicyMapCountersMgrService",
	HandlerType: (*PolicyMapCountersMgrServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "watch_policy_map_counters",
			Handler:       _PolicyMapCountersMgrService_WatchPolicyMapCounters_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "policy_map_counters.proto",
}
