// Copyright (c) 2022 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: mpls_route_types.proto

package EosSdkRpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Represents a forward equivalency class (FEC) for an MPLS route. One or more
// routes point to a FEC. The FEC corresponds to a set of MPLS vias that are
// programmed into hardware.
//
// EosSdk reference: eos::mpls_fec_id_t
type MplsFecId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *MplsFecId) Reset() {
	*x = MplsFecId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsFecId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsFecId) ProtoMessage() {}

func (x *MplsFecId) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsFecId.ProtoReflect.Descriptor instead.
func (*MplsFecId) Descriptor() ([]byte, []int) {
	return file_mpls_route_types_proto_rawDescGZIP(), []int{0}
}

func (x *MplsFecId) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// *
// An MPLS v4/v6 static route.
//
// EosSdk reference: eos::mpls_route_t
type MplsRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *MplsRouteKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *MplsRoute) Reset() {
	*x = MplsRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRoute) ProtoMessage() {}

func (x *MplsRoute) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRoute.ProtoReflect.Descriptor instead.
func (*MplsRoute) Descriptor() ([]byte, []int) {
	return file_mpls_route_types_proto_rawDescGZIP(), []int{1}
}

func (x *MplsRoute) GetKey() *MplsRouteKey {
	if x != nil {
		return x.Key
	}
	return nil
}

// *
// An MPLS route key. Used for MPLS RIB configuration.
//
// EosSdk reference: eos::mpls_route_key_t
type MplsRouteKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels []*MplsLabel `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	// Must be in range 0 to 255.
	Metric uint32 `protobuf:"varint,2,opt,name=metric,proto3" json:"metric,omitempty"`
}

func (x *MplsRouteKey) Reset() {
	*x = MplsRouteKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteKey) ProtoMessage() {}

func (x *MplsRouteKey) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteKey.ProtoReflect.Descriptor instead.
func (*MplsRouteKey) Descriptor() ([]byte, []int) {
	return file_mpls_route_types_proto_rawDescGZIP(), []int{2}
}

func (x *MplsRouteKey) GetLabels() []*MplsLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MplsRouteKey) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

// *
// An MPLS route via, defining the action to take for a specified MPLS route.
//
// EosSdk reference: eos::mpls_route_via_t
type MplsRouteVia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteKey      *MplsRouteKey   `protobuf:"bytes,1,opt,name=route_key,json=routeKey,proto3" json:"route_key,omitempty"`
	Hop           []byte          `protobuf:"bytes,2,opt,name=hop,proto3" json:"hop,omitempty"`
	Intf          *IntfId         `protobuf:"bytes,3,opt,name=intf,proto3" json:"intf,omitempty"`
	PushswapLabel *MplsLabel      `protobuf:"bytes,4,opt,name=pushswap_label,json=pushswapLabel,proto3" json:"pushswap_label,omitempty"`
	LabelAction   MplsActions     `protobuf:"varint,5,opt,name=label_action,json=labelAction,proto3,enum=eos.remote.MplsActions" json:"label_action,omitempty"`
	TtlMode       MplsTtlMode     `protobuf:"varint,6,opt,name=ttl_mode,json=ttlMode,proto3,enum=eos.remote.MplsTtlMode" json:"ttl_mode,omitempty"`
	PayloadType   MplsPayloadType `protobuf:"varint,7,opt,name=payload_type,json=payloadType,proto3,enum=eos.remote.MplsPayloadType" json:"payload_type,omitempty"`
	SkipEgressAcl bool            `protobuf:"varint,8,opt,name=skip_egress_acl,json=skipEgressAcl,proto3" json:"skip_egress_acl,omitempty"`
	NexthopGroup  string          `protobuf:"bytes,9,opt,name=nexthop_group,json=nexthopGroup,proto3" json:"nexthop_group,omitempty"`
}

func (x *MplsRouteVia) Reset() {
	*x = MplsRouteVia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mpls_route_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsRouteVia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsRouteVia) ProtoMessage() {}

func (x *MplsRouteVia) ProtoReflect() protoreflect.Message {
	mi := &file_mpls_route_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsRouteVia.ProtoReflect.Descriptor instead.
func (*MplsRouteVia) Descriptor() ([]byte, []int) {
	return file_mpls_route_types_proto_rawDescGZIP(), []int{3}
}

func (x *MplsRouteVia) GetRouteKey() *MplsRouteKey {
	if x != nil {
		return x.RouteKey
	}
	return nil
}

func (x *MplsRouteVia) GetHop() []byte {
	if x != nil {
		return x.Hop
	}
	return nil
}

func (x *MplsRouteVia) GetIntf() *IntfId {
	if x != nil {
		return x.Intf
	}
	return nil
}

func (x *MplsRouteVia) GetPushswapLabel() *MplsLabel {
	if x != nil {
		return x.PushswapLabel
	}
	return nil
}

func (x *MplsRouteVia) GetLabelAction() MplsActions {
	if x != nil {
		return x.LabelAction
	}
	return MplsActions_MPLS_ACTION_NULL
}

func (x *MplsRouteVia) GetTtlMode() MplsTtlMode {
	if x != nil {
		return x.TtlMode
	}
	return MplsTtlMode_MPLS_TTL_MODE_NULL
}

func (x *MplsRouteVia) GetPayloadType() MplsPayloadType {
	if x != nil {
		return x.PayloadType
	}
	return MplsPayloadType_MPLS_PAYLOAD_TYPE_NULL
}

func (x *MplsRouteVia) GetSkipEgressAcl() bool {
	if x != nil {
		return x.SkipEgressAcl
	}
	return false
}

func (x *MplsRouteVia) GetNexthopGroup() string {
	if x != nil {
		return x.NexthopGroup
	}
	return ""
}

var File_mpls_route_types_proto protoreflect.FileDescriptor

var file_mpls_route_types_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x1a, 0x0f, 0x61, 0x63, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1b, 0x0a, 0x09, 0x4d, 0x70, 0x6c,
	0x73, 0x46, 0x65, 0x63, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x37, 0x0a, 0x09, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70,
	0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22,
	0x55, 0x0a, 0x0c, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x2d, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c,
	0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22, 0xba, 0x03, 0x0a, 0x0c, 0x4d, 0x70, 0x6c, 0x73, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x56, 0x69, 0x61, 0x12, 0x35, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x68, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x68, 0x6f, 0x70,
	0x12, 0x26, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66,
	0x49, 0x64, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x66, 0x12, 0x3c, 0x0a, 0x0e, 0x70, 0x75, 0x73, 0x68,
	0x73, 0x77, 0x61, 0x70, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70,
	0x6c, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x0d, 0x70, 0x75, 0x73, 0x68, 0x73, 0x77, 0x61,
	0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3a, 0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x74, 0x74, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x54, 0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x74,
	0x74, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x63, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x73, 0x6b, 0x69, 0x70, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6c, 0x12, 0x23,
	0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x12, 0x5a, 0x10, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x45, 0x6f,
	0x73, 0x53, 0x64, 0x6b, 0x52, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mpls_route_types_proto_rawDescOnce sync.Once
	file_mpls_route_types_proto_rawDescData = file_mpls_route_types_proto_rawDesc
)

func file_mpls_route_types_proto_rawDescGZIP() []byte {
	file_mpls_route_types_proto_rawDescOnce.Do(func() {
		file_mpls_route_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_mpls_route_types_proto_rawDescData)
	})
	return file_mpls_route_types_proto_rawDescData
}

var file_mpls_route_types_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_mpls_route_types_proto_goTypes = []interface{}{
	(*MplsFecId)(nil),    // 0: eos.remote.MplsFecId
	(*MplsRoute)(nil),    // 1: eos.remote.MplsRoute
	(*MplsRouteKey)(nil), // 2: eos.remote.MplsRouteKey
	(*MplsRouteVia)(nil), // 3: eos.remote.MplsRouteVia
	(*MplsLabel)(nil),    // 4: eos.remote.MplsLabel
	(*IntfId)(nil),       // 5: eos.remote.IntfId
	(MplsActions)(0),     // 6: eos.remote.MplsActions
	(MplsTtlMode)(0),     // 7: eos.remote.MplsTtlMode
	(MplsPayloadType)(0), // 8: eos.remote.MplsPayloadType
}
var file_mpls_route_types_proto_depIdxs = []int32{
	2, // 0: eos.remote.MplsRoute.key:type_name -> eos.remote.MplsRouteKey
	4, // 1: eos.remote.MplsRouteKey.labels:type_name -> eos.remote.MplsLabel
	2, // 2: eos.remote.MplsRouteVia.route_key:type_name -> eos.remote.MplsRouteKey
	5, // 3: eos.remote.MplsRouteVia.intf:type_name -> eos.remote.IntfId
	4, // 4: eos.remote.MplsRouteVia.pushswap_label:type_name -> eos.remote.MplsLabel
	6, // 5: eos.remote.MplsRouteVia.label_action:type_name -> eos.remote.MplsActions
	7, // 6: eos.remote.MplsRouteVia.ttl_mode:type_name -> eos.remote.MplsTtlMode
	8, // 7: eos.remote.MplsRouteVia.payload_type:type_name -> eos.remote.MplsPayloadType
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_mpls_route_types_proto_init() }
func file_mpls_route_types_proto_init() {
	if File_mpls_route_types_proto != nil {
		return
	}
	file_acl_types_proto_init()
	file_intf_types_proto_init()
	file_mpls_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mpls_route_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsFecId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mpls_route_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsRouteVia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mpls_route_types_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mpls_route_types_proto_goTypes,
		DependencyIndexes: file_mpls_route_types_proto_depIdxs,
		MessageInfos:      file_mpls_route_types_proto_msgTypes,
	}.Build()
	File_mpls_route_types_proto = out.File
	file_mpls_route_types_proto_rawDesc = nil
	file_mpls_route_types_proto_goTypes = nil
	file_mpls_route_types_proto_depIdxs = nil
}
