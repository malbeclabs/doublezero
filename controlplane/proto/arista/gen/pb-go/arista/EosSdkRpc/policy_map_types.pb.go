// Copyright (c) 2021 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: policy_map_types.proto

package EosSdkRpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// A hardware feature a policy map can be used with.
type PolicyFeature int32

const (
	PolicyFeature_POLICY_FEATURE_NULL           PolicyFeature = 0
	PolicyFeature_POLICY_FEATURE_PBR            PolicyFeature = 1
	PolicyFeature_POLICY_FEATURE_QOS            PolicyFeature = 2
	PolicyFeature_POLICY_FEATURE_TAP_AGG        PolicyFeature = 3
	PolicyFeature_POLICY_FEATURE_TRAFFIC_POLICY PolicyFeature = 4
)

// Enum value maps for PolicyFeature.
var (
	PolicyFeature_name = map[int32]string{
		0: "POLICY_FEATURE_NULL",
		1: "POLICY_FEATURE_PBR",
		2: "POLICY_FEATURE_QOS",
		3: "POLICY_FEATURE_TAP_AGG",
		4: "POLICY_FEATURE_TRAFFIC_POLICY",
	}
	PolicyFeature_value = map[string]int32{
		"POLICY_FEATURE_NULL":           0,
		"POLICY_FEATURE_PBR":            1,
		"POLICY_FEATURE_QOS":            2,
		"POLICY_FEATURE_TAP_AGG":        3,
		"POLICY_FEATURE_TRAFFIC_POLICY": 4,
	}
)

func (x PolicyFeature) Enum() *PolicyFeature {
	p := new(PolicyFeature)
	*p = x
	return p
}

func (x PolicyFeature) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyFeature) Descriptor() protoreflect.EnumDescriptor {
	return file_policy_map_types_proto_enumTypes[0].Descriptor()
}

func (PolicyFeature) Type() protoreflect.EnumType {
	return &file_policy_map_types_proto_enumTypes[0]
}

func (x PolicyFeature) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyFeature.Descriptor instead.
func (PolicyFeature) EnumDescriptor() ([]byte, []int) {
	return file_policy_map_types_proto_rawDescGZIP(), []int{0}
}

// *
// The actions a policy map rule may apply to classified packets.
type PolicyActionType int32

const (
	PolicyActionType_POLICY_ACTION_NULL          PolicyActionType = 0
	PolicyActionType_POLICY_ACTION_NONE          PolicyActionType = 1
	PolicyActionType_POLICY_ACTION_DROP          PolicyActionType = 2
	PolicyActionType_POLICY_ACTION_NEXTHOP       PolicyActionType = 3
	PolicyActionType_POLICY_ACTION_NEXTHOP_GROUP PolicyActionType = 4
	PolicyActionType_POLICY_ACTION_DSCP          PolicyActionType = 5
	PolicyActionType_POLICY_ACTION_TRAFFIC_CLASS PolicyActionType = 6
)

// Enum value maps for PolicyActionType.
var (
	PolicyActionType_name = map[int32]string{
		0: "POLICY_ACTION_NULL",
		1: "POLICY_ACTION_NONE",
		2: "POLICY_ACTION_DROP",
		3: "POLICY_ACTION_NEXTHOP",
		4: "POLICY_ACTION_NEXTHOP_GROUP",
		5: "POLICY_ACTION_DSCP",
		6: "POLICY_ACTION_TRAFFIC_CLASS",
	}
	PolicyActionType_value = map[string]int32{
		"POLICY_ACTION_NULL":          0,
		"POLICY_ACTION_NONE":          1,
		"POLICY_ACTION_DROP":          2,
		"POLICY_ACTION_NEXTHOP":       3,
		"POLICY_ACTION_NEXTHOP_GROUP": 4,
		"POLICY_ACTION_DSCP":          5,
		"POLICY_ACTION_TRAFFIC_CLASS": 6,
	}
)

func (x PolicyActionType) Enum() *PolicyActionType {
	p := new(PolicyActionType)
	*p = x
	return p
}

func (x PolicyActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_policy_map_types_proto_enumTypes[1].Descriptor()
}

func (PolicyActionType) Type() protoreflect.EnumType {
	return &file_policy_map_types_proto_enumTypes[1]
}

func (x PolicyActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyActionType.Descriptor instead.
func (PolicyActionType) EnumDescriptor() ([]byte, []int) {
	return file_policy_map_types_proto_rawDescGZIP(), []int{1}
}

type PolicyMapRuleType int32

const (
	PolicyMapRuleType_POLICY_RULE_TYPE_NOT_SET  PolicyMapRuleType = 0
	PolicyMapRuleType_POLICY_RULE_TYPE_CLASSMAP PolicyMapRuleType = 1
	PolicyMapRuleType_POLICY_RULE_TYPE_IPV4     PolicyMapRuleType = 2
	PolicyMapRuleType_POLICY_RULE_TYPE_IPV6     PolicyMapRuleType = 3
)

// Enum value maps for PolicyMapRuleType.
var (
	PolicyMapRuleType_name = map[int32]string{
		0: "POLICY_RULE_TYPE_NOT_SET",
		1: "POLICY_RULE_TYPE_CLASSMAP",
		2: "POLICY_RULE_TYPE_IPV4",
		3: "POLICY_RULE_TYPE_IPV6",
	}
	PolicyMapRuleType_value = map[string]int32{
		"POLICY_RULE_TYPE_NOT_SET":  0,
		"POLICY_RULE_TYPE_CLASSMAP": 1,
		"POLICY_RULE_TYPE_IPV4":     2,
		"POLICY_RULE_TYPE_IPV6":     3,
	}
)

func (x PolicyMapRuleType) Enum() *PolicyMapRuleType {
	p := new(PolicyMapRuleType)
	*p = x
	return p
}

func (x PolicyMapRuleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyMapRuleType) Descriptor() protoreflect.EnumDescriptor {
	return file_policy_map_types_proto_enumTypes[2].Descriptor()
}

func (PolicyMapRuleType) Type() protoreflect.EnumType {
	return &file_policy_map_types_proto_enumTypes[2]
}

func (x PolicyMapRuleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyMapRuleType.Descriptor instead.
func (PolicyMapRuleType) EnumDescriptor() ([]byte, []int) {
	return file_policy_map_types_proto_rawDescGZIP(), []int{2}
}

// *
// The policy map hardware status type.
type PolicyMapStatus int32

const (
	PolicyMapStatus_POLICY_STATUS_NULL        PolicyMapStatus = 0
	PolicyMapStatus_POLICY_STATUS_NOT_FOUND   PolicyMapStatus = 1
	PolicyMapStatus_POLICY_STATUS_IN_PROGRESS PolicyMapStatus = 2
	PolicyMapStatus_POLICY_STATUS_FAILED      PolicyMapStatus = 3
	PolicyMapStatus_POLICY_STATUS_SUCCESS     PolicyMapStatus = 4
)

// Enum value maps for PolicyMapStatus.
var (
	PolicyMapStatus_name = map[int32]string{
		0: "POLICY_STATUS_NULL",
		1: "POLICY_STATUS_NOT_FOUND",
		2: "POLICY_STATUS_IN_PROGRESS",
		3: "POLICY_STATUS_FAILED",
		4: "POLICY_STATUS_SUCCESS",
	}
	PolicyMapStatus_value = map[string]int32{
		"POLICY_STATUS_NULL":        0,
		"POLICY_STATUS_NOT_FOUND":   1,
		"POLICY_STATUS_IN_PROGRESS": 2,
		"POLICY_STATUS_FAILED":      3,
		"POLICY_STATUS_SUCCESS":     4,
	}
)

func (x PolicyMapStatus) Enum() *PolicyMapStatus {
	p := new(PolicyMapStatus)
	*p = x
	return p
}

func (x PolicyMapStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyMapStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_policy_map_types_proto_enumTypes[3].Descriptor()
}

func (PolicyMapStatus) Type() protoreflect.EnumType {
	return &file_policy_map_types_proto_enumTypes[3]
}

func (x PolicyMapStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyMapStatus.Descriptor instead.
func (PolicyMapStatus) EnumDescriptor() ([]byte, []int) {
	return file_policy_map_types_proto_rawDescGZIP(), []int{3}
}

type TrafficPolicyActionType int32

const (
	TrafficPolicyActionType_TRAFFIC_POLICY_ACTION_NULL              TrafficPolicyActionType = 0
	TrafficPolicyActionType_TRAFFIC_POLICY_ACTION_DROP              TrafficPolicyActionType = 1
	TrafficPolicyActionType_TRAFFIC_POLICY_ACTION_POLICE            TrafficPolicyActionType = 2
	TrafficPolicyActionType_TRAFFIC_POLICY_ACTION_COUNT             TrafficPolicyActionType = 3
	TrafficPolicyActionType_TRAFFIC_POLICY_ACTION_LOG               TrafficPolicyActionType = 4
	TrafficPolicyActionType_TRAFFIC_POLICY_ACTION_GOTO              TrafficPolicyActionType = 5
	TrafficPolicyActionType_TRAFFIC_POLICY_ACTION_DSCP              TrafficPolicyActionType = 6
	TrafficPolicyActionType_TRAFFIC_POLICY_ACTION_TRAFFIC_CLASS     TrafficPolicyActionType = 7
	TrafficPolicyActionType_TRAFFIC_POLICY_ACTION_SET_VRF           TrafficPolicyActionType = 8
	TrafficPolicyActionType_TRAFFIC_POLICY_ACTION_SET_VRF_SECONDARY TrafficPolicyActionType = 9
	TrafficPolicyActionType_TRAFFIC_POLICY_ACTION_USE_VRF_SECONDARY TrafficPolicyActionType = 10
	TrafficPolicyActionType_TRAFFIC_POLICY_ACTION_MIRROR            TrafficPolicyActionType = 11
	TrafficPolicyActionType_TRAFFIC_POLICY_ACTION_SFLOW             TrafficPolicyActionType = 12
	TrafficPolicyActionType_TRAFFIC_POLICY_ACTION_NEXTHOP           TrafficPolicyActionType = 13
	TrafficPolicyActionType_TRAFFIC_POLICY_ACTION_NEXTHOP_GROUP     TrafficPolicyActionType = 14
)

// Enum value maps for TrafficPolicyActionType.
var (
	TrafficPolicyActionType_name = map[int32]string{
		0:  "TRAFFIC_POLICY_ACTION_NULL",
		1:  "TRAFFIC_POLICY_ACTION_DROP",
		2:  "TRAFFIC_POLICY_ACTION_POLICE",
		3:  "TRAFFIC_POLICY_ACTION_COUNT",
		4:  "TRAFFIC_POLICY_ACTION_LOG",
		5:  "TRAFFIC_POLICY_ACTION_GOTO",
		6:  "TRAFFIC_POLICY_ACTION_DSCP",
		7:  "TRAFFIC_POLICY_ACTION_TRAFFIC_CLASS",
		8:  "TRAFFIC_POLICY_ACTION_SET_VRF",
		9:  "TRAFFIC_POLICY_ACTION_SET_VRF_SECONDARY",
		10: "TRAFFIC_POLICY_ACTION_USE_VRF_SECONDARY",
		11: "TRAFFIC_POLICY_ACTION_MIRROR",
		12: "TRAFFIC_POLICY_ACTION_SFLOW",
		13: "TRAFFIC_POLICY_ACTION_NEXTHOP",
		14: "TRAFFIC_POLICY_ACTION_NEXTHOP_GROUP",
	}
	TrafficPolicyActionType_value = map[string]int32{
		"TRAFFIC_POLICY_ACTION_NULL":              0,
		"TRAFFIC_POLICY_ACTION_DROP":              1,
		"TRAFFIC_POLICY_ACTION_POLICE":            2,
		"TRAFFIC_POLICY_ACTION_COUNT":             3,
		"TRAFFIC_POLICY_ACTION_LOG":               4,
		"TRAFFIC_POLICY_ACTION_GOTO":              5,
		"TRAFFIC_POLICY_ACTION_DSCP":              6,
		"TRAFFIC_POLICY_ACTION_TRAFFIC_CLASS":     7,
		"TRAFFIC_POLICY_ACTION_SET_VRF":           8,
		"TRAFFIC_POLICY_ACTION_SET_VRF_SECONDARY": 9,
		"TRAFFIC_POLICY_ACTION_USE_VRF_SECONDARY": 10,
		"TRAFFIC_POLICY_ACTION_MIRROR":            11,
		"TRAFFIC_POLICY_ACTION_SFLOW":             12,
		"TRAFFIC_POLICY_ACTION_NEXTHOP":           13,
		"TRAFFIC_POLICY_ACTION_NEXTHOP_GROUP":     14,
	}
)

func (x TrafficPolicyActionType) Enum() *TrafficPolicyActionType {
	p := new(TrafficPolicyActionType)
	*p = x
	return p
}

func (x TrafficPolicyActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrafficPolicyActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_policy_map_types_proto_enumTypes[4].Descriptor()
}

func (TrafficPolicyActionType) Type() protoreflect.EnumType {
	return &file_policy_map_types_proto_enumTypes[4]
}

func (x TrafficPolicyActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrafficPolicyActionType.Descriptor instead.
func (TrafficPolicyActionType) EnumDescriptor() ([]byte, []int) {
	return file_policy_map_types_proto_rawDescGZIP(), []int{4}
}

type PoliceRateUnit int32

const (
	// NULL refers to the default unit in SDK (POLICE_RATE_UNIT_BPS)
	PoliceRateUnit_POLICE_RATE_UNIT_NULL PoliceRateUnit = 0
	PoliceRateUnit_POLICE_RATE_UNIT_BPS  PoliceRateUnit = 1
	PoliceRateUnit_POLICE_RATE_UNIT_KBPS PoliceRateUnit = 2
	PoliceRateUnit_POLICE_RATE_UNIT_MBPS PoliceRateUnit = 3
	PoliceRateUnit_POLICE_RATE_UNIT_GBPS PoliceRateUnit = 4
)

// Enum value maps for PoliceRateUnit.
var (
	PoliceRateUnit_name = map[int32]string{
		0: "POLICE_RATE_UNIT_NULL",
		1: "POLICE_RATE_UNIT_BPS",
		2: "POLICE_RATE_UNIT_KBPS",
		3: "POLICE_RATE_UNIT_MBPS",
		4: "POLICE_RATE_UNIT_GBPS",
	}
	PoliceRateUnit_value = map[string]int32{
		"POLICE_RATE_UNIT_NULL": 0,
		"POLICE_RATE_UNIT_BPS":  1,
		"POLICE_RATE_UNIT_KBPS": 2,
		"POLICE_RATE_UNIT_MBPS": 3,
		"POLICE_RATE_UNIT_GBPS": 4,
	}
)

func (x PoliceRateUnit) Enum() *PoliceRateUnit {
	p := new(PoliceRateUnit)
	*p = x
	return p
}

func (x PoliceRateUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PoliceRateUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_policy_map_types_proto_enumTypes[5].Descriptor()
}

func (PoliceRateUnit) Type() protoreflect.EnumType {
	return &file_policy_map_types_proto_enumTypes[5]
}

func (x PoliceRateUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PoliceRateUnit.Descriptor instead.
func (PoliceRateUnit) EnumDescriptor() ([]byte, []int) {
	return file_policy_map_types_proto_rawDescGZIP(), []int{5}
}

type PoliceBurstUnit int32

const (
	// NULL refers to the default unit in SDK (POLICE_BURST_UNIT_BYTES)
	PoliceBurstUnit_POLICE_BURST_UNIT_NULL   PoliceBurstUnit = 0
	PoliceBurstUnit_POLICE_BURST_UNIT_BYTES  PoliceBurstUnit = 1
	PoliceBurstUnit_POLICE_BURST_UNIT_KBYTES PoliceBurstUnit = 2
	PoliceBurstUnit_POLICE_BURST_UNIT_MBYTES PoliceBurstUnit = 3
)

// Enum value maps for PoliceBurstUnit.
var (
	PoliceBurstUnit_name = map[int32]string{
		0: "POLICE_BURST_UNIT_NULL",
		1: "POLICE_BURST_UNIT_BYTES",
		2: "POLICE_BURST_UNIT_KBYTES",
		3: "POLICE_BURST_UNIT_MBYTES",
	}
	PoliceBurstUnit_value = map[string]int32{
		"POLICE_BURST_UNIT_NULL":   0,
		"POLICE_BURST_UNIT_BYTES":  1,
		"POLICE_BURST_UNIT_KBYTES": 2,
		"POLICE_BURST_UNIT_MBYTES": 3,
	}
)

func (x PoliceBurstUnit) Enum() *PoliceBurstUnit {
	p := new(PoliceBurstUnit)
	*p = x
	return p
}

func (x PoliceBurstUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PoliceBurstUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_policy_map_types_proto_enumTypes[6].Descriptor()
}

func (PoliceBurstUnit) Type() protoreflect.EnumType {
	return &file_policy_map_types_proto_enumTypes[6]
}

func (x PoliceBurstUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PoliceBurstUnit.Descriptor instead.
func (PoliceBurstUnit) EnumDescriptor() ([]byte, []int) {
	return file_policy_map_types_proto_rawDescGZIP(), []int{6}
}

type TrafficPolicyDirection int32

const (
	TrafficPolicyDirection_TRAFFIC_POLICY_DIRECTION_NULL  TrafficPolicyDirection = 0
	TrafficPolicyDirection_TRAFFIC_POLICY_DIRECTION_INPUT TrafficPolicyDirection = 1
)

// Enum value maps for TrafficPolicyDirection.
var (
	TrafficPolicyDirection_name = map[int32]string{
		0: "TRAFFIC_POLICY_DIRECTION_NULL",
		1: "TRAFFIC_POLICY_DIRECTION_INPUT",
	}
	TrafficPolicyDirection_value = map[string]int32{
		"TRAFFIC_POLICY_DIRECTION_NULL":  0,
		"TRAFFIC_POLICY_DIRECTION_INPUT": 1,
	}
)

func (x TrafficPolicyDirection) Enum() *TrafficPolicyDirection {
	p := new(TrafficPolicyDirection)
	*p = x
	return p
}

func (x TrafficPolicyDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrafficPolicyDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_policy_map_types_proto_enumTypes[7].Descriptor()
}

func (TrafficPolicyDirection) Type() protoreflect.EnumType {
	return &file_policy_map_types_proto_enumTypes[7]
}

func (x TrafficPolicyDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrafficPolicyDirection.Descriptor instead.
func (TrafficPolicyDirection) EnumDescriptor() ([]byte, []int) {
	return file_policy_map_types_proto_rawDescGZIP(), []int{7}
}

type PolicyMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *PolicyMapKey             `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Rules map[uint32]*PolicyMapRule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PolicyMap) Reset() {
	*x = PolicyMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMap) ProtoMessage() {}

func (x *PolicyMap) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMap.ProtoReflect.Descriptor instead.
func (*PolicyMap) Descriptor() ([]byte, []int) {
	return file_policy_map_types_proto_rawDescGZIP(), []int{0}
}

func (x *PolicyMap) GetKey() *PolicyMapKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PolicyMap) GetRules() map[uint32]*PolicyMapRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type PolicyMapAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType       PolicyActionType `protobuf:"varint,1,opt,name=action_type,json=actionType,proto3,enum=eos.remote.PolicyActionType" json:"action_type,omitempty"`
	NexthopGroupName string           `protobuf:"bytes,2,opt,name=nexthop_group_name,json=nexthopGroupName,proto3" json:"nexthop_group_name,omitempty"`
	Nexthops         [][]byte         `protobuf:"bytes,3,rep,name=nexthops,proto3" json:"nexthops,omitempty"`
	Vrf              string           `protobuf:"bytes,4,opt,name=vrf,proto3" json:"vrf,omitempty"`
	// Must be in range 0 to 255.
	Dscp uint32 `protobuf:"varint,5,opt,name=dscp,proto3" json:"dscp,omitempty"`
	// Must be in range 0 to 255.
	TrafficClass uint32 `protobuf:"varint,6,opt,name=traffic_class,json=trafficClass,proto3" json:"traffic_class,omitempty"`
}

func (x *PolicyMapAction) Reset() {
	*x = PolicyMapAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapAction) ProtoMessage() {}

func (x *PolicyMapAction) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapAction.ProtoReflect.Descriptor instead.
func (*PolicyMapAction) Descriptor() ([]byte, []int) {
	return file_policy_map_types_proto_rawDescGZIP(), []int{1}
}

func (x *PolicyMapAction) GetActionType() PolicyActionType {
	if x != nil {
		return x.ActionType
	}
	return PolicyActionType_POLICY_ACTION_NULL
}

func (x *PolicyMapAction) GetNexthopGroupName() string {
	if x != nil {
		return x.NexthopGroupName
	}
	return ""
}

func (x *PolicyMapAction) GetNexthops() [][]byte {
	if x != nil {
		return x.Nexthops
	}
	return nil
}

func (x *PolicyMapAction) GetVrf() string {
	if x != nil {
		return x.Vrf
	}
	return ""
}

func (x *PolicyMapAction) GetDscp() uint32 {
	if x != nil {
		return x.Dscp
	}
	return 0
}

func (x *PolicyMapAction) GetTrafficClass() uint32 {
	if x != nil {
		return x.TrafficClass
	}
	return 0
}

type PolicyMapKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Feature PolicyFeature `protobuf:"varint,2,opt,name=feature,proto3,enum=eos.remote.PolicyFeature" json:"feature,omitempty"`
}

func (x *PolicyMapKey) Reset() {
	*x = PolicyMapKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapKey) ProtoMessage() {}

func (x *PolicyMapKey) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapKey.ProtoReflect.Descriptor instead.
func (*PolicyMapKey) Descriptor() ([]byte, []int) {
	return file_policy_map_types_proto_rawDescGZIP(), []int{2}
}

func (x *PolicyMapKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PolicyMapKey) GetFeature() PolicyFeature {
	if x != nil {
		return x.Feature
	}
	return PolicyFeature_POLICY_FEATURE_NULL
}

type PolicyMapRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassMapKey *PolicyMapKey `protobuf:"bytes,1,opt,name=class_map_key,json=classMapKey,proto3" json:"class_map_key,omitempty"`
	// Types that are assignable to PolicyMapRuleTypePresent:
	//
	//	*PolicyMapRule_PolicyMapRuleType
	PolicyMapRuleTypePresent isPolicyMapRule_PolicyMapRuleTypePresent `protobuf_oneof:"policy_map_rule_type_present"`
	RawRule                  *AclRuleIp                               `protobuf:"bytes,3,opt,name=raw_rule,json=rawRule,proto3" json:"raw_rule,omitempty"`
	Actions                  []*PolicyMapAction                       `protobuf:"bytes,4,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *PolicyMapRule) Reset() {
	*x = PolicyMapRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapRule) ProtoMessage() {}

func (x *PolicyMapRule) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapRule.ProtoReflect.Descriptor instead.
func (*PolicyMapRule) Descriptor() ([]byte, []int) {
	return file_policy_map_types_proto_rawDescGZIP(), []int{3}
}

func (x *PolicyMapRule) GetClassMapKey() *PolicyMapKey {
	if x != nil {
		return x.ClassMapKey
	}
	return nil
}

func (m *PolicyMapRule) GetPolicyMapRuleTypePresent() isPolicyMapRule_PolicyMapRuleTypePresent {
	if m != nil {
		return m.PolicyMapRuleTypePresent
	}
	return nil
}

func (x *PolicyMapRule) GetPolicyMapRuleType() PolicyMapRuleType {
	if x, ok := x.GetPolicyMapRuleTypePresent().(*PolicyMapRule_PolicyMapRuleType); ok {
		return x.PolicyMapRuleType
	}
	return PolicyMapRuleType_POLICY_RULE_TYPE_NOT_SET
}

func (x *PolicyMapRule) GetRawRule() *AclRuleIp {
	if x != nil {
		return x.RawRule
	}
	return nil
}

func (x *PolicyMapRule) GetActions() []*PolicyMapAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

type isPolicyMapRule_PolicyMapRuleTypePresent interface {
	isPolicyMapRule_PolicyMapRuleTypePresent()
}

type PolicyMapRule_PolicyMapRuleType struct {
	// Default value is POLICY_RULE_TYPE_CLASSMAP.
	PolicyMapRuleType PolicyMapRuleType `protobuf:"varint,2,opt,name=policy_map_rule_type,json=policyMapRuleType,proto3,enum=eos.remote.PolicyMapRuleType,oneof"`
}

func (*PolicyMapRule_PolicyMapRuleType) isPolicyMapRule_PolicyMapRuleTypePresent() {}

type PolicyMapHwStatuses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusValues []*PolicyMapStatusValue `protobuf:"bytes,1,rep,name=status_values,json=statusValues,proto3" json:"status_values,omitempty"`
}

func (x *PolicyMapHwStatuses) Reset() {
	*x = PolicyMapHwStatuses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapHwStatuses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapHwStatuses) ProtoMessage() {}

func (x *PolicyMapHwStatuses) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapHwStatuses.ProtoReflect.Descriptor instead.
func (*PolicyMapHwStatuses) Descriptor() ([]byte, []int) {
	return file_policy_map_types_proto_rawDescGZIP(), []int{4}
}

func (x *PolicyMapHwStatuses) GetStatusValues() []*PolicyMapStatusValue {
	if x != nil {
		return x.StatusValues
	}
	return nil
}

type PolicyMapStatusValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HwStatusKey *PolicyMapHwStatusKey `protobuf:"bytes,1,opt,name=hw_status_key,json=hwStatusKey,proto3" json:"hw_status_key,omitempty"`
	Status      PolicyMapStatus       `protobuf:"varint,2,opt,name=status,proto3,enum=eos.remote.PolicyMapStatus" json:"status,omitempty"`
}

func (x *PolicyMapStatusValue) Reset() {
	*x = PolicyMapStatusValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapStatusValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapStatusValue) ProtoMessage() {}

func (x *PolicyMapStatusValue) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapStatusValue.ProtoReflect.Descriptor instead.
func (*PolicyMapStatusValue) Descriptor() ([]byte, []int) {
	return file_policy_map_types_proto_rawDescGZIP(), []int{5}
}

func (x *PolicyMapStatusValue) GetHwStatusKey() *PolicyMapHwStatusKey {
	if x != nil {
		return x.HwStatusKey
	}
	return nil
}

func (x *PolicyMapStatusValue) GetStatus() PolicyMapStatus {
	if x != nil {
		return x.Status
	}
	return PolicyMapStatus_POLICY_STATUS_NULL
}

type PolicyMapHwStatusKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntfId    *IntfId      `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
	Direction AclDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=eos.remote.AclDirection" json:"direction,omitempty"`
}

func (x *PolicyMapHwStatusKey) Reset() {
	*x = PolicyMapHwStatusKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyMapHwStatusKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapHwStatusKey) ProtoMessage() {}

func (x *PolicyMapHwStatusKey) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapHwStatusKey.ProtoReflect.Descriptor instead.
func (*PolicyMapHwStatusKey) Descriptor() ([]byte, []int) {
	return file_policy_map_types_proto_rawDescGZIP(), []int{6}
}

func (x *PolicyMapHwStatusKey) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

func (x *PolicyMapHwStatusKey) GetDirection() AclDirection {
	if x != nil {
		return x.Direction
	}
	return AclDirection_ACL_DIRECTION_NULL
}

// *
// A traffic policy instance.
//
// EosSdk reference: eos::traffic_policy_t
type TrafficPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key           string                        `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	NamedCounters []string                      `protobuf:"bytes,2,rep,name=named_counters,json=namedCounters,proto3" json:"named_counters,omitempty"`
	Rules         map[uint32]*TrafficPolicyRule `protobuf:"bytes,3,rep,name=rules,proto3" json:"rules,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TrafficPolicy) Reset() {
	*x = TrafficPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicy) ProtoMessage() {}

func (x *TrafficPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicy.ProtoReflect.Descriptor instead.
func (*TrafficPolicy) Descriptor() ([]byte, []int) {
	return file_policy_map_types_proto_rawDescGZIP(), []int{7}
}

func (x *TrafficPolicy) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TrafficPolicy) GetNamedCounters() []string {
	if x != nil {
		return x.NamedCounters
	}
	return nil
}

func (x *TrafficPolicy) GetRules() map[uint32]*TrafficPolicyRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// *
// A traffic policy rule, describing traffic match and actions.
//
// EosSdk reference: eos::traffic_policy_rule_t
type TrafficPolicyRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchRuleName         string                 `protobuf:"bytes,1,opt,name=match_rule_name,json=matchRuleName,proto3" json:"match_rule_name,omitempty"`
	TrafficPolicyRuleType TrafficPolicyRuleType  `protobuf:"varint,2,opt,name=traffic_policy_rule_type,json=trafficPolicyRuleType,proto3,enum=eos.remote.TrafficPolicyRuleType" json:"traffic_policy_rule_type,omitempty"`
	RawRule               *TpRuleFilter          `protobuf:"bytes,3,opt,name=raw_rule,json=rawRule,proto3" json:"raw_rule,omitempty"`
	Actions               []*TrafficPolicyAction `protobuf:"bytes,4,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *TrafficPolicyRule) Reset() {
	*x = TrafficPolicyRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicyRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicyRule) ProtoMessage() {}

func (x *TrafficPolicyRule) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicyRule.ProtoReflect.Descriptor instead.
func (*TrafficPolicyRule) Descriptor() ([]byte, []int) {
	return file_policy_map_types_proto_rawDescGZIP(), []int{8}
}

func (x *TrafficPolicyRule) GetMatchRuleName() string {
	if x != nil {
		return x.MatchRuleName
	}
	return ""
}

func (x *TrafficPolicyRule) GetTrafficPolicyRuleType() TrafficPolicyRuleType {
	if x != nil {
		return x.TrafficPolicyRuleType
	}
	return TrafficPolicyRuleType_TRAFFIC_POLICY_RULE_TYPE_NULL
}

func (x *TrafficPolicyRule) GetRawRule() *TpRuleFilter {
	if x != nil {
		return x.RawRule
	}
	return nil
}

func (x *TrafficPolicyRule) GetActions() []*TrafficPolicyAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

// *
// A single traffic-policy action.
//
// EosSdk reference: eos::traffic_policy_action_t
type TrafficPolicyAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType      TrafficPolicyActionType `protobuf:"varint,1,opt,name=action_type,json=actionType,proto3,enum=eos.remote.TrafficPolicyActionType" json:"action_type,omitempty"`
	CounterName     string                  `protobuf:"bytes,2,opt,name=counter_name,json=counterName,proto3" json:"counter_name,omitempty"`
	GotoClassName   string                  `protobuf:"bytes,3,opt,name=goto_class_name,json=gotoClassName,proto3" json:"goto_class_name,omitempty"`
	GotoNext        bool                    `protobuf:"varint,4,opt,name=goto_next,json=gotoNext,proto3" json:"goto_next,omitempty"`
	Dscp            uint32                  `protobuf:"varint,5,opt,name=dscp,proto3" json:"dscp,omitempty"`
	TrafficClass    uint32                  `protobuf:"varint,6,opt,name=traffic_class,json=trafficClass,proto3" json:"traffic_class,omitempty"`
	Vrf             string                  `protobuf:"bytes,7,opt,name=vrf,proto3" json:"vrf,omitempty"`
	MirrorSession   string                  `protobuf:"bytes,8,opt,name=mirror_session,json=mirrorSession,proto3" json:"mirror_session,omitempty"`
	PoliceRate      uint64                  `protobuf:"varint,9,opt,name=police_rate,json=policeRate,proto3" json:"police_rate,omitempty"`
	PoliceBurstSize uint64                  `protobuf:"varint,10,opt,name=police_burst_size,json=policeBurstSize,proto3" json:"police_burst_size,omitempty"`
	PoliceRateUnit  PoliceRateUnit          `protobuf:"varint,11,opt,name=police_rate_unit,json=policeRateUnit,proto3,enum=eos.remote.PoliceRateUnit" json:"police_rate_unit,omitempty"`
	PoliceBurstUnit PoliceBurstUnit         `protobuf:"varint,12,opt,name=police_burst_unit,json=policeBurstUnit,proto3,enum=eos.remote.PoliceBurstUnit" json:"police_burst_unit,omitempty"`
	NexthopGroups   []string                `protobuf:"bytes,13,rep,name=nexthop_groups,json=nexthopGroups,proto3" json:"nexthop_groups,omitempty"`
	Nexthops        [][]byte                `protobuf:"bytes,14,rep,name=nexthops,proto3" json:"nexthops,omitempty"`
}

func (x *TrafficPolicyAction) Reset() {
	*x = TrafficPolicyAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_policy_map_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficPolicyAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficPolicyAction) ProtoMessage() {}

func (x *TrafficPolicyAction) ProtoReflect() protoreflect.Message {
	mi := &file_policy_map_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficPolicyAction.ProtoReflect.Descriptor instead.
func (*TrafficPolicyAction) Descriptor() ([]byte, []int) {
	return file_policy_map_types_proto_rawDescGZIP(), []int{9}
}

func (x *TrafficPolicyAction) GetActionType() TrafficPolicyActionType {
	if x != nil {
		return x.ActionType
	}
	return TrafficPolicyActionType_TRAFFIC_POLICY_ACTION_NULL
}

func (x *TrafficPolicyAction) GetCounterName() string {
	if x != nil {
		return x.CounterName
	}
	return ""
}

func (x *TrafficPolicyAction) GetGotoClassName() string {
	if x != nil {
		return x.GotoClassName
	}
	return ""
}

func (x *TrafficPolicyAction) GetGotoNext() bool {
	if x != nil {
		return x.GotoNext
	}
	return false
}

func (x *TrafficPolicyAction) GetDscp() uint32 {
	if x != nil {
		return x.Dscp
	}
	return 0
}

func (x *TrafficPolicyAction) GetTrafficClass() uint32 {
	if x != nil {
		return x.TrafficClass
	}
	return 0
}

func (x *TrafficPolicyAction) GetVrf() string {
	if x != nil {
		return x.Vrf
	}
	return ""
}

func (x *TrafficPolicyAction) GetMirrorSession() string {
	if x != nil {
		return x.MirrorSession
	}
	return ""
}

func (x *TrafficPolicyAction) GetPoliceRate() uint64 {
	if x != nil {
		return x.PoliceRate
	}
	return 0
}

func (x *TrafficPolicyAction) GetPoliceBurstSize() uint64 {
	if x != nil {
		return x.PoliceBurstSize
	}
	return 0
}

func (x *TrafficPolicyAction) GetPoliceRateUnit() PoliceRateUnit {
	if x != nil {
		return x.PoliceRateUnit
	}
	return PoliceRateUnit_POLICE_RATE_UNIT_NULL
}

func (x *TrafficPolicyAction) GetPoliceBurstUnit() PoliceBurstUnit {
	if x != nil {
		return x.PoliceBurstUnit
	}
	return PoliceBurstUnit_POLICE_BURST_UNIT_NULL
}

func (x *TrafficPolicyAction) GetNexthopGroups() []string {
	if x != nil {
		return x.NexthopGroups
	}
	return nil
}

func (x *TrafficPolicyAction) GetNexthops() [][]byte {
	if x != nil {
		return x.Nexthops
	}
	return nil
}

var File_policy_map_types_proto protoreflect.FileDescriptor

var file_policy_map_types_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x1a, 0x0f, 0x61, 0x63, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc4, 0x01, 0x0a, 0x09, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x4d, 0x61, 0x70, 0x12, 0x2a, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x36, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x53, 0x0a, 0x0a, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe5, 0x01,
	0x0a, 0x0f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3d, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x72,
	0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x72, 0x66, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x73, 0x63, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x73, 0x63, 0x70,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x57, 0x0a, 0x0c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d,
	0x61, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xa8,
	0x02, 0x0a, 0x0d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x3c, 0x0a, 0x0d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x4b, 0x65,
	0x79, 0x52, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x50,
	0x0a, 0x14, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4d, 0x61, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x11, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x30, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x41, 0x63, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x70, 0x52, 0x07, 0x72, 0x61, 0x77, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x1e, 0x0a, 0x1c, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x22, 0x5c, 0x0a, 0x13, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x48, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x12, 0x45, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x14, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x44, 0x0a, 0x0d, 0x68, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x48, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x68, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7b, 0x0a, 0x14, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x48, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x64,
	0x12, 0x36, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x41, 0x63, 0x6c, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdd, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e,
	0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x1a,
	0x57, 0x0a, 0x0a, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x87, 0x02, 0x0a, 0x11, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x15, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x54, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07,
	0x72, 0x61, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xd4, 0x04, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x6f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6f,
	0x74, 0x6f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x6f, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x67, 0x6f, 0x74, 0x6f, 0x4e, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x73, 0x63, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x73, 0x63, 0x70, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x72, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x76, 0x72, 0x66, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x69, 0x72,
	0x72, 0x6f, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x42, 0x75,
	0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x47, 0x0a,
	0x11, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x42, 0x75, 0x72, 0x73,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x42, 0x75, 0x72,
	0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f,
	0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x08, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x2a, 0x97, 0x01, 0x0a, 0x0d, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4e, 0x55,
	0x4c, 0x4c, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x46,
	0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x42, 0x52, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x51,
	0x4f, 0x53, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x46,
	0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x41, 0x50, 0x5f, 0x41, 0x47, 0x47, 0x10, 0x03,
	0x12, 0x21, 0x0a, 0x1d, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x10, 0x04, 0x2a, 0xcf, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x58,
	0x54, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x53,
	0x43, 0x50, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x10, 0x06, 0x2a, 0x86, 0x01, 0x0a, 0x11, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x4d, 0x61, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x4d, 0x41, 0x50, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x4c, 0x49,
	0x43, 0x59, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56,
	0x34, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x52, 0x55,
	0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x10, 0x03, 0x2a, 0x9a,
	0x01, 0x0a, 0x0f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47,
	0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x04, 0x2a, 0xb0, 0x04, 0x0a, 0x17,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x46, 0x46,
	0x49, 0x43, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x46, 0x46,
	0x49, 0x43, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x46, 0x46,
	0x49, 0x43, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x52, 0x41,
	0x46, 0x46, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52,
	0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41,
	0x46, 0x46, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x47, 0x4f, 0x54, 0x4f, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41,
	0x46, 0x46, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x53, 0x43, 0x50, 0x10, 0x06, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x52, 0x41,
	0x46, 0x46, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x10, 0x07, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f,
	0x56, 0x52, 0x46, 0x10, 0x08, 0x12, 0x2b, 0x0a, 0x27, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x56, 0x52, 0x46, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59,
	0x10, 0x09, 0x12, 0x2b, 0x0a, 0x27, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x5f,
	0x56, 0x52, 0x46, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x10, 0x0a, 0x12,
	0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x4c,
	0x49, 0x43, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x46, 0x4c, 0x4f, 0x57,
	0x10, 0x0c, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x58, 0x54,
	0x48, 0x4f, 0x50, 0x10, 0x0d, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43,
	0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e,
	0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x0e, 0x2a, 0x96,
	0x01, 0x0a, 0x0e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x65, 0x52, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x42, 0x50, 0x53, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45,
	0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4b, 0x42, 0x50, 0x53, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x42, 0x50, 0x53, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x47, 0x42, 0x50, 0x53, 0x10, 0x04, 0x2a, 0x86, 0x01, 0x0a, 0x0f, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x16, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x45, 0x5f, 0x42, 0x55, 0x52, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x45, 0x5f, 0x42, 0x55, 0x52, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x42, 0x59, 0x54,
	0x45, 0x53, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x5f, 0x42,
	0x55, 0x52, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4b, 0x42, 0x59, 0x54, 0x45, 0x53,
	0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x45, 0x5f, 0x42, 0x55, 0x52,
	0x53, 0x54, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x03,
	0x2a, 0x5f, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x52,
	0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x22, 0x0a,
	0x1e, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10,
	0x01, 0x42, 0x12, 0x5a, 0x10, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x45, 0x6f, 0x73, 0x53,
	0x64, 0x6b, 0x52, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_policy_map_types_proto_rawDescOnce sync.Once
	file_policy_map_types_proto_rawDescData = file_policy_map_types_proto_rawDesc
)

func file_policy_map_types_proto_rawDescGZIP() []byte {
	file_policy_map_types_proto_rawDescOnce.Do(func() {
		file_policy_map_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_policy_map_types_proto_rawDescData)
	})
	return file_policy_map_types_proto_rawDescData
}

var file_policy_map_types_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_policy_map_types_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_policy_map_types_proto_goTypes = []interface{}{
	(PolicyFeature)(0),           // 0: eos.remote.PolicyFeature
	(PolicyActionType)(0),        // 1: eos.remote.PolicyActionType
	(PolicyMapRuleType)(0),       // 2: eos.remote.PolicyMapRuleType
	(PolicyMapStatus)(0),         // 3: eos.remote.PolicyMapStatus
	(TrafficPolicyActionType)(0), // 4: eos.remote.TrafficPolicyActionType
	(PoliceRateUnit)(0),          // 5: eos.remote.PoliceRateUnit
	(PoliceBurstUnit)(0),         // 6: eos.remote.PoliceBurstUnit
	(TrafficPolicyDirection)(0),  // 7: eos.remote.TrafficPolicyDirection
	(*PolicyMap)(nil),            // 8: eos.remote.PolicyMap
	(*PolicyMapAction)(nil),      // 9: eos.remote.PolicyMapAction
	(*PolicyMapKey)(nil),         // 10: eos.remote.PolicyMapKey
	(*PolicyMapRule)(nil),        // 11: eos.remote.PolicyMapRule
	(*PolicyMapHwStatuses)(nil),  // 12: eos.remote.PolicyMapHwStatuses
	(*PolicyMapStatusValue)(nil), // 13: eos.remote.PolicyMapStatusValue
	(*PolicyMapHwStatusKey)(nil), // 14: eos.remote.PolicyMapHwStatusKey
	(*TrafficPolicy)(nil),        // 15: eos.remote.TrafficPolicy
	(*TrafficPolicyRule)(nil),    // 16: eos.remote.TrafficPolicyRule
	(*TrafficPolicyAction)(nil),  // 17: eos.remote.TrafficPolicyAction
	nil,                          // 18: eos.remote.PolicyMap.RulesEntry
	nil,                          // 19: eos.remote.TrafficPolicy.RulesEntry
	(*AclRuleIp)(nil),            // 20: eos.remote.AclRuleIp
	(*IntfId)(nil),               // 21: eos.remote.IntfId
	(AclDirection)(0),            // 22: eos.remote.AclDirection
	(TrafficPolicyRuleType)(0),   // 23: eos.remote.TrafficPolicyRuleType
	(*TpRuleFilter)(nil),         // 24: eos.remote.TpRuleFilter
}
var file_policy_map_types_proto_depIdxs = []int32{
	10, // 0: eos.remote.PolicyMap.key:type_name -> eos.remote.PolicyMapKey
	18, // 1: eos.remote.PolicyMap.rules:type_name -> eos.remote.PolicyMap.RulesEntry
	1,  // 2: eos.remote.PolicyMapAction.action_type:type_name -> eos.remote.PolicyActionType
	0,  // 3: eos.remote.PolicyMapKey.feature:type_name -> eos.remote.PolicyFeature
	10, // 4: eos.remote.PolicyMapRule.class_map_key:type_name -> eos.remote.PolicyMapKey
	2,  // 5: eos.remote.PolicyMapRule.policy_map_rule_type:type_name -> eos.remote.PolicyMapRuleType
	20, // 6: eos.remote.PolicyMapRule.raw_rule:type_name -> eos.remote.AclRuleIp
	9,  // 7: eos.remote.PolicyMapRule.actions:type_name -> eos.remote.PolicyMapAction
	13, // 8: eos.remote.PolicyMapHwStatuses.status_values:type_name -> eos.remote.PolicyMapStatusValue
	14, // 9: eos.remote.PolicyMapStatusValue.hw_status_key:type_name -> eos.remote.PolicyMapHwStatusKey
	3,  // 10: eos.remote.PolicyMapStatusValue.status:type_name -> eos.remote.PolicyMapStatus
	21, // 11: eos.remote.PolicyMapHwStatusKey.intf_id:type_name -> eos.remote.IntfId
	22, // 12: eos.remote.PolicyMapHwStatusKey.direction:type_name -> eos.remote.AclDirection
	19, // 13: eos.remote.TrafficPolicy.rules:type_name -> eos.remote.TrafficPolicy.RulesEntry
	23, // 14: eos.remote.TrafficPolicyRule.traffic_policy_rule_type:type_name -> eos.remote.TrafficPolicyRuleType
	24, // 15: eos.remote.TrafficPolicyRule.raw_rule:type_name -> eos.remote.TpRuleFilter
	17, // 16: eos.remote.TrafficPolicyRule.actions:type_name -> eos.remote.TrafficPolicyAction
	4,  // 17: eos.remote.TrafficPolicyAction.action_type:type_name -> eos.remote.TrafficPolicyActionType
	5,  // 18: eos.remote.TrafficPolicyAction.police_rate_unit:type_name -> eos.remote.PoliceRateUnit
	6,  // 19: eos.remote.TrafficPolicyAction.police_burst_unit:type_name -> eos.remote.PoliceBurstUnit
	11, // 20: eos.remote.PolicyMap.RulesEntry.value:type_name -> eos.remote.PolicyMapRule
	16, // 21: eos.remote.TrafficPolicy.RulesEntry.value:type_name -> eos.remote.TrafficPolicyRule
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_policy_map_types_proto_init() }
func file_policy_map_types_proto_init() {
	if File_policy_map_types_proto != nil {
		return
	}
	file_acl_types_proto_init()
	file_intf_types_proto_init()
	file_structured_filter_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_policy_map_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapHwStatuses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapStatusValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyMapHwStatusKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicyRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_policy_map_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficPolicyAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_policy_map_types_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*PolicyMapRule_PolicyMapRuleType)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_policy_map_types_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_policy_map_types_proto_goTypes,
		DependencyIndexes: file_policy_map_types_proto_depIdxs,
		EnumInfos:         file_policy_map_types_proto_enumTypes,
		MessageInfos:      file_policy_map_types_proto_msgTypes,
	}.Build()
	File_policy_map_types_proto = out.File
	file_policy_map_types_proto_rawDesc = nil
	file_policy_map_types_proto_goTypes = nil
	file_policy_map_types_proto_depIdxs = nil
}
