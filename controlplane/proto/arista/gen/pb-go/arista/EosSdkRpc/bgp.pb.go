// Copyright (c) 2021 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: bgp.proto

package EosSdkRpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OnBgpPeerSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerKey *BgpPeerKey `protobuf:"bytes,1,opt,name=peer_key,json=peerKey,proto3" json:"peer_key,omitempty"`
}

func (x *OnBgpPeerSet) Reset() {
	*x = OnBgpPeerSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnBgpPeerSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnBgpPeerSet) ProtoMessage() {}

func (x *OnBgpPeerSet) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnBgpPeerSet.ProtoReflect.Descriptor instead.
func (*OnBgpPeerSet) Descriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{0}
}

func (x *OnBgpPeerSet) GetPeerKey() *BgpPeerKey {
	if x != nil {
		return x.PeerKey
	}
	return nil
}

type OnBgpPeerDel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerKey *BgpPeerKey `protobuf:"bytes,1,opt,name=peer_key,json=peerKey,proto3" json:"peer_key,omitempty"`
}

func (x *OnBgpPeerDel) Reset() {
	*x = OnBgpPeerDel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnBgpPeerDel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnBgpPeerDel) ProtoMessage() {}

func (x *OnBgpPeerDel) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnBgpPeerDel.ProtoReflect.Descriptor instead.
func (*OnBgpPeerDel) Descriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{1}
}

func (x *OnBgpPeerDel) GetPeerKey() *BgpPeerKey {
	if x != nil {
		return x.PeerKey
	}
	return nil
}

type OnBgpPeerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerKey   *BgpPeerKey  `protobuf:"bytes,1,opt,name=peer_key,json=peerKey,proto3" json:"peer_key,omitempty"`
	PeerState BgpPeerState `protobuf:"varint,2,opt,name=peer_state,json=peerState,proto3,enum=eos.remote.BgpPeerState" json:"peer_state,omitempty"`
}

func (x *OnBgpPeerState) Reset() {
	*x = OnBgpPeerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnBgpPeerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnBgpPeerState) ProtoMessage() {}

func (x *OnBgpPeerState) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnBgpPeerState.ProtoReflect.Descriptor instead.
func (*OnBgpPeerState) Descriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{2}
}

func (x *OnBgpPeerState) GetPeerKey() *BgpPeerKey {
	if x != nil {
		return x.PeerKey
	}
	return nil
}

func (x *OnBgpPeerState) GetPeerState() BgpPeerState {
	if x != nil {
		return x.PeerState
	}
	return BgpPeerState_BGP_PEER_STATE_UNKNOWN
}

type BgpPeerWatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set to true if an immediate acknowledgement is desired.
	Ack bool `protobuf:"varint,1,opt,name=ack,proto3" json:"ack,omitempty"`
	// Types that are assignable to Overload:
	//
	//	*BgpPeerWatchRequest_All
	//	*BgpPeerWatchRequest_PeerKey
	Overload isBgpPeerWatchRequest_Overload `protobuf_oneof:"overload"`
}

func (x *BgpPeerWatchRequest) Reset() {
	*x = BgpPeerWatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpPeerWatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPeerWatchRequest) ProtoMessage() {}

func (x *BgpPeerWatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPeerWatchRequest.ProtoReflect.Descriptor instead.
func (*BgpPeerWatchRequest) Descriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{3}
}

func (x *BgpPeerWatchRequest) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

func (m *BgpPeerWatchRequest) GetOverload() isBgpPeerWatchRequest_Overload {
	if m != nil {
		return m.Overload
	}
	return nil
}

func (x *BgpPeerWatchRequest) GetAll() bool {
	if x, ok := x.GetOverload().(*BgpPeerWatchRequest_All); ok {
		return x.All
	}
	return false
}

func (x *BgpPeerWatchRequest) GetPeerKey() *BgpPeerKey {
	if x, ok := x.GetOverload().(*BgpPeerWatchRequest_PeerKey); ok {
		return x.PeerKey
	}
	return nil
}

type isBgpPeerWatchRequest_Overload interface {
	isBgpPeerWatchRequest_Overload()
}

type BgpPeerWatchRequest_All struct {
	// True if all BGP peers should be watched.
	All bool `protobuf:"varint,2,opt,name=all,proto3,oneof"`
}

type BgpPeerWatchRequest_PeerKey struct {
	// The peer key of a particular peer to watch.
	PeerKey *BgpPeerKey `protobuf:"bytes,3,opt,name=peer_key,json=peerKey,proto3,oneof"`
}

func (*BgpPeerWatchRequest_All) isBgpPeerWatchRequest_Overload() {}

func (*BgpPeerWatchRequest_PeerKey) isBgpPeerWatchRequest_Overload() {}

type BgpPeerWatchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true the agent is now actively watching for events.
	Ack bool `protobuf:"varint,1,opt,name=ack,proto3" json:"ack,omitempty"`
	// Types that are assignable to PeerEvent:
	//
	//	*BgpPeerWatchResponse_OnPeerSet
	//	*BgpPeerWatchResponse_OnPeerDel
	PeerEvent isBgpPeerWatchResponse_PeerEvent `protobuf_oneof:"peer_event"`
	// The specified BGP peer changed state.
	OnPeerState *OnBgpPeerState `protobuf:"bytes,4,opt,name=on_peer_state,json=onPeerState,proto3" json:"on_peer_state,omitempty"`
}

func (x *BgpPeerWatchResponse) Reset() {
	*x = BgpPeerWatchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpPeerWatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPeerWatchResponse) ProtoMessage() {}

func (x *BgpPeerWatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPeerWatchResponse.ProtoReflect.Descriptor instead.
func (*BgpPeerWatchResponse) Descriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{4}
}

func (x *BgpPeerWatchResponse) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

func (m *BgpPeerWatchResponse) GetPeerEvent() isBgpPeerWatchResponse_PeerEvent {
	if m != nil {
		return m.PeerEvent
	}
	return nil
}

func (x *BgpPeerWatchResponse) GetOnPeerSet() *OnBgpPeerSet {
	if x, ok := x.GetPeerEvent().(*BgpPeerWatchResponse_OnPeerSet); ok {
		return x.OnPeerSet
	}
	return nil
}

func (x *BgpPeerWatchResponse) GetOnPeerDel() *OnBgpPeerDel {
	if x, ok := x.GetPeerEvent().(*BgpPeerWatchResponse_OnPeerDel); ok {
		return x.OnPeerDel
	}
	return nil
}

func (x *BgpPeerWatchResponse) GetOnPeerState() *OnBgpPeerState {
	if x != nil {
		return x.OnPeerState
	}
	return nil
}

type isBgpPeerWatchResponse_PeerEvent interface {
	isBgpPeerWatchResponse_PeerEvent()
}

type BgpPeerWatchResponse_OnPeerSet struct {
	// The specified BGP peer has been programmed by the BGP agent.
	OnPeerSet *OnBgpPeerSet `protobuf:"bytes,2,opt,name=on_peer_set,json=onPeerSet,proto3,oneof"`
}

type BgpPeerWatchResponse_OnPeerDel struct {
	// The specified BGP peer has been deleted from the BGP agent.
	OnPeerDel *OnBgpPeerDel `protobuf:"bytes,3,opt,name=on_peer_del,json=onPeerDel,proto3,oneof"`
}

func (*BgpPeerWatchResponse_OnPeerSet) isBgpPeerWatchResponse_PeerEvent() {}

func (*BgpPeerWatchResponse_OnPeerDel) isBgpPeerWatchResponse_PeerEvent() {}

type BgpPeerExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the BGP peer to query.
	PeerKey *BgpPeerKey `protobuf:"bytes,1,opt,name=peer_key,json=peerKey,proto3" json:"peer_key,omitempty"`
}

func (x *BgpPeerExistsRequest) Reset() {
	*x = BgpPeerExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpPeerExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPeerExistsRequest) ProtoMessage() {}

func (x *BgpPeerExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPeerExistsRequest.ProtoReflect.Descriptor instead.
func (*BgpPeerExistsRequest) Descriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{5}
}

func (x *BgpPeerExistsRequest) GetPeerKey() *BgpPeerKey {
	if x != nil {
		return x.PeerKey
	}
	return nil
}

type BgpPeerExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if the BGP peer exists otherwise false.
	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *BgpPeerExistsResponse) Reset() {
	*x = BgpPeerExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpPeerExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPeerExistsResponse) ProtoMessage() {}

func (x *BgpPeerExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPeerExistsResponse.ProtoReflect.Descriptor instead.
func (*BgpPeerExistsResponse) Descriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{6}
}

func (x *BgpPeerExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type BgpPeerStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the BGP peer to query.
	PeerKey *BgpPeerKey `protobuf:"bytes,1,opt,name=peer_key,json=peerKey,proto3" json:"peer_key,omitempty"`
}

func (x *BgpPeerStateRequest) Reset() {
	*x = BgpPeerStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpPeerStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPeerStateRequest) ProtoMessage() {}

func (x *BgpPeerStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPeerStateRequest.ProtoReflect.Descriptor instead.
func (*BgpPeerStateRequest) Descriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{7}
}

func (x *BgpPeerStateRequest) GetPeerKey() *BgpPeerKey {
	if x != nil {
		return x.PeerKey
	}
	return nil
}

type BgpPeerStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// State of the specified peer session.
	PeerState BgpPeerState `protobuf:"varint,1,opt,name=peer_state,json=peerState,proto3,enum=eos.remote.BgpPeerState" json:"peer_state,omitempty"`
}

func (x *BgpPeerStateResponse) Reset() {
	*x = BgpPeerStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bgp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpPeerStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPeerStateResponse) ProtoMessage() {}

func (x *BgpPeerStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bgp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPeerStateResponse.ProtoReflect.Descriptor instead.
func (*BgpPeerStateResponse) Descriptor() ([]byte, []int) {
	return file_bgp_proto_rawDescGZIP(), []int{8}
}

func (x *BgpPeerStateResponse) GetPeerState() BgpPeerState {
	if x != nil {
		return x.PeerState
	}
	return BgpPeerState_BGP_PEER_STATE_UNKNOWN
}

var File_bgp_proto protoreflect.FileDescriptor

var file_bgp_proto_rawDesc = []byte{
	0x0a, 0x09, 0x62, 0x67, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x1a, 0x0f, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x0c, 0x4f, 0x6e, 0x42, 0x67,
	0x70, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x22, 0x41, 0x0a, 0x0c, 0x4f,
	0x6e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x12, 0x31, 0x0a, 0x08, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x65,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x22, 0x7c,
	0x0a, 0x0e, 0x4f, 0x6e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x31, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x7c, 0x0a, 0x13,
	0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x42, 0x0a,
	0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xee, 0x01, 0x0a, 0x14, 0x42,
	0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x3a, 0x0a, 0x0b, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x4f, 0x6e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x4f, 0x6e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x44, 0x65, 0x6c,
	0x48, 0x00, 0x52, 0x09, 0x6f, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x12, 0x3e, 0x0a,
	0x0d, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x4f, 0x6e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0b, 0x6f, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x49, 0x0a, 0x14, 0x42,
	0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x70,
	0x65, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x22, 0x2f, 0x0a, 0x15, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65,
	0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x48, 0x0a, 0x13, 0x42, 0x67, 0x70, 0x50, 0x65,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x67,
	0x70, 0x50, 0x65, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x22, 0x4f, 0x0a, 0x14, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x65,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x32, 0x83, 0x02, 0x0a, 0x0d, 0x42, 0x67, 0x70, 0x4d, 0x67, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1f, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x65,
	0x65, 0x72, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x67, 0x70, 0x50,
	0x65, 0x65, 0x72, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x4f, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x20,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x67, 0x70, 0x50,
	0x65, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x67,
	0x70, 0x50, 0x65, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x12, 0x5a, 0x10, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2f, 0x45, 0x6f, 0x73, 0x53, 0x64, 0x6b, 0x52, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bgp_proto_rawDescOnce sync.Once
	file_bgp_proto_rawDescData = file_bgp_proto_rawDesc
)

func file_bgp_proto_rawDescGZIP() []byte {
	file_bgp_proto_rawDescOnce.Do(func() {
		file_bgp_proto_rawDescData = protoimpl.X.CompressGZIP(file_bgp_proto_rawDescData)
	})
	return file_bgp_proto_rawDescData
}

var file_bgp_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_bgp_proto_goTypes = []interface{}{
	(*OnBgpPeerSet)(nil),          // 0: eos.remote.OnBgpPeerSet
	(*OnBgpPeerDel)(nil),          // 1: eos.remote.OnBgpPeerDel
	(*OnBgpPeerState)(nil),        // 2: eos.remote.OnBgpPeerState
	(*BgpPeerWatchRequest)(nil),   // 3: eos.remote.BgpPeerWatchRequest
	(*BgpPeerWatchResponse)(nil),  // 4: eos.remote.BgpPeerWatchResponse
	(*BgpPeerExistsRequest)(nil),  // 5: eos.remote.BgpPeerExistsRequest
	(*BgpPeerExistsResponse)(nil), // 6: eos.remote.BgpPeerExistsResponse
	(*BgpPeerStateRequest)(nil),   // 7: eos.remote.BgpPeerStateRequest
	(*BgpPeerStateResponse)(nil),  // 8: eos.remote.BgpPeerStateResponse
	(*BgpPeerKey)(nil),            // 9: eos.remote.BgpPeerKey
	(BgpPeerState)(0),             // 10: eos.remote.BgpPeerState
}
var file_bgp_proto_depIdxs = []int32{
	9,  // 0: eos.remote.OnBgpPeerSet.peer_key:type_name -> eos.remote.BgpPeerKey
	9,  // 1: eos.remote.OnBgpPeerDel.peer_key:type_name -> eos.remote.BgpPeerKey
	9,  // 2: eos.remote.OnBgpPeerState.peer_key:type_name -> eos.remote.BgpPeerKey
	10, // 3: eos.remote.OnBgpPeerState.peer_state:type_name -> eos.remote.BgpPeerState
	9,  // 4: eos.remote.BgpPeerWatchRequest.peer_key:type_name -> eos.remote.BgpPeerKey
	0,  // 5: eos.remote.BgpPeerWatchResponse.on_peer_set:type_name -> eos.remote.OnBgpPeerSet
	1,  // 6: eos.remote.BgpPeerWatchResponse.on_peer_del:type_name -> eos.remote.OnBgpPeerDel
	2,  // 7: eos.remote.BgpPeerWatchResponse.on_peer_state:type_name -> eos.remote.OnBgpPeerState
	9,  // 8: eos.remote.BgpPeerExistsRequest.peer_key:type_name -> eos.remote.BgpPeerKey
	9,  // 9: eos.remote.BgpPeerStateRequest.peer_key:type_name -> eos.remote.BgpPeerKey
	10, // 10: eos.remote.BgpPeerStateResponse.peer_state:type_name -> eos.remote.BgpPeerState
	3,  // 11: eos.remote.BgpMgrService.watch:input_type -> eos.remote.BgpPeerWatchRequest
	5,  // 12: eos.remote.BgpMgrService.exists:input_type -> eos.remote.BgpPeerExistsRequest
	7,  // 13: eos.remote.BgpMgrService.peer_state:input_type -> eos.remote.BgpPeerStateRequest
	4,  // 14: eos.remote.BgpMgrService.watch:output_type -> eos.remote.BgpPeerWatchResponse
	6,  // 15: eos.remote.BgpMgrService.exists:output_type -> eos.remote.BgpPeerExistsResponse
	8,  // 16: eos.remote.BgpMgrService.peer_state:output_type -> eos.remote.BgpPeerStateResponse
	14, // [14:17] is the sub-list for method output_type
	11, // [11:14] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_bgp_proto_init() }
func file_bgp_proto_init() {
	if File_bgp_proto != nil {
		return
	}
	file_bgp_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bgp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnBgpPeerSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnBgpPeerDel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnBgpPeerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpPeerWatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpPeerWatchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpPeerExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpPeerExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpPeerStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bgp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpPeerStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bgp_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*BgpPeerWatchRequest_All)(nil),
		(*BgpPeerWatchRequest_PeerKey)(nil),
	}
	file_bgp_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*BgpPeerWatchResponse_OnPeerSet)(nil),
		(*BgpPeerWatchResponse_OnPeerDel)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bgp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bgp_proto_goTypes,
		DependencyIndexes: file_bgp_proto_depIdxs,
		MessageInfos:      file_bgp_proto_msgTypes,
	}.Build()
	File_bgp_proto = out.File
	file_bgp_proto_rawDesc = nil
	file_bgp_proto_goTypes = nil
	file_bgp_proto_depIdxs = nil
}
