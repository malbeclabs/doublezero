// Copyright (c) 2021 Arista Networks, Inc.  All rights reserved.
// Arista Networks, Inc. Confidential and Proprietary.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: ip_intf.proto

package EosSdkRpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Making this request with all = false and no intf_id has no effect.
type IpIntfWatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Overloads:
	//
	//	*IpIntfWatchRequest_AllIntfs
	//	*IpIntfWatchRequest_IntfId
	Overloads isIpIntfWatchRequest_Overloads `protobuf_oneof:"overloads"`
	// Set to true when an ackowledgment is desired.
	Ack bool `protobuf:"varint,4,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (x *IpIntfWatchRequest) Reset() {
	*x = IpIntfWatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_intf_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpIntfWatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpIntfWatchRequest) ProtoMessage() {}

func (x *IpIntfWatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ip_intf_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpIntfWatchRequest.ProtoReflect.Descriptor instead.
func (*IpIntfWatchRequest) Descriptor() ([]byte, []int) {
	return file_ip_intf_proto_rawDescGZIP(), []int{0}
}

func (m *IpIntfWatchRequest) GetOverloads() isIpIntfWatchRequest_Overloads {
	if m != nil {
		return m.Overloads
	}
	return nil
}

func (x *IpIntfWatchRequest) GetAllIntfs() bool {
	if x, ok := x.GetOverloads().(*IpIntfWatchRequest_AllIntfs); ok {
		return x.AllIntfs
	}
	return false
}

func (x *IpIntfWatchRequest) GetIntfId() *IntfId {
	if x, ok := x.GetOverloads().(*IpIntfWatchRequest_IntfId); ok {
		return x.IntfId
	}
	return nil
}

func (x *IpIntfWatchRequest) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

type isIpIntfWatchRequest_Overloads interface {
	isIpIntfWatchRequest_Overloads()
}

type IpIntfWatchRequest_AllIntfs struct {
	AllIntfs bool `protobuf:"varint,1,opt,name=all_intfs,json=allIntfs,proto3,oneof"`
}

type IpIntfWatchRequest_IntfId struct {
	// Name of a particular interface to watch.
	IntfId *IntfId `protobuf:"bytes,2,opt,name=intf_id,json=intfId,proto3,oneof"`
}

func (*IpIntfWatchRequest_AllIntfs) isIpIntfWatchRequest_Overloads() {}

func (*IpIntfWatchRequest_IntfId) isIpIntfWatchRequest_Overloads() {}

type IpIntfEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the interface.
	IntfId *IntfId `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
	// Types that are assignable to IpIntfEvent:
	//
	//	*IpIntfEvent_Addr
	//	*IpIntfEvent_VlanId
	IpIntfEvent isIpIntfEvent_IpIntfEvent `protobuf_oneof:"ip_intf_event"`
	// If true, this is not an event and the fields below are invalid.
	Ack bool `protobuf:"varint,4,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (x *IpIntfEvent) Reset() {
	*x = IpIntfEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_intf_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpIntfEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpIntfEvent) ProtoMessage() {}

func (x *IpIntfEvent) ProtoReflect() protoreflect.Message {
	mi := &file_ip_intf_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpIntfEvent.ProtoReflect.Descriptor instead.
func (*IpIntfEvent) Descriptor() ([]byte, []int) {
	return file_ip_intf_proto_rawDescGZIP(), []int{1}
}

func (x *IpIntfEvent) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

func (m *IpIntfEvent) GetIpIntfEvent() isIpIntfEvent_IpIntfEvent {
	if m != nil {
		return m.IpIntfEvent
	}
	return nil
}

func (x *IpIntfEvent) GetAddr() *IpAddrEvent {
	if x, ok := x.GetIpIntfEvent().(*IpIntfEvent_Addr); ok {
		return x.Addr
	}
	return nil
}

func (x *IpIntfEvent) GetVlanId() *VlanId {
	if x, ok := x.GetIpIntfEvent().(*IpIntfEvent_VlanId); ok {
		return x.VlanId
	}
	return nil
}

func (x *IpIntfEvent) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

type isIpIntfEvent_IpIntfEvent interface {
	isIpIntfEvent_IpIntfEvent()
}

type IpIntfEvent_Addr struct {
	// Notifies a change in the interface's addresses.
	Addr *IpAddrEvent `protobuf:"bytes,2,opt,name=addr,proto3,oneof"`
}

type IpIntfEvent_VlanId struct {
	// Change in the interface's VLAN ID has changed.
	VlanId *VlanId `protobuf:"bytes,3,opt,name=vlan_id,json=vlanId,proto3,oneof"`
}

func (*IpIntfEvent_Addr) isIpIntfEvent_IpIntfEvent() {}

func (*IpIntfEvent_VlanId) isIpIntfEvent_IpIntfEvent() {}

type IpIntfExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the interface.
	IntfId *IntfId `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
}

func (x *IpIntfExistsRequest) Reset() {
	*x = IpIntfExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_intf_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpIntfExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpIntfExistsRequest) ProtoMessage() {}

func (x *IpIntfExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ip_intf_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpIntfExistsRequest.ProtoReflect.Descriptor instead.
func (*IpIntfExistsRequest) Descriptor() ([]byte, []int) {
	return file_ip_intf_proto_rawDescGZIP(), []int{2}
}

func (x *IpIntfExistsRequest) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

type IpIntfExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if the interface exists, false otherwise.
	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *IpIntfExistsResponse) Reset() {
	*x = IpIntfExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_intf_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpIntfExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpIntfExistsResponse) ProtoMessage() {}

func (x *IpIntfExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ip_intf_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpIntfExistsResponse.ProtoReflect.Descriptor instead.
func (*IpIntfExistsResponse) Descriptor() ([]byte, []int) {
	return file_ip_intf_proto_rawDescGZIP(), []int{3}
}

func (x *IpIntfExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

type IpIntfAddrsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the interface.
	IntfId *IntfId `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
}

func (x *IpIntfAddrsRequest) Reset() {
	*x = IpIntfAddrsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_intf_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpIntfAddrsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpIntfAddrsRequest) ProtoMessage() {}

func (x *IpIntfAddrsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ip_intf_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpIntfAddrsRequest.ProtoReflect.Descriptor instead.
func (*IpIntfAddrsRequest) Descriptor() ([]byte, []int) {
	return file_ip_intf_proto_rawDescGZIP(), []int{4}
}

func (x *IpIntfAddrsRequest) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

type IpIntfAddrsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of IP addresses wtih masks.
	Addrs []*IpAddrMask `protobuf:"bytes,1,rep,name=addrs,proto3" json:"addrs,omitempty"`
}

func (x *IpIntfAddrsResponse) Reset() {
	*x = IpIntfAddrsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_intf_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpIntfAddrsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpIntfAddrsResponse) ProtoMessage() {}

func (x *IpIntfAddrsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ip_intf_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpIntfAddrsResponse.ProtoReflect.Descriptor instead.
func (*IpIntfAddrsResponse) Descriptor() ([]byte, []int) {
	return file_ip_intf_proto_rawDescGZIP(), []int{5}
}

func (x *IpIntfAddrsResponse) GetAddrs() []*IpAddrMask {
	if x != nil {
		return x.Addrs
	}
	return nil
}

type IpIntfAddrsIsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the interface.
	IntfId *IntfId `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
	// List of IP address with their masks.
	IpAddrMask []*IpAddrMask `protobuf:"bytes,2,rep,name=ip_addr_mask,json=ipAddrMask,proto3" json:"ip_addr_mask,omitempty"`
}

func (x *IpIntfAddrsIsRequest) Reset() {
	*x = IpIntfAddrsIsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_intf_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpIntfAddrsIsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpIntfAddrsIsRequest) ProtoMessage() {}

func (x *IpIntfAddrsIsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ip_intf_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpIntfAddrsIsRequest.ProtoReflect.Descriptor instead.
func (*IpIntfAddrsIsRequest) Descriptor() ([]byte, []int) {
	return file_ip_intf_proto_rawDescGZIP(), []int{6}
}

func (x *IpIntfAddrsIsRequest) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

func (x *IpIntfAddrsIsRequest) GetIpAddrMask() []*IpAddrMask {
	if x != nil {
		return x.IpAddrMask
	}
	return nil
}

type IpIntfAddrsIsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IpIntfAddrsIsResponse) Reset() {
	*x = IpIntfAddrsIsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_intf_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpIntfAddrsIsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpIntfAddrsIsResponse) ProtoMessage() {}

func (x *IpIntfAddrsIsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ip_intf_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpIntfAddrsIsResponse.ProtoReflect.Descriptor instead.
func (*IpIntfAddrsIsResponse) Descriptor() ([]byte, []int) {
	return file_ip_intf_proto_rawDescGZIP(), []int{7}
}

type BulkIpIntfAddrsIsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of IpIntfAddrsRequest.
	Requests []*IpIntfAddrsIsRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkIpIntfAddrsIsRequest) Reset() {
	*x = BulkIpIntfAddrsIsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_intf_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkIpIntfAddrsIsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkIpIntfAddrsIsRequest) ProtoMessage() {}

func (x *BulkIpIntfAddrsIsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ip_intf_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkIpIntfAddrsIsRequest.ProtoReflect.Descriptor instead.
func (*BulkIpIntfAddrsIsRequest) Descriptor() ([]byte, []int) {
	return file_ip_intf_proto_rawDescGZIP(), []int{8}
}

func (x *BulkIpIntfAddrsIsRequest) GetRequests() []*IpIntfAddrsIsRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BulkIpIntfAddrsIsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of requests processed.
	Processed uint64 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	// Success or error details in case of failure.
	Status *RpcResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BulkIpIntfAddrsIsResponse) Reset() {
	*x = BulkIpIntfAddrsIsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_intf_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkIpIntfAddrsIsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkIpIntfAddrsIsResponse) ProtoMessage() {}

func (x *BulkIpIntfAddrsIsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ip_intf_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkIpIntfAddrsIsResponse.ProtoReflect.Descriptor instead.
func (*BulkIpIntfAddrsIsResponse) Descriptor() ([]byte, []int) {
	return file_ip_intf_proto_rawDescGZIP(), []int{9}
}

func (x *BulkIpIntfAddrsIsResponse) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *BulkIpIntfAddrsIsResponse) GetStatus() *RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type IpIntfAddrModifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IP_ADDR_OP_ADD or IP_ADDR_OP_DELETE.
	Operation IpAddrOperations `protobuf:"varint,1,opt,name=operation,proto3,enum=eos.remote.IpAddrOperations" json:"operation,omitempty"`
	// Name of the interface.
	IntfId *IntfId `protobuf:"bytes,2,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
	// IP address with mask.
	IpAddrMask *IpAddrMask `protobuf:"bytes,3,opt,name=ip_addr_mask,json=ipAddrMask,proto3" json:"ip_addr_mask,omitempty"`
}

func (x *IpIntfAddrModifyRequest) Reset() {
	*x = IpIntfAddrModifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_intf_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpIntfAddrModifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpIntfAddrModifyRequest) ProtoMessage() {}

func (x *IpIntfAddrModifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ip_intf_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpIntfAddrModifyRequest.ProtoReflect.Descriptor instead.
func (*IpIntfAddrModifyRequest) Descriptor() ([]byte, []int) {
	return file_ip_intf_proto_rawDescGZIP(), []int{10}
}

func (x *IpIntfAddrModifyRequest) GetOperation() IpAddrOperations {
	if x != nil {
		return x.Operation
	}
	return IpAddrOperations_IP_ADDR_OP_NONE
}

func (x *IpIntfAddrModifyRequest) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

func (x *IpIntfAddrModifyRequest) GetIpAddrMask() *IpAddrMask {
	if x != nil {
		return x.IpAddrMask
	}
	return nil
}

type IpIntfAddrModifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IpIntfAddrModifyResponse) Reset() {
	*x = IpIntfAddrModifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_intf_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpIntfAddrModifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpIntfAddrModifyResponse) ProtoMessage() {}

func (x *IpIntfAddrModifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ip_intf_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpIntfAddrModifyResponse.ProtoReflect.Descriptor instead.
func (*IpIntfAddrModifyResponse) Descriptor() ([]byte, []int) {
	return file_ip_intf_proto_rawDescGZIP(), []int{11}
}

type BulkIpIntfAddrModifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of IpIntfAddrModifyRequest.
	Requests []*IpIntfAddrModifyRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkIpIntfAddrModifyRequest) Reset() {
	*x = BulkIpIntfAddrModifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_intf_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkIpIntfAddrModifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkIpIntfAddrModifyRequest) ProtoMessage() {}

func (x *BulkIpIntfAddrModifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ip_intf_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkIpIntfAddrModifyRequest.ProtoReflect.Descriptor instead.
func (*BulkIpIntfAddrModifyRequest) Descriptor() ([]byte, []int) {
	return file_ip_intf_proto_rawDescGZIP(), []int{12}
}

func (x *BulkIpIntfAddrModifyRequest) GetRequests() []*IpIntfAddrModifyRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BulkIpIntfAddrModifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of requests processed.
	Processed uint64 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	// Success or error details in case of failure.
	Status *RpcResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BulkIpIntfAddrModifyResponse) Reset() {
	*x = BulkIpIntfAddrModifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_intf_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkIpIntfAddrModifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkIpIntfAddrModifyResponse) ProtoMessage() {}

func (x *BulkIpIntfAddrModifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ip_intf_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkIpIntfAddrModifyResponse.ProtoReflect.Descriptor instead.
func (*BulkIpIntfAddrModifyResponse) Descriptor() ([]byte, []int) {
	return file_ip_intf_proto_rawDescGZIP(), []int{13}
}

func (x *BulkIpIntfAddrModifyResponse) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *BulkIpIntfAddrModifyResponse) GetStatus() *RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type IpIntfAddrMergeModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the interface.
	IntfId *IntfId `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
}

func (x *IpIntfAddrMergeModeRequest) Reset() {
	*x = IpIntfAddrMergeModeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_intf_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpIntfAddrMergeModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpIntfAddrMergeModeRequest) ProtoMessage() {}

func (x *IpIntfAddrMergeModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ip_intf_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpIntfAddrMergeModeRequest.ProtoReflect.Descriptor instead.
func (*IpIntfAddrMergeModeRequest) Descriptor() ([]byte, []int) {
	return file_ip_intf_proto_rawDescGZIP(), []int{14}
}

func (x *IpIntfAddrMergeModeRequest) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

type IpIntfAddrMergeModeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if configuration should be merged with configuration from
	// other agents or false if it should be replaced by those.
	MergeMode bool `protobuf:"varint,1,opt,name=merge_mode,json=mergeMode,proto3" json:"merge_mode,omitempty"`
}

func (x *IpIntfAddrMergeModeResponse) Reset() {
	*x = IpIntfAddrMergeModeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_intf_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpIntfAddrMergeModeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpIntfAddrMergeModeResponse) ProtoMessage() {}

func (x *IpIntfAddrMergeModeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ip_intf_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpIntfAddrMergeModeResponse.ProtoReflect.Descriptor instead.
func (*IpIntfAddrMergeModeResponse) Descriptor() ([]byte, []int) {
	return file_ip_intf_proto_rawDescGZIP(), []int{15}
}

func (x *IpIntfAddrMergeModeResponse) GetMergeMode() bool {
	if x != nil {
		return x.MergeMode
	}
	return false
}

type IpIntfAddrMergeModeIsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the interface.
	IntfId *IntfId `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
	// New IP address merge mode for the interface.
	MergeMode bool `protobuf:"varint,2,opt,name=merge_mode,json=mergeMode,proto3" json:"merge_mode,omitempty"`
}

func (x *IpIntfAddrMergeModeIsRequest) Reset() {
	*x = IpIntfAddrMergeModeIsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_intf_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpIntfAddrMergeModeIsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpIntfAddrMergeModeIsRequest) ProtoMessage() {}

func (x *IpIntfAddrMergeModeIsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ip_intf_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpIntfAddrMergeModeIsRequest.ProtoReflect.Descriptor instead.
func (*IpIntfAddrMergeModeIsRequest) Descriptor() ([]byte, []int) {
	return file_ip_intf_proto_rawDescGZIP(), []int{16}
}

func (x *IpIntfAddrMergeModeIsRequest) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

func (x *IpIntfAddrMergeModeIsRequest) GetMergeMode() bool {
	if x != nil {
		return x.MergeMode
	}
	return false
}

type IpIntfAddrMergeModeIsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IpIntfAddrMergeModeIsResponse) Reset() {
	*x = IpIntfAddrMergeModeIsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_intf_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpIntfAddrMergeModeIsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpIntfAddrMergeModeIsResponse) ProtoMessage() {}

func (x *IpIntfAddrMergeModeIsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ip_intf_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpIntfAddrMergeModeIsResponse.ProtoReflect.Descriptor instead.
func (*IpIntfAddrMergeModeIsResponse) Descriptor() ([]byte, []int) {
	return file_ip_intf_proto_rawDescGZIP(), []int{17}
}

type BulkIpIntfAddrMergeModeIsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of IpIntfAddrMergeModeRequest.
	Requests []*IpIntfAddrMergeModeIsRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *BulkIpIntfAddrMergeModeIsRequest) Reset() {
	*x = BulkIpIntfAddrMergeModeIsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_intf_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkIpIntfAddrMergeModeIsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkIpIntfAddrMergeModeIsRequest) ProtoMessage() {}

func (x *BulkIpIntfAddrMergeModeIsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ip_intf_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkIpIntfAddrMergeModeIsRequest.ProtoReflect.Descriptor instead.
func (*BulkIpIntfAddrMergeModeIsRequest) Descriptor() ([]byte, []int) {
	return file_ip_intf_proto_rawDescGZIP(), []int{18}
}

func (x *BulkIpIntfAddrMergeModeIsRequest) GetRequests() []*IpIntfAddrMergeModeIsRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type BulkIpIntfAddrMergeModeIsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of requests processed.
	Processed uint64 `protobuf:"varint,1,opt,name=processed,proto3" json:"processed,omitempty"`
	// Success or error details in case of failure.
	Status *RpcResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BulkIpIntfAddrMergeModeIsResponse) Reset() {
	*x = BulkIpIntfAddrMergeModeIsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_intf_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkIpIntfAddrMergeModeIsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkIpIntfAddrMergeModeIsResponse) ProtoMessage() {}

func (x *BulkIpIntfAddrMergeModeIsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ip_intf_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkIpIntfAddrMergeModeIsResponse.ProtoReflect.Descriptor instead.
func (*BulkIpIntfAddrMergeModeIsResponse) Descriptor() ([]byte, []int) {
	return file_ip_intf_proto_rawDescGZIP(), []int{19}
}

func (x *BulkIpIntfAddrMergeModeIsResponse) GetProcessed() uint64 {
	if x != nil {
		return x.Processed
	}
	return 0
}

func (x *BulkIpIntfAddrMergeModeIsResponse) GetStatus() *RpcResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type IpIntfInternalVlanIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the interface.
	IntfId *IntfId `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
}

func (x *IpIntfInternalVlanIdRequest) Reset() {
	*x = IpIntfInternalVlanIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_intf_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpIntfInternalVlanIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpIntfInternalVlanIdRequest) ProtoMessage() {}

func (x *IpIntfInternalVlanIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ip_intf_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpIntfInternalVlanIdRequest.ProtoReflect.Descriptor instead.
func (*IpIntfInternalVlanIdRequest) Descriptor() ([]byte, []int) {
	return file_ip_intf_proto_rawDescGZIP(), []int{20}
}

func (x *IpIntfInternalVlanIdRequest) GetIntfId() *IntfId {
	if x != nil {
		return x.IntfId
	}
	return nil
}

type IpIntfInternalVlanIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Internal VLAN ID associated with the interface.
	VlanId *VlanId `protobuf:"bytes,1,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
}

func (x *IpIntfInternalVlanIdResponse) Reset() {
	*x = IpIntfInternalVlanIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ip_intf_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpIntfInternalVlanIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpIntfInternalVlanIdResponse) ProtoMessage() {}

func (x *IpIntfInternalVlanIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ip_intf_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpIntfInternalVlanIdResponse.ProtoReflect.Descriptor instead.
func (*IpIntfInternalVlanIdResponse) Descriptor() ([]byte, []int) {
	return file_ip_intf_proto_rawDescGZIP(), []int{21}
}

func (x *IpIntfInternalVlanIdResponse) GetVlanId() *VlanId {
	if x != nil {
		return x.VlanId
	}
	return nil
}

var File_ip_intf_proto protoreflect.FileDescriptor

var file_ip_intf_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x1a, 0x0f, 0x72, 0x70, 0x63,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x69, 0x6e,
	0x74, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13,
	0x69, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x81, 0x01, 0x0a, 0x12, 0x49, 0x70, 0x49, 0x6e, 0x74, 0x66, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x61, 0x6c,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x08, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x66, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x69, 0x6e, 0x74,
	0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x48, 0x00,
	0x52, 0x06, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x42, 0x0b, 0x0a, 0x09, 0x6f, 0x76,
	0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x0b, 0x49, 0x70, 0x49, 0x6e,
	0x74, 0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x52, 0x06, 0x69, 0x6e,
	0x74, 0x66, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x04, 0x61,
	0x64, 0x64, 0x72, 0x12, 0x2d, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x48, 0x00, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x61, 0x63, 0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x42, 0x0a, 0x13, 0x49, 0x70, 0x49, 0x6e, 0x74, 0x66, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x07,
	0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66, 0x49,
	0x64, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x14, 0x49, 0x70, 0x49,
	0x6e, 0x74, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x41, 0x0a, 0x12, 0x49, 0x70, 0x49,
	0x6e, 0x74, 0x66, 0x41, 0x64, 0x64, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e,
	0x74, 0x66, 0x49, 0x64, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x13,
	0x49, 0x70, 0x49, 0x6e, 0x74, 0x66, 0x41, 0x64, 0x64, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x61, 0x64, 0x64, 0x72,
	0x73, 0x22, 0x7d, 0x0a, 0x14, 0x49, 0x70, 0x49, 0x6e, 0x74, 0x66, 0x41, 0x64, 0x64, 0x72, 0x73,
	0x49, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x74,
	0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x52, 0x06,
	0x69, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0c, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x61, 0x73, 0x6b,
	0x22, 0x17, 0x0a, 0x15, 0x49, 0x70, 0x49, 0x6e, 0x74, 0x66, 0x41, 0x64, 0x64, 0x72, 0x73, 0x49,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x0a, 0x18, 0x42, 0x75, 0x6c,
	0x6b, 0x49, 0x70, 0x49, 0x6e, 0x74, 0x66, 0x41, 0x64, 0x64, 0x72, 0x73, 0x49, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x49, 0x6e, 0x74, 0x66, 0x41, 0x64, 0x64, 0x72, 0x73,
	0x49, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x22, 0x70, 0x0a, 0x19, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x70, 0x49, 0x6e, 0x74,
	0x66, 0x41, 0x64, 0x64, 0x72, 0x73, 0x49, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x35,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x17, 0x49, 0x70, 0x49, 0x6e, 0x74, 0x66,
	0x41, 0x64, 0x64, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66,
	0x49, 0x64, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0c, 0x69, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x4d, 0x61, 0x73, 0x6b, 0x22, 0x1a, 0x0a, 0x18, 0x49, 0x70, 0x49, 0x6e, 0x74, 0x66, 0x41, 0x64,
	0x64, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x5e, 0x0a, 0x1b, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x70, 0x49, 0x6e, 0x74, 0x66, 0x41, 0x64,
	0x64, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3f, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49,
	0x70, 0x49, 0x6e, 0x74, 0x66, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x22, 0x73, 0x0a, 0x1c, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x70, 0x49, 0x6e, 0x74, 0x66, 0x41, 0x64,
	0x64, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x35,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x49, 0x0a, 0x1a, 0x49, 0x70, 0x49, 0x6e, 0x74, 0x66, 0x41,
	0x64, 0x64, 0x72, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x2e, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x64,
	0x22, 0x3c, 0x0a, 0x1b, 0x49, 0x70, 0x49, 0x6e, 0x74, 0x66, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x6a,
	0x0a, 0x1c, 0x49, 0x70, 0x49, 0x6e, 0x74, 0x66, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74,
	0x66, 0x49, 0x64, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x49, 0x70,
	0x49, 0x6e, 0x74, 0x66, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x49, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x68, 0x0a, 0x20, 0x42,
	0x75, 0x6c, 0x6b, 0x49, 0x70, 0x49, 0x6e, 0x74, 0x66, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x44, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49,
	0x70, 0x49, 0x6e, 0x74, 0x66, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x49, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x78, 0x0a, 0x21, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x70, 0x49,
	0x6e, 0x74, 0x66, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x49, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x4a, 0x0a, 0x1b, 0x49, 0x70, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x74,
	0x66, 0x49, 0x64, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x1c, 0x49,
	0x70, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x56, 0x6c, 0x61,
	0x6e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64,
	0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x32, 0xb9, 0x08, 0x0a, 0x10, 0x49, 0x70, 0x49,
	0x6e, 0x74, 0x66, 0x4d, 0x67, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a,
	0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1e, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x49, 0x6e, 0x74, 0x66, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x49, 0x6e, 0x74, 0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x4d, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1f, 0x2e,
	0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x49, 0x6e, 0x74,
	0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x49, 0x6e,
	0x74, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4d, 0x0a, 0x08, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x12, 0x1e,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x49, 0x6e,
	0x74, 0x66, 0x41, 0x64, 0x64, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x49, 0x6e,
	0x74, 0x66, 0x41, 0x64, 0x64, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x54, 0x0a, 0x0b, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x5f, 0x69, 0x73,
	0x12, 0x20, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70,
	0x49, 0x6e, 0x74, 0x66, 0x41, 0x64, 0x64, 0x72, 0x73, 0x49, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e,
	0x49, 0x70, 0x49, 0x6e, 0x74, 0x66, 0x41, 0x64, 0x64, 0x72, 0x73, 0x49, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x10, 0x62, 0x75, 0x6c, 0x6b, 0x5f,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73, 0x5f, 0x69, 0x73, 0x12, 0x24, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x70, 0x49,
	0x6e, 0x74, 0x66, 0x41, 0x64, 0x64, 0x72, 0x73, 0x49, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42,
	0x75, 0x6c, 0x6b, 0x49, 0x70, 0x49, 0x6e, 0x74, 0x66, 0x41, 0x64, 0x64, 0x72, 0x73, 0x49, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0e, 0x69, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x23, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x49, 0x6e, 0x74, 0x66,
	0x41, 0x64, 0x64, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49,
	0x70, 0x49, 0x6e, 0x74, 0x66, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x13, 0x62, 0x75, 0x6c,
	0x6b, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x12, 0x27, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75,
	0x6c, 0x6b, 0x49, 0x70, 0x49, 0x6e, 0x74, 0x66, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x65, 0x6f, 0x73, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x70, 0x49, 0x6e, 0x74,
	0x66, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x12, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x2e, 0x65, 0x6f,
	0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x49, 0x6e, 0x74, 0x66, 0x41,
	0x64, 0x64, 0x72, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x2e, 0x49, 0x70, 0x49, 0x6e, 0x74, 0x66, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e,
	0x0a, 0x15, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x73, 0x12, 0x28, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x49, 0x6e, 0x74, 0x66, 0x41, 0x64, 0x64, 0x72, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x49, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49,
	0x70, 0x49, 0x6e, 0x74, 0x66, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x49, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7b,
	0x0a, 0x1a, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x73, 0x12, 0x2c, 0x2e, 0x65,
	0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x70,
	0x49, 0x6e, 0x74, 0x66, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x49, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x65, 0x6f, 0x73,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x70, 0x49, 0x6e,
	0x74, 0x66, 0x41, 0x64, 0x64, 0x72, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x49,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x10, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x12,
	0x27, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x49,
	0x6e, 0x74, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x65, 0x6f, 0x73, 0x2e, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x49, 0x70, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x12, 0x5a, 0x10, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x45,
	0x6f, 0x73, 0x53, 0x64, 0x6b, 0x52, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ip_intf_proto_rawDescOnce sync.Once
	file_ip_intf_proto_rawDescData = file_ip_intf_proto_rawDesc
)

func file_ip_intf_proto_rawDescGZIP() []byte {
	file_ip_intf_proto_rawDescOnce.Do(func() {
		file_ip_intf_proto_rawDescData = protoimpl.X.CompressGZIP(file_ip_intf_proto_rawDescData)
	})
	return file_ip_intf_proto_rawDescData
}

var file_ip_intf_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_ip_intf_proto_goTypes = []interface{}{
	(*IpIntfWatchRequest)(nil),                // 0: eos.remote.IpIntfWatchRequest
	(*IpIntfEvent)(nil),                       // 1: eos.remote.IpIntfEvent
	(*IpIntfExistsRequest)(nil),               // 2: eos.remote.IpIntfExistsRequest
	(*IpIntfExistsResponse)(nil),              // 3: eos.remote.IpIntfExistsResponse
	(*IpIntfAddrsRequest)(nil),                // 4: eos.remote.IpIntfAddrsRequest
	(*IpIntfAddrsResponse)(nil),               // 5: eos.remote.IpIntfAddrsResponse
	(*IpIntfAddrsIsRequest)(nil),              // 6: eos.remote.IpIntfAddrsIsRequest
	(*IpIntfAddrsIsResponse)(nil),             // 7: eos.remote.IpIntfAddrsIsResponse
	(*BulkIpIntfAddrsIsRequest)(nil),          // 8: eos.remote.BulkIpIntfAddrsIsRequest
	(*BulkIpIntfAddrsIsResponse)(nil),         // 9: eos.remote.BulkIpIntfAddrsIsResponse
	(*IpIntfAddrModifyRequest)(nil),           // 10: eos.remote.IpIntfAddrModifyRequest
	(*IpIntfAddrModifyResponse)(nil),          // 11: eos.remote.IpIntfAddrModifyResponse
	(*BulkIpIntfAddrModifyRequest)(nil),       // 12: eos.remote.BulkIpIntfAddrModifyRequest
	(*BulkIpIntfAddrModifyResponse)(nil),      // 13: eos.remote.BulkIpIntfAddrModifyResponse
	(*IpIntfAddrMergeModeRequest)(nil),        // 14: eos.remote.IpIntfAddrMergeModeRequest
	(*IpIntfAddrMergeModeResponse)(nil),       // 15: eos.remote.IpIntfAddrMergeModeResponse
	(*IpIntfAddrMergeModeIsRequest)(nil),      // 16: eos.remote.IpIntfAddrMergeModeIsRequest
	(*IpIntfAddrMergeModeIsResponse)(nil),     // 17: eos.remote.IpIntfAddrMergeModeIsResponse
	(*BulkIpIntfAddrMergeModeIsRequest)(nil),  // 18: eos.remote.BulkIpIntfAddrMergeModeIsRequest
	(*BulkIpIntfAddrMergeModeIsResponse)(nil), // 19: eos.remote.BulkIpIntfAddrMergeModeIsResponse
	(*IpIntfInternalVlanIdRequest)(nil),       // 20: eos.remote.IpIntfInternalVlanIdRequest
	(*IpIntfInternalVlanIdResponse)(nil),      // 21: eos.remote.IpIntfInternalVlanIdResponse
	(*IntfId)(nil),                            // 22: eos.remote.IntfId
	(*IpAddrEvent)(nil),                       // 23: eos.remote.IpAddrEvent
	(*VlanId)(nil),                            // 24: eos.remote.VlanId
	(*IpAddrMask)(nil),                        // 25: eos.remote.IpAddrMask
	(*RpcResponseStatus)(nil),                 // 26: eos.remote.RpcResponseStatus
	(IpAddrOperations)(0),                     // 27: eos.remote.IpAddrOperations
}
var file_ip_intf_proto_depIdxs = []int32{
	22, // 0: eos.remote.IpIntfWatchRequest.intf_id:type_name -> eos.remote.IntfId
	22, // 1: eos.remote.IpIntfEvent.intf_id:type_name -> eos.remote.IntfId
	23, // 2: eos.remote.IpIntfEvent.addr:type_name -> eos.remote.IpAddrEvent
	24, // 3: eos.remote.IpIntfEvent.vlan_id:type_name -> eos.remote.VlanId
	22, // 4: eos.remote.IpIntfExistsRequest.intf_id:type_name -> eos.remote.IntfId
	22, // 5: eos.remote.IpIntfAddrsRequest.intf_id:type_name -> eos.remote.IntfId
	25, // 6: eos.remote.IpIntfAddrsResponse.addrs:type_name -> eos.remote.IpAddrMask
	22, // 7: eos.remote.IpIntfAddrsIsRequest.intf_id:type_name -> eos.remote.IntfId
	25, // 8: eos.remote.IpIntfAddrsIsRequest.ip_addr_mask:type_name -> eos.remote.IpAddrMask
	6,  // 9: eos.remote.BulkIpIntfAddrsIsRequest.requests:type_name -> eos.remote.IpIntfAddrsIsRequest
	26, // 10: eos.remote.BulkIpIntfAddrsIsResponse.status:type_name -> eos.remote.RpcResponseStatus
	27, // 11: eos.remote.IpIntfAddrModifyRequest.operation:type_name -> eos.remote.IpAddrOperations
	22, // 12: eos.remote.IpIntfAddrModifyRequest.intf_id:type_name -> eos.remote.IntfId
	25, // 13: eos.remote.IpIntfAddrModifyRequest.ip_addr_mask:type_name -> eos.remote.IpAddrMask
	10, // 14: eos.remote.BulkIpIntfAddrModifyRequest.requests:type_name -> eos.remote.IpIntfAddrModifyRequest
	26, // 15: eos.remote.BulkIpIntfAddrModifyResponse.status:type_name -> eos.remote.RpcResponseStatus
	22, // 16: eos.remote.IpIntfAddrMergeModeRequest.intf_id:type_name -> eos.remote.IntfId
	22, // 17: eos.remote.IpIntfAddrMergeModeIsRequest.intf_id:type_name -> eos.remote.IntfId
	16, // 18: eos.remote.BulkIpIntfAddrMergeModeIsRequest.requests:type_name -> eos.remote.IpIntfAddrMergeModeIsRequest
	26, // 19: eos.remote.BulkIpIntfAddrMergeModeIsResponse.status:type_name -> eos.remote.RpcResponseStatus
	22, // 20: eos.remote.IpIntfInternalVlanIdRequest.intf_id:type_name -> eos.remote.IntfId
	24, // 21: eos.remote.IpIntfInternalVlanIdResponse.vlan_id:type_name -> eos.remote.VlanId
	0,  // 22: eos.remote.IpIntfMgrService.watch:input_type -> eos.remote.IpIntfWatchRequest
	2,  // 23: eos.remote.IpIntfMgrService.exists:input_type -> eos.remote.IpIntfExistsRequest
	4,  // 24: eos.remote.IpIntfMgrService.ip_addrs:input_type -> eos.remote.IpIntfAddrsRequest
	6,  // 25: eos.remote.IpIntfMgrService.ip_addrs_is:input_type -> eos.remote.IpIntfAddrsIsRequest
	8,  // 26: eos.remote.IpIntfMgrService.bulk_ip_addrs_is:input_type -> eos.remote.BulkIpIntfAddrsIsRequest
	10, // 27: eos.remote.IpIntfMgrService.ip_addr_modify:input_type -> eos.remote.IpIntfAddrModifyRequest
	12, // 28: eos.remote.IpIntfMgrService.bulk_ip_addr_modify:input_type -> eos.remote.BulkIpIntfAddrModifyRequest
	14, // 29: eos.remote.IpIntfMgrService.ip_addr_merge_mode:input_type -> eos.remote.IpIntfAddrMergeModeRequest
	16, // 30: eos.remote.IpIntfMgrService.ip_addr_merge_mode_is:input_type -> eos.remote.IpIntfAddrMergeModeIsRequest
	18, // 31: eos.remote.IpIntfMgrService.bulk_ip_addr_merge_mode_is:input_type -> eos.remote.BulkIpIntfAddrMergeModeIsRequest
	20, // 32: eos.remote.IpIntfMgrService.internal_vlan_id:input_type -> eos.remote.IpIntfInternalVlanIdRequest
	1,  // 33: eos.remote.IpIntfMgrService.watch:output_type -> eos.remote.IpIntfEvent
	3,  // 34: eos.remote.IpIntfMgrService.exists:output_type -> eos.remote.IpIntfExistsResponse
	5,  // 35: eos.remote.IpIntfMgrService.ip_addrs:output_type -> eos.remote.IpIntfAddrsResponse
	7,  // 36: eos.remote.IpIntfMgrService.ip_addrs_is:output_type -> eos.remote.IpIntfAddrsIsResponse
	9,  // 37: eos.remote.IpIntfMgrService.bulk_ip_addrs_is:output_type -> eos.remote.BulkIpIntfAddrsIsResponse
	11, // 38: eos.remote.IpIntfMgrService.ip_addr_modify:output_type -> eos.remote.IpIntfAddrModifyResponse
	13, // 39: eos.remote.IpIntfMgrService.bulk_ip_addr_modify:output_type -> eos.remote.BulkIpIntfAddrModifyResponse
	15, // 40: eos.remote.IpIntfMgrService.ip_addr_merge_mode:output_type -> eos.remote.IpIntfAddrMergeModeResponse
	17, // 41: eos.remote.IpIntfMgrService.ip_addr_merge_mode_is:output_type -> eos.remote.IpIntfAddrMergeModeIsResponse
	19, // 42: eos.remote.IpIntfMgrService.bulk_ip_addr_merge_mode_is:output_type -> eos.remote.BulkIpIntfAddrMergeModeIsResponse
	21, // 43: eos.remote.IpIntfMgrService.internal_vlan_id:output_type -> eos.remote.IpIntfInternalVlanIdResponse
	33, // [33:44] is the sub-list for method output_type
	22, // [22:33] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_ip_intf_proto_init() }
func file_ip_intf_proto_init() {
	if File_ip_intf_proto != nil {
		return
	}
	file_rpc_types_proto_init()
	file_intf_types_proto_init()
	file_ip_intf_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ip_intf_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpIntfWatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_intf_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpIntfEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_intf_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpIntfExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_intf_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpIntfExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_intf_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpIntfAddrsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_intf_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpIntfAddrsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_intf_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpIntfAddrsIsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_intf_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpIntfAddrsIsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_intf_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkIpIntfAddrsIsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_intf_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkIpIntfAddrsIsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_intf_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpIntfAddrModifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_intf_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpIntfAddrModifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_intf_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkIpIntfAddrModifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_intf_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkIpIntfAddrModifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_intf_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpIntfAddrMergeModeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_intf_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpIntfAddrMergeModeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_intf_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpIntfAddrMergeModeIsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_intf_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpIntfAddrMergeModeIsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_intf_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkIpIntfAddrMergeModeIsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_intf_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkIpIntfAddrMergeModeIsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_intf_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpIntfInternalVlanIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ip_intf_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpIntfInternalVlanIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ip_intf_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*IpIntfWatchRequest_AllIntfs)(nil),
		(*IpIntfWatchRequest_IntfId)(nil),
	}
	file_ip_intf_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*IpIntfEvent_Addr)(nil),
		(*IpIntfEvent_VlanId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ip_intf_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ip_intf_proto_goTypes,
		DependencyIndexes: file_ip_intf_proto_depIdxs,
		MessageInfos:      file_ip_intf_proto_msgTypes,
	}.Build()
	File_ip_intf_proto = out.File
	file_ip_intf_proto_rawDesc = nil
	file_ip_intf_proto_goTypes = nil
	file_ip_intf_proto_depIdxs = nil
}
