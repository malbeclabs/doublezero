// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: bgp_path.proto

package EosSdkRpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BgpPathMgrServiceClient is the client API for BgpPathMgrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BgpPathMgrServiceClient interface {
	// *
	// Subscription to monitor changes to bgp paths. This request
	// stays active until the client cancels or the server shuts down.
	// When all = false and no version is specified, this request has no effect.
	//
	// EosSdk reference: eos::bgp_path_handler (class)
	Watch(ctx context.Context, in *BgpPathWatchRequest, opts ...grpc.CallOption) (BgpPathMgrService_WatchClient, error)
	// *
	// Iterates through all IPv4 paths in adj-RIB-in that match the search criteria.
	//
	// EosSdk reference: eos::bgp_path_mgr::ipv4_unicast_path_iter
	Ipv4UnicastPaths(ctx context.Context, in *Ipv4UnicastPathsRequest, opts ...grpc.CallOption) (BgpPathMgrService_Ipv4UnicastPathsClient, error)
	// *
	// Queries a single path, given its key and search criteria.
	//
	// EosSdk reference: eos::bgp_path_mgr::ipv4_unicast_path
	Ipv4UnicastPath(ctx context.Context, in *Ipv4UnicastPathRequest, opts ...grpc.CallOption) (*Ipv4UnicastPathResponse, error)
	// *
	// Queries if IPv4 family has converged.
	//
	// EosSdk reference: eos::bgp_path_mgr::ipv4_unicast_bgp_convergence
	Ipv4UnicastBgpConvergence(ctx context.Context, in *Ipv4UnicastBgpConvergenceRequest, opts ...grpc.CallOption) (*Ipv4UnicastBgpConvergenceResponse, error)
	// *
	// Iterates through adj-RIB-in for paths that match the criteria.
	//
	// EosSdk reference: eos::bgp_path_mgr::ipv6_unicast_path_iter
	Ipv6UnicastPaths(ctx context.Context, in *Ipv6UnicastPathsRequest, opts ...grpc.CallOption) (BgpPathMgrService_Ipv6UnicastPathsClient, error)
	// *
	// Queries a single path, given its key and search criteria.
	//
	// EosSdk reference: eos::bgp_path_mgr::ipv6_unicast_path
	Ipv6UnicastPath(ctx context.Context, in *Ipv6UnicastPathRequest, opts ...grpc.CallOption) (*Ipv6UnicastPathResponse, error)
	// *
	// Queries if IPv6 family has converged.
	//
	// EosSdk reference: eos::bgp_path_mgr::ipv6_unicast_bgp_convergence
	Ipv6UnicastBgpConvergence(ctx context.Context, in *Ipv6UnicastBgpConvergenceRequest, opts ...grpc.CallOption) (*Ipv6UnicastBgpConvergenceResponse, error)
}

type bgpPathMgrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBgpPathMgrServiceClient(cc grpc.ClientConnInterface) BgpPathMgrServiceClient {
	return &bgpPathMgrServiceClient{cc}
}

func (c *bgpPathMgrServiceClient) Watch(ctx context.Context, in *BgpPathWatchRequest, opts ...grpc.CallOption) (BgpPathMgrService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &BgpPathMgrService_ServiceDesc.Streams[0], "/eos.remote.BgpPathMgrService/watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &bgpPathMgrServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BgpPathMgrService_WatchClient interface {
	Recv() (*BgpPathWatchResponse, error)
	grpc.ClientStream
}

type bgpPathMgrServiceWatchClient struct {
	grpc.ClientStream
}

func (x *bgpPathMgrServiceWatchClient) Recv() (*BgpPathWatchResponse, error) {
	m := new(BgpPathWatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bgpPathMgrServiceClient) Ipv4UnicastPaths(ctx context.Context, in *Ipv4UnicastPathsRequest, opts ...grpc.CallOption) (BgpPathMgrService_Ipv4UnicastPathsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BgpPathMgrService_ServiceDesc.Streams[1], "/eos.remote.BgpPathMgrService/ipv4_unicast_paths", opts...)
	if err != nil {
		return nil, err
	}
	x := &bgpPathMgrServiceIpv4UnicastPathsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BgpPathMgrService_Ipv4UnicastPathsClient interface {
	Recv() (*Ipv4UnicastPathsResponse, error)
	grpc.ClientStream
}

type bgpPathMgrServiceIpv4UnicastPathsClient struct {
	grpc.ClientStream
}

func (x *bgpPathMgrServiceIpv4UnicastPathsClient) Recv() (*Ipv4UnicastPathsResponse, error) {
	m := new(Ipv4UnicastPathsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bgpPathMgrServiceClient) Ipv4UnicastPath(ctx context.Context, in *Ipv4UnicastPathRequest, opts ...grpc.CallOption) (*Ipv4UnicastPathResponse, error) {
	out := new(Ipv4UnicastPathResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.BgpPathMgrService/ipv4_unicast_path", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpPathMgrServiceClient) Ipv4UnicastBgpConvergence(ctx context.Context, in *Ipv4UnicastBgpConvergenceRequest, opts ...grpc.CallOption) (*Ipv4UnicastBgpConvergenceResponse, error) {
	out := new(Ipv4UnicastBgpConvergenceResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.BgpPathMgrService/ipv4_unicast_bgp_convergence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpPathMgrServiceClient) Ipv6UnicastPaths(ctx context.Context, in *Ipv6UnicastPathsRequest, opts ...grpc.CallOption) (BgpPathMgrService_Ipv6UnicastPathsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BgpPathMgrService_ServiceDesc.Streams[2], "/eos.remote.BgpPathMgrService/ipv6_unicast_paths", opts...)
	if err != nil {
		return nil, err
	}
	x := &bgpPathMgrServiceIpv6UnicastPathsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BgpPathMgrService_Ipv6UnicastPathsClient interface {
	Recv() (*Ipv6UnicastPathsResponse, error)
	grpc.ClientStream
}

type bgpPathMgrServiceIpv6UnicastPathsClient struct {
	grpc.ClientStream
}

func (x *bgpPathMgrServiceIpv6UnicastPathsClient) Recv() (*Ipv6UnicastPathsResponse, error) {
	m := new(Ipv6UnicastPathsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bgpPathMgrServiceClient) Ipv6UnicastPath(ctx context.Context, in *Ipv6UnicastPathRequest, opts ...grpc.CallOption) (*Ipv6UnicastPathResponse, error) {
	out := new(Ipv6UnicastPathResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.BgpPathMgrService/ipv6_unicast_path", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bgpPathMgrServiceClient) Ipv6UnicastBgpConvergence(ctx context.Context, in *Ipv6UnicastBgpConvergenceRequest, opts ...grpc.CallOption) (*Ipv6UnicastBgpConvergenceResponse, error) {
	out := new(Ipv6UnicastBgpConvergenceResponse)
	err := c.cc.Invoke(ctx, "/eos.remote.BgpPathMgrService/ipv6_unicast_bgp_convergence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BgpPathMgrServiceServer is the server API for BgpPathMgrService service.
// All implementations should embed UnimplementedBgpPathMgrServiceServer
// for forward compatibility
type BgpPathMgrServiceServer interface {
	// *
	// Subscription to monitor changes to bgp paths. This request
	// stays active until the client cancels or the server shuts down.
	// When all = false and no version is specified, this request has no effect.
	//
	// EosSdk reference: eos::bgp_path_handler (class)
	Watch(*BgpPathWatchRequest, BgpPathMgrService_WatchServer) error
	// *
	// Iterates through all IPv4 paths in adj-RIB-in that match the search criteria.
	//
	// EosSdk reference: eos::bgp_path_mgr::ipv4_unicast_path_iter
	Ipv4UnicastPaths(*Ipv4UnicastPathsRequest, BgpPathMgrService_Ipv4UnicastPathsServer) error
	// *
	// Queries a single path, given its key and search criteria.
	//
	// EosSdk reference: eos::bgp_path_mgr::ipv4_unicast_path
	Ipv4UnicastPath(context.Context, *Ipv4UnicastPathRequest) (*Ipv4UnicastPathResponse, error)
	// *
	// Queries if IPv4 family has converged.
	//
	// EosSdk reference: eos::bgp_path_mgr::ipv4_unicast_bgp_convergence
	Ipv4UnicastBgpConvergence(context.Context, *Ipv4UnicastBgpConvergenceRequest) (*Ipv4UnicastBgpConvergenceResponse, error)
	// *
	// Iterates through adj-RIB-in for paths that match the criteria.
	//
	// EosSdk reference: eos::bgp_path_mgr::ipv6_unicast_path_iter
	Ipv6UnicastPaths(*Ipv6UnicastPathsRequest, BgpPathMgrService_Ipv6UnicastPathsServer) error
	// *
	// Queries a single path, given its key and search criteria.
	//
	// EosSdk reference: eos::bgp_path_mgr::ipv6_unicast_path
	Ipv6UnicastPath(context.Context, *Ipv6UnicastPathRequest) (*Ipv6UnicastPathResponse, error)
	// *
	// Queries if IPv6 family has converged.
	//
	// EosSdk reference: eos::bgp_path_mgr::ipv6_unicast_bgp_convergence
	Ipv6UnicastBgpConvergence(context.Context, *Ipv6UnicastBgpConvergenceRequest) (*Ipv6UnicastBgpConvergenceResponse, error)
}

// UnimplementedBgpPathMgrServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBgpPathMgrServiceServer struct {
}

func (UnimplementedBgpPathMgrServiceServer) Watch(*BgpPathWatchRequest, BgpPathMgrService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedBgpPathMgrServiceServer) Ipv4UnicastPaths(*Ipv4UnicastPathsRequest, BgpPathMgrService_Ipv4UnicastPathsServer) error {
	return status.Errorf(codes.Unimplemented, "method Ipv4UnicastPaths not implemented")
}
func (UnimplementedBgpPathMgrServiceServer) Ipv4UnicastPath(context.Context, *Ipv4UnicastPathRequest) (*Ipv4UnicastPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ipv4UnicastPath not implemented")
}
func (UnimplementedBgpPathMgrServiceServer) Ipv4UnicastBgpConvergence(context.Context, *Ipv4UnicastBgpConvergenceRequest) (*Ipv4UnicastBgpConvergenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ipv4UnicastBgpConvergence not implemented")
}
func (UnimplementedBgpPathMgrServiceServer) Ipv6UnicastPaths(*Ipv6UnicastPathsRequest, BgpPathMgrService_Ipv6UnicastPathsServer) error {
	return status.Errorf(codes.Unimplemented, "method Ipv6UnicastPaths not implemented")
}
func (UnimplementedBgpPathMgrServiceServer) Ipv6UnicastPath(context.Context, *Ipv6UnicastPathRequest) (*Ipv6UnicastPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ipv6UnicastPath not implemented")
}
func (UnimplementedBgpPathMgrServiceServer) Ipv6UnicastBgpConvergence(context.Context, *Ipv6UnicastBgpConvergenceRequest) (*Ipv6UnicastBgpConvergenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ipv6UnicastBgpConvergence not implemented")
}

// UnsafeBgpPathMgrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BgpPathMgrServiceServer will
// result in compilation errors.
type UnsafeBgpPathMgrServiceServer interface {
	mustEmbedUnimplementedBgpPathMgrServiceServer()
}

func RegisterBgpPathMgrServiceServer(s grpc.ServiceRegistrar, srv BgpPathMgrServiceServer) {
	s.RegisterService(&BgpPathMgrService_ServiceDesc, srv)
}

func _BgpPathMgrService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BgpPathWatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BgpPathMgrServiceServer).Watch(m, &bgpPathMgrServiceWatchServer{stream})
}

type BgpPathMgrService_WatchServer interface {
	Send(*BgpPathWatchResponse) error
	grpc.ServerStream
}

type bgpPathMgrServiceWatchServer struct {
	grpc.ServerStream
}

func (x *bgpPathMgrServiceWatchServer) Send(m *BgpPathWatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BgpPathMgrService_Ipv4UnicastPaths_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Ipv4UnicastPathsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BgpPathMgrServiceServer).Ipv4UnicastPaths(m, &bgpPathMgrServiceIpv4UnicastPathsServer{stream})
}

type BgpPathMgrService_Ipv4UnicastPathsServer interface {
	Send(*Ipv4UnicastPathsResponse) error
	grpc.ServerStream
}

type bgpPathMgrServiceIpv4UnicastPathsServer struct {
	grpc.ServerStream
}

func (x *bgpPathMgrServiceIpv4UnicastPathsServer) Send(m *Ipv4UnicastPathsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BgpPathMgrService_Ipv4UnicastPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ipv4UnicastPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpPathMgrServiceServer).Ipv4UnicastPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.BgpPathMgrService/ipv4_unicast_path",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpPathMgrServiceServer).Ipv4UnicastPath(ctx, req.(*Ipv4UnicastPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpPathMgrService_Ipv4UnicastBgpConvergence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ipv4UnicastBgpConvergenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpPathMgrServiceServer).Ipv4UnicastBgpConvergence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.BgpPathMgrService/ipv4_unicast_bgp_convergence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpPathMgrServiceServer).Ipv4UnicastBgpConvergence(ctx, req.(*Ipv4UnicastBgpConvergenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpPathMgrService_Ipv6UnicastPaths_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Ipv6UnicastPathsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BgpPathMgrServiceServer).Ipv6UnicastPaths(m, &bgpPathMgrServiceIpv6UnicastPathsServer{stream})
}

type BgpPathMgrService_Ipv6UnicastPathsServer interface {
	Send(*Ipv6UnicastPathsResponse) error
	grpc.ServerStream
}

type bgpPathMgrServiceIpv6UnicastPathsServer struct {
	grpc.ServerStream
}

func (x *bgpPathMgrServiceIpv6UnicastPathsServer) Send(m *Ipv6UnicastPathsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BgpPathMgrService_Ipv6UnicastPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ipv6UnicastPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpPathMgrServiceServer).Ipv6UnicastPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.BgpPathMgrService/ipv6_unicast_path",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpPathMgrServiceServer).Ipv6UnicastPath(ctx, req.(*Ipv6UnicastPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BgpPathMgrService_Ipv6UnicastBgpConvergence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ipv6UnicastBgpConvergenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BgpPathMgrServiceServer).Ipv6UnicastBgpConvergence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eos.remote.BgpPathMgrService/ipv6_unicast_bgp_convergence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BgpPathMgrServiceServer).Ipv6UnicastBgpConvergence(ctx, req.(*Ipv6UnicastBgpConvergenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BgpPathMgrService_ServiceDesc is the grpc.ServiceDesc for BgpPathMgrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BgpPathMgrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eos.remote.BgpPathMgrService",
	HandlerType: (*BgpPathMgrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ipv4_unicast_path",
			Handler:    _BgpPathMgrService_Ipv4UnicastPath_Handler,
		},
		{
			MethodName: "ipv4_unicast_bgp_convergence",
			Handler:    _BgpPathMgrService_Ipv4UnicastBgpConvergence_Handler,
		},
		{
			MethodName: "ipv6_unicast_path",
			Handler:    _BgpPathMgrService_Ipv6UnicastPath_Handler,
		},
		{
			MethodName: "ipv6_unicast_bgp_convergence",
			Handler:    _BgpPathMgrService_Ipv6UnicastBgpConvergence_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "watch",
			Handler:       _BgpPathMgrService_Watch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ipv4_unicast_paths",
			Handler:       _BgpPathMgrService_Ipv4UnicastPaths_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ipv6_unicast_paths",
			Handler:       _BgpPathMgrService_Ipv6UnicastPaths_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bgp_path.proto",
}
